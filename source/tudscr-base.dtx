% \CheckSum{441}
% \iffalse meta-comment
% 
% ============================================================================
% 
%  TUD-KOMA-Script
%  Copyright (c) Falk Hanisch <tudscr@gmail.com>, 2012-2015
% 
% ============================================================================
% 
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, version 1.3c of the license. The latest
%  version of this license is in http://www.latex-project.org/lppl.txt and 
%  version 1.3c or later is part of all distributions of LaTeX 2005/12/01
%  or later and of this work. This work has the LPPL maintenance status 
%  "author-maintained". The current maintainer and author of this work
%  is Falk Hanisch.
% 
% ----------------------------------------------------------------------------
% 
% Dieses Werk darf nach den Bedingungen der LaTeX Project Public Lizenz
% in der Version 1.3c, verteilt und/oder veraendert werden. Die aktuelle 
% Version dieser Lizenz ist http://www.latex-project.org/lppl.txt und 
% Version 1.3c oder spaeter ist Teil aller Verteilungen von LaTeX 2005/12/01 
% oder spaeter und dieses Werks. Dieses Werk hat den LPPL-Verwaltungs-Status 
% "author-maintained", wird somit allein durch den Autor verwaltet. Der 
% aktuelle Verwalter und Autor dieses Werkes ist Falk Hanisch.
% 
% ============================================================================
%
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \iffalse
%%% From File: tudscr-base.dtx
%<*driver>
\ifx\ProvidesFile\undefined\def\ProvidesFile#1[#2]{}\fi
\ProvidesFile{tudscr-base.dtx}[%
  2015/05/06 v2.04 TUD-KOMA-Script\space%
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{tudscrbase}[%
%<*driver|package>
%!TUDVersion
%<package>  package
  (basics for the bundle)%
]
%</driver|package>
%<*driver>
\RequirePackage[ngerman=ngerman-x-latest]{hyphsubst}
\documentclass[english,ngerman]{tudscrdoc}
\usepackage{selinput}\SelectInputMappings{adieresis={ä},germandbls={ß}}
\usepackage[T1]{fontenc}
\usepackage{babel}
\usepackage{tudscrfonts} % only load this package, if the fonts are installed
\KOMAoptions{parskip=half-}
\CodelineIndex
\RecordChanges
\GetFileInfo{tudscr-base.dtx}
\begin{document}
  \maketitle
  \DocInput{\filename}
\end{document}
%</driver>
% \fi
%
% \selectlanguage{ngerman}
%
% \changes{v2.02}{2014/06/23}{Unterstützung für \pkg{titlepage} entfernt}^^A
%
% \section{Grundlegende Befehle und Pakete}
%
% Für die Erstellung der Wrapper-Klassen werden die dafür benötigten Pakete
% eingebunden und Steuerungsbefehle definiert.
%
% \StopEventually{\PrintIndex\PrintChanges}
%
% \iffalse
%<*package>
% \fi
%
% \subsection{Das Paket \pkg{tudscrbase}}
%
% Das Paket \pkg{scrbase} wird zur Optionsdefinition benötigt.
%    \begin{macrocode}
\RequirePackage{scrbase}[2013/12/19]
%    \end{macrocode}
% Das Paket \pkg{kvsetkeys} erweitert \pkg{keyval} um die Möglichkeit, das
% Verhalten bei der Angabe eines nicht definierten Schlüssels festzulegen.
%    \begin{macrocode}
\RequirePackage{kvsetkeys}[2012/04/25]
%    \end{macrocode}
% Das Paket \pkg{etoolbox} wird für die Manipulation bereits definierter
% Makros sowie zur erweiterten Auswertung boolescher Ausdrücke benötigt.
%    \begin{macrocode}
\RequirePackage{etoolbox}[2011/01/03]
%    \end{macrocode}
%
% \subsubsection{Robuster Test auf leeres Argument}
%
% \begin{macro}{\ifxblank}
% Hiermit kann ein Argument geprüft werden, ob dieses blank ist (leer oder
% Leerzeichen). In seiner Syntax ist er identisch zu \cs{ifblank}, allerdings
% expandiert er im Gegensatz zu diesem das gegebene Argument.
%    \begin{macrocode}
\newcommand*\ifxblank{\expandafter\ifblank\expandafter}
%    \end{macrocode}
% \end{macro}^^A \ifxblank
%
% \subsubsection{Robuster Test auf numerischen Ausdruck}
%
% \begin{macro}{\ifxnumber}
% Dieser Befehl dient zum Testen, ob ein gegebenes Argument eine Zahl ist.
% Die Syntax lautet: \cs{ifxnumber}\marg{Argument}\marg{Wahr}\marg{Falsch}
%    \begin{macrocode}
\newcommand*\ifxnumber[1]{%
  \if\relax\detokenize\expandafter{\romannumeral-0#1}\relax%
    \expandafter\@firstoftwo%
  \else%
    \expandafter\@secondoftwo%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \ifxnumber
%
% \subsubsection{Test auf booleschen Ausdruck in Form eines Strings}
%
% \begin{macro}{\ifstrbool}
% \changes{v2.03}{2015/01/09}{neu}^^A
% Dieser Befehl dient zum Testen, ob ein gegebener String als boolescher 
% Ausdruck interpretiert werden kann. Ist der String als \enquote{wahr} 
% interpretierbar, wird das zweite Argument ausgeführt. Kann der String als 
% \enquote{falsch} angesehen werden, dementsprechen das dritte. Ist der String 
% kein logischer Wert, kommt das letzte Argument zum Tragen. Die Syntax lautet: 
% \cs{ifstrbool}\marg{Argument}\marg{Wahr}\marg{Falsch}\marg{Andernfalls}
%    \begin{macrocode}
\newcommand*\ifstrbool[4]{%
  \ifstr{#1}{true}{#2}{%
    \ifstr{#1}{on}{#2}{%
      \ifstr{#1}{yes}{#2}{%
        \ifstr{#1}{false}{#3}{%
          \ifstr{#1}{no}{#3}{%
            \ifstr{#1}{off}{#3}{%
              #4%
            }%
          }%
        }%
      }%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \ifstrbool
%
% \subsubsection{Schlüssel und Parameter für \TUDScript}
%
% \begin{macro}{\TUDProcessOptions}
% \begin{macro}{\TUDExecuteOptions}
% \begin{macro}{\TUDoptions}
% \begin{macro}{\TUDoption}
% \begin{macro}{\TUD@noworlater}
% \begin{macro}{\TUD@key}
% \begin{macro}{\TUD@@key}
% \begin{macro}{\TUD@@@key}
% \begin{macro}{\TUD@ifkey}
% \begin{macro}{\TUD@set@ifkey}
% \begin{macro}{\TUD@numkey}
% \begin{macro}{\TUD@numkey@bool}
% \changes{v2.03}{2015/01/09}{neu}^^A
% \begin{macro}{\TUD@set@numkey}
% \changes{v2.02}{2014/11/05}{neu}^^A
% \begin{macro}{\TUD@lengthkey}
% \changes{v2.03}{2015/01/09}{neu}^^A
% \begin{macro}{\TUD@set@lengthkey}
% \begin{macro}{\TUD@unknown@keyval}
% In Anlehnung an \KOMAScript{} werden hier Befehle zur Definition und
% Ausführung unterschiedlicher Klassenoptionen mithilfe der Funktionen aus
% dem \pkg{scrbase}-Paket erstellt. Klassenoptionen können entweder als
% Schalter (\cs{TUD@ifkey}) oder aber mit mehreren möglichen Werten
% (\cs{TUD@numkey}) definiert werden.
%    \begin{macrocode}
\DefineFamily{TUD}
\newcommand*\TUDProcessOptions{\FamilyProcessOptions{TUD}}
\newcommand*\TUDExecuteOptions{\FamilyExecuteOptions{TUD}}
\newcommand*\TUDoptions{\FamilyOptions{TUD}}
\newcommand*\TUDoption{\FamilyOption{TUD}}
%    \end{macrocode}
% Hiermit wird die Abarbeitung der Optionen an das Ende der Klasse verzögert.
%    \begin{macrocode}
\newcommand*\TUD@noworlater{\AtEndOfClass}
\AtEndOfClass{\let\TUD@noworlater\@firstofone}
%    \end{macrocode}
% Dies sind die Befehle zur Definition einer Standardoption.
%    \begin{macrocode}
\newcommand*\TUD@key[2][.\@currname.\@currext]{%
  \DefineFamilyMember{TUD}%
  \kernel@ifnextchar[%]
    {\TUD@@key[#1]{#2}}{\TUD@@@key[#1]{#2}}%
}
\def\TUD@@key[#1]#2[#3]#4{%
  \DefineFamilyKey[#1]{TUD}{#2}[{#3}]{\TUD@noworlater{#4}}%
}
\def\TUD@@@key[#1]#2#3{%
  \DefineFamilyKey[#1]{TUD}{#2}{\TUD@noworlater{#3}}%
}
%    \end{macrocode}
% Dies sind die Befehle zur Definition einer booleschen Option.
%    \begin{macrocode}
\newcommand*\TUD@ifkey[1][.\@currname.\@currext]{%
  \DefineFamilyMember{TUD}%
  \FamilyBoolKey[#1]{TUD}%
}
\newcommand*\TUD@set@ifkey{\FamilySetBool{TUD}}
%    \end{macrocode}
% Dies sind die Befehle zur Definition einer Option mit definierten Werten.
%    \begin{macrocode}
\newcommand*\TUD@numkey[1][.\@currname.\@currext]{%
  \DefineFamilyMember{TUD}%
  \FamilyNumericalKey[#1]{TUD}%
}
%    \end{macrocode}
% Um Dopplungen im Code zu vermeiden, werden für die numerische Schlüssel die 
% booleschen Standardwertzuweisungen in einem Makro gespeichert.
%    \begin{macrocode}
\newcommand*\TUD@numkey@bool{%
  {false}{0},{off}{0},{no}{0},{true}{1},{on}{1},{yes}{1}%
}
\newcommand*\TUD@set@numkey{\FamilySetNumerical{TUD}}
%    \end{macrocode}
% Dies sind die Befehle zur Definition einer Option zur Festlegung einer Länge.
%    \begin{macrocode}
\newcommand*\TUD@lengthkey[1][.\@currname.\@currext]{%
  \DefineFamilyMember{TUD}%
  \FamilyLengthKey[#1]{TUD}%
}
\newcommand*\TUD@set@lengthkey{\FamilySetLength{TUD}}
%    \end{macrocode}
% Dieser Befehl wird lediglich pro forma definiert. Derzeit wird er durch 
% \KOMAScript nicht abgearbeitet.
%    \begin{macrocode}
\newcommand*\TUD@unknown@keyval{\FamilyUnknownKeyValue{TUD}}
%    \end{macrocode}
% \end{macro}^^A \TUD@unknown@keyval
% \end{macro}^^A \TUD@set@lengthkey
% \end{macro}^^A \TUD@lengthkey
% \end{macro}^^A \TUD@set@numkey
% \end{macro}^^A \TUD@numkey@bool
% \end{macro}^^A \TUD@numkey
% \end{macro}^^A \TUD@set@ifkey
% \end{macro}^^A \TUD@ifkey
% \end{macro}^^A \TUD@@@key
% \end{macro}^^A \TUD@@key
% \end{macro}^^A \TUD@key
% \end{macro}^^A \TUD@noworlater
% \end{macro}^^A \TUDoption
% \end{macro}^^A \TUDoptions
% \end{macro}^^A \TUDExecuteOptions
% \end{macro}^^A \TUDProcessOptions
% \begin{macro}{\TUD@key@lock}
% \begin{macro}{\TUD@std@ifkey@lock}
% \begin{macro}{\TUD@std@numkey@lock}
% \begin{macro}{\TUD@set@ifkey@lock}
% \begin{macro}{\TUD@set@numkey@lock}
% Da sich die Klassenoptionen teilweise selbst gegenseitig beeinflussen oder
% aber in bestimmten Fällen eine Option in Abhängigkeit von einer anderen
% unterschiedliche Standardwerte annehmen soll, wird dafür eine Möglichkeit
% geschaffen. Dabei kann der Nutzer jederzeit einen von einer Option abhängigen
% Standardwert einer Klassenoption überschreiben. Die Klassenoptionen selber
% werden intern mit dem Befehl \cs{TUD@key@lock} definiert und die Standardwerte
% sowie deren Manipulation innerhalb der Optionen mit \cs{TUD@std@ifkey@lock}
% bzw. \cs{TUD@std@numkey@lock} gesetzt. Mit \cs{TUD@set@ifkey@lock} und
% \cs{TUD@set@numkey@lock} werden bei der expliziten Anwendung einer Option
% durch den Nutzer die entsprechenden Werte geändert und gegen ein internes
% Überschreiben gesperrt.
%    \begin{macrocode}
\newcommand*\TUD@key@lock[2][.\@currname.\@currext]{%
%    \end{macrocode}
% Basierend auf dem Namen des Schalters wird die notwendige, boolesche Variable
% erzeugt (\cs{if@tud@\meta{Schaltername}@lock}), welche im Falle des direkten
% Aufrufs des Schlüssels durch den Anwender, ein internes Überschreiben
% verhindert.
%    \begin{macrocode}
  \newbool{@tud@#2@locked}%
  \TUD@key[{#1}]{#2}%
}
%    \end{macrocode}
% Es kann intern über \cs{if\meta{Schaltername}@lock} geprüft werden, ob einem
% mit Schlüssel, der mit \cs{TUD@key@lock} definiert wurde, durch den Anwender
% ein explizites Verhalten zugewiesen wurde. Sollte dies nicht der Fall sein,
% kann dieser hiermit intern beliebig angepasst werden. Da es durch das Setzen
% der Option mit \cs{TUDoption} zu einer Sperrung kommt, muss diese folgend
% wieder rückgängig gemacht werden.
%    \begin{macrocode}
\newcommand*\TUD@std@ifkey@lock[2]{%
  \ifbool{@tud@#1@locked}{}{%
    \TUDoption{#1}{#2}%
    \boolfalse{@tud@#1@locked}%
  }%
}
\newcommand*\TUD@set@ifkey@lock[1]{%
  \booltrue{@tud@#1@locked}%
  \TUD@set@ifkey{#1}%
}
\let\TUD@std@numkey@lock\TUD@std@ifkey@lock
\newcommand*\TUD@set@numkey@lock[1]{%
  \booltrue{@tud@#1@locked}%
  \TUD@set@numkey{#1}%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@set@numkey@lock
% \end{macro}^^A \TUD@set@ifkey@lock
% \end{macro}^^A \TUD@std@numkey@lock
% \end{macro}^^A \TUD@std@ifkey@lock
% \end{macro}^^A \TUD@key@lock
% \begin{macro}{\cs@lock}
% \begin{macro}{\cs@std@lock}
% \begin{macro}{\cs@set@lock}
% Mit \cs{cs@lock}\marg{Name}\marg{Definition} kann ein Befehl definiert
% werden, welcher intern nur mit \cs{cs@std@lock}\marg{Name}\marg{Definition}
% geschrieben wird, wenn nicht über eine entsprechende Option ein explizites
% Verhalten mit \cs{cs@set@lock}\marg{Name}\marg{Definition} zugewiesen wurde.
% Dies ist äquivalent zu \cs{TUD@std@ifkey@lock} und \cs{TUD@set@ifkey@lock}
% bzw. \cs{TUD@std@numkey@lock} und \cs{TUD@set@numkey@lock}
%    \begin{macrocode}
\newcommand*\cs@lock[2]{%
  \expandafter\newcommand\expandafter*\csname#1\endcsname{#2}%
  \newbool{#1@locked}%
}
\newcommand*\cs@std@lock[2]{%
  \ifbool{#1@locked}{}{%
    \csdef{#1}{#2}%
    \boolfalse{#1@locked}%
  }%
}
\newcommand*\cs@set@lock[2]{%
  \csdef{#1}{#2}%
  \booltrue{#1@locked}%
}
%    \end{macrocode}
% \end{macro}^^A \cs@set@lock
% \end{macro}^^A \cs@std@lock
% \end{macro}^^A \cs@lock
% \begin{macro}{\bool@lock}
% \begin{macro}{\bool@std@lock}
% \begin{macro}{\bool@set@lock}
% Diese Makros dienen in Anlehnung an die vorherigen zum Definieren und Setzen
% von sperrbaren booleschen Schaltern.
%    \begin{macrocode}
\newcommand*\bool@lock[2][false]{%
  \newbool{#2}%
  \newbool{#2@locked}%
  \setbool{#2}{#1}%
}
\newcommand*\bool@std@lock[2]{%
  \ifbool{#1@locked}{}{%
    \setbool{#1}{#2}%
    \boolfalse{#1@locked}%
  }%
}
\newcommand*\bool@set@lock[2]{%
  \setbool{#1}{#2}%
  \booltrue{#1@locked}%
}
%    \end{macrocode}
% \end{macro}^^A \bool@set@lock
% \end{macro}^^A \bool@std@lock
% \end{macro}^^A \bool@lock
% \begin{macro}{\tud@cmd@store}
% \begin{macro}{\tud@cmd@restore}
% \begin{macro}{\tud@cmd@reset}
% \begin{macro}{\tud@cmd@update}
% \changes{v2.04}{2015/03/03}{neu}^^A
% \begin{macro}{\tud@cmd@use}
% \begin{macro}{\tud@cmd@check}
% \changes{v2.03}{2015/01/09}{neu}^^A
% Mit diesen Befehlen wird es möglich, Originalbefehle sichern, nutzen und
% wiederherstellen zu können. Dies wird benötigt, um zwischen den einzelnen
% Layouts über Optionseinstellungen zu wechseln und dabei von einem definierten
% Anfangszustand auszugehen.
%
% Mit dem Aufruf \cs{tud@cmd@store}\marg{Befehlsname} wird der angegebene 
% Befehl in einem neuen Makro \cs{@@tud@\meta{Befehlsname}} gespeichert. Dieser 
% kann danach beliebig angepasst werden. Soll der Befehl zu einem späteren 
% Zeitpunkt auf den Orginalzustand zurücksetzen, kann hierfür jederzeit der 
% Befehl \cs{tud@cmd@reset}\marg{Befehlsname} verwendet werden. Durch das Makro
% \cs{tud@cmd@restore}\marg{Befehlsname} wird das mit \cs{tud@cmd@store}
% erstellte Hilfsmakro zusätzlich noch  gelöscht. Der ursprüngliche Befehl kann
% als solcher mit \cs{tud@cmd@use}\marg{Befehlsname} weiterhin genutzt werden.
% Durch das Makro \cs{tud@cmd@update}\marg{Befehlsname} wird ein gesichter
% Befehl aktualisiert.
%    \begin{macrocode}
\newcommand*\tud@cmd@store[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{}{\csletcs{@@tud@#1}{#1}}%
}
\newcommand*\tud@cmd@restore[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{%
    \csletcs{#1}{@@tud@#1}%
    \csundef{@@tud@#1}%
  }{}%
}
\newcommand*\tud@cmd@reset[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{\csletcs{#1}{@@tud@#1}}{}%
}
\newcommand*\tud@cmd@update[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{\csletcs{@@tud@#1}{#1}}{}%
}
\newcommand*\tud@cmd@use[1]{%
  \tud@cmd@check{#1}%
  \ifcsdef{@@tud@#1}{%
    \@nameuse{@@tud@#1}%
  }{%
    \@nameuse{#1}%
  }%
}
%    \end{macrocode}
% Dieses Makro dient zum Überprüfen, ob der zu sichernde beziehungsweise 
% wiederherzustellende Befehl überhaupt definiert ist. Sollte das nicht der 
% Fall sein, wird ein Fehler ausgegeben.
%    \begin{macrocode}
\newcommand*\tud@cmd@check[1]{%
  \ifcsdef{#1}{}{%
    \PackageError{tudscrbase}{%
      `\@backslashchar#1' is not defined%
    }{%
      The command `\@backslashchar#1' was never defined.\MessageBreak%
      Please contact the TUD-KOMA-Script maintainer\MessageBreak%
      via \tudscrmail. A bugfix is urgently required.%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@cmd@check
% \end{macro}^^A \tud@cmd@use
% \end{macro}^^A \tud@cmd@update
% \end{macro}^^A \tud@cmd@reset
% \end{macro}^^A \tud@cmd@restore
% \end{macro}^^A \tud@cmd@store
% \begin{macro}{\tud@skip@store}
% \changes{v2.04}{2015/03/02}{neu}^^A
% \begin{macro}{\tud@skip@restore}
% \changes{v2.04}{2015/03/02}{neu}^^A
% \begin{macro}{\tud@skip@set}
% \changes{v2.04}{2015/05/05}{neu}^^A
% Hiermit können~-- äquivalent zum Sichern und Wiederherstellen von Befehlen~-- 
% Längenregister abgespeichert werden.
%    \begin{macrocode}
\newcommand*\tud@skip@store[1]{%
  \ifcsdef{@@tud@skip@#1}{}{%
    \@tempswafalse%
    \ifisskip{\csname #1\endcsname}{\@tempswatrue}{}%
    \ifisdimen{\csname #1\endcsname}{\@tempswatrue}{}%
    \if@tempswa%
      \csedef{@@tud@skip@#1}{\expandafter\the\csname #1\endcsname}%
    \fi%
  }%
}
\newcommand*\tud@skip@restore[1]{%
  \ifcsdef{@@tud@skip@#1}{%
    \csname #1\endcsname=\csname @@tud@skip@#1\endcsname%
    \csundef{@@tud@skip@#1}%
  }{}%
}
\newcommand*\tud@skip@set[2]{%
  \ifdef{#1}{%
    \@tempswafalse%
    \ifisskip{#1}{\@tempswatrue}{}%
    \ifisdimen{#1}{\@tempswatrue}{}%
    \if@tempswa%
      \setlength#1{#2}%
    \fi%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@skip@set
% \end{macro}^^A \tud@skip@restore
% \end{macro}^^A \tud@skip@store
% \begin{macro}{\tud@patch@wrn}
% Dieses Makro wird verwendet, wenn mit den Mitteln von \pkg{etoolbox} bereits
% vorhandene Befehle angepasst werden sollen (\cs{apptocmd}, \cs{pretocmd},
% \cs{patchcmd}) und dies nicht gelingt.
%    \begin{macrocode}
\newcommand*\tud@patch@wrn[1]{%
  \PackageWarning{tudscrbase}{%
    It wasn't possible to patch `\@backslashchar#1'.\MessageBreak%
    \ifcsdef{scr@v@3.17}{%
      Please contact the TUD-KOMA-Script maintainer\MessageBreak%
      via \tudscrmail. Without a bugfix an\MessageBreak%
      erroneous output may occur%
    }{%
      You should update your KOMA-Script version to v3.17%
    }
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@patch@wrn
% \begin{macro}{\TUD@parameter}
% \begin{macro}{\TUD@parameter@family}
% \begin{macro}{\TUD@parameter@checkfamily}
% Mit \cs{TUD@parameter}\marg{Familienname}\marg{Definitionen} können
% Schlüssel"=Wert"=Parameter für die optionalen Argumente von Befehle definiert
% werden. Das erste Argument definiert den Familiennamen für den jeweiligen 
% Befehl, welcher eindeutig gewählt werden sollte. Dieser wird im Hilfsmakro
% \cs{TUD@parameter@family} gesichert. Dies soll im Zusammenspiel mit dem 
% Makro \cs{TUD@parameter@checkfamily} dafür sorgen, dass die im Folgenden
% bereitgestellten Befehle \cs{TUD@parameter@define}, \cs{TUD@parameter@let},
% und \cs{TUD@parameter@sethandler}~-- welche die eigentliche Definition der
% Parameter für den Benutzer bewerkstelligen~-- ohne die Angabe der Familie nur
% innerhalb des zweiten Argumentes von \cs{TUD@parameter} verwendet werden
% können.
%    \begin{macrocode}
\newcommand*\TUD@parameter@family{}%
\newcommand*\TUD@parameter[2]{%
  \ifxblank{#1}{}{\xdef\TUD@parameter@family{#1}}%
  #2%
  \global\let\TUD@parameter@family\relax%
}
\let\TUD@parameter@family\relax%
%    \end{macrocode}
% Dieser Befehl prüft, ob eine Familie für den Paramter definiert wurde.
%    \begin{macrocode}
\newcommand*\TUD@parameter@checkfamily[1]{%
  \ifx\TUD@parameter@family\relax%
    \PackageError{tudscrbase}{%
      No family for keys given%
    }{%
      You have to use \string#1\space within the\MessageBreak%
      second argument of \string\TUD@parameter. The first \MessageBreak%
      argument of \string\TUD@parameter\space has to be a unique family name.%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@checkfamily
% \end{macro}^^A \TUD@parameter@family
% \end{macro}^^A \TUD@parameter
% \begin{macro}{\TUD@parameter@define}
% \begin{macro}{\TUD@parameter@let}
% \changes{v2.02}{2014/07/25}{Beachtung der gegebenen Standardwerte}^^A
% \begin{macro}{\TUD@parameter@sethandler}
% \cs{TUD@parameter@define}\marg{Name}\oarg{Säumniswert}\marg{Verarbeitung}
% nutzt \cs{define@key} aus dem \pkg{keyval}"=Paket, um einen Schlüssel und
% dessen Verarbeitung zu definieren, wobei auf den zugewiesenen Wert innerhalb 
% des zweiten obligatorischen Argumentes mit \texttt{\#1} zugegriffen werden
% kann.
%    \begin{macrocode}
\newcommand*\TUD@parameter@define[1][]{%
  \ifxblank{#1}{%
    \TUD@parameter@checkfamily{\TUD@parameter@define}%
    \expandafter\define@key\expandafter{\TUD@parameter@family}%
  }{%
    \expandafter\define@key\expandafter{#1}%
  }%
}
%    \end{macrocode}
% Mit \cs{TUD@parameter@let}\marg{Name}\marg{Name} kann äquivalent zur
% \mbox{\TeX-Primitive \cs{let}} die Definition der Verarbeitung eines
% Parameters auf einen weiteren übertragen werden.
%    \begin{macrocode}
\newcommand*\TUD@parameter@let[3][]{%
  \ifxblank{#1}{%
    \TUD@parameter@checkfamily{\TUD@parameter@let}%
    \@expandtwoargs{\csletcs}{%
      KV@\TUD@parameter@family @#2%
    }{%
      KV@\TUD@parameter@family @#3%
    }%
    \@expandtwoargs{\csletcs}{%
      KV@\TUD@parameter@family @#2@default%
    }{%
      KV@\TUD@parameter@family @#3@default%
    }%
  }{%
    \@expandtwoargs{\csletcs}{KV@#1@#2}{KV@#1@#3}%
    \@expandtwoargs{\csletcs}{KV@#1@#2@default}{KV@#1@#3@default}%
  }%
}
%    \end{macrocode}
% Außerdem kann durch \cs{TUD@parameter@sethandler}\marg{Verarbeitung} definiert
% werden, wie verfahren werden soll, wenn ein optionales Argument im klasischen
% \LaTeX-Stil und nicht in der Schlüssel"=Wert"=Syntax angegeben wird. Auf das
% optionale Argument wird ganz normal mit \texttt{\#1} zugegriffen.
%    \begin{macrocode}
\newcommand*\TUD@parameter@sethandler[1][]{%
  \ifxblank{#1}{%
    \TUD@parameter@checkfamily{\TUD@parameter@sethandler}%
    \expandafter\kv@set@family@handler\expandafter{\TUD@parameter@family}%
  }{%
    \expandafter\kv@set@family@handler\expandafter{#1}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@sethandler
% \end{macro}^^A \TUD@parameter@let
% \end{macro}^^A \TUD@parameter@define
% \begin{macro}{\TUD@parameter@set}
% Mit \cs{TUD@parameter@set}\marg{Familienname}\marg{Parameterliste} wird die
% Verarbeitung aller gegebenen Parameter veranlasst. Normalerweise wird dieser
% Befehl \emph{nicht} innerhalb des zweiten Argumentes von \cs{TUD@parameter}
% verwendet. In jedem Fall muss die zu verwendende Familie angegeben werden.
%    \begin{macrocode}
\newcommand*\TUD@parameter@set[2]{\@expandtwoargs\kvsetkeys{#1}{#2}}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@set
% \begin{macro}{\TUD@parameter@error}
% Das Makro \cs{TUD@parameter@wrn}\marg{Parameter}\marg{Werteliste} gibt für
% den Fall einer ungültigen Wertzuweisung an einen bestimmten \meta{Parameter}
% eine Warnung mit einem entsprechenden Hinweis auf gültige Werte innerhalb von
% \meta{Werteliste} aus.
%    \begin{macrocode}
\newcommand*\TUD@parameter@error[2]{%
  \PackageError{tudscrbase}{Unsupported value for parameter `#1'}{%
    `#1' can only be used with values:\MessageBreak#2%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@error
%
% \subsubsection{Ausführung von paketspezifischem Quellcode}
%
% Ab und an ist es notwendig, bestimmten Quelltext erst gezielt nach einem 
% Paket auszuführen.
% \begin{macro}{\TUD@AfterPackage@Set}
% \changes{v2.04}{2015/03/09}{neu}^^A
% \begin{macro}{\TUD@AfterPackage}
% \changes{v2.03}{2015/02/15}{neu}^^A
% Im ersten Argument wird das Paket angegeben, im zweiten der Quellcode.
%    \begin{macrocode}
\newcommand*\TUD@AfterPackage@Set[1]{%
  \newbool{@tud@#1@loaded}%
  \AfterPackage!{#1}{\booltrue{@tud@#1@loaded}}
}
\newcommand*\TUD@AfterPackage[2]{%
  \ifcsdef{if@tud@#1@loaded}{%
    \if@atdocument%
      \ifbool{@tud@#1@loaded}{#2}{}%
    \else%
      \AfterPackage!{#1}{#2}%
    \fi%
  }{%
    \PackageError{tudscrbase}{\string\TUD@AfterPackage@Set{#1} missing}{%
      You have to set \string\TUD@AfterPackage@Set{#1} before\MessageBreak%
      the usage of \string\TUD@AfterPackage{#1}{<code>} is\MessageBreak%
      possible.%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@AfterPackage
% \end{macro}^^A \TUD@AfterPackage@Set
%
% \iffalse
%</package>
%<*load>
% \fi
%
% \subsection{Laden des Paketes}
% Die Klassen benötigen das Paket und laden dieses auch.
%    \begin{macrocode}
\RequirePackage{tudscrbase}[\TUDVersion]
%    \end{macrocode}
%
% \iffalse
%</load>
%<*class&body>
% \fi
%
% \subsection{Externe Pakete}
%
% \changes{v2.01}{2014/04/24}{Versionsanforderungen bei benötigten Paketen}^^A
% \changes{v2.02}{2014/07/08}{\pkg{graphics} Warnung bei Verwendung}^^A
%
% Für die Verwendung der hier erstellten \KOMAScript-Wrapper-Klassen werden
% einige wenige Pakete eingebunden. Dabei wurde versucht, die Anzahl der
% Pakete möglichst gering zu halten und nur die wirklich notwendigen zu
% verwenden.
%
% Die \env{abstract}-Umgebung wird im Vergleich zu den \KOMAScript-Klassen
% stark erweitert. Für diese sowie für die Umgebungen \env{declarations} und 
% \env{tudpage} wird das Paket \pkg{environ} für die Umgebungsdefinition
% benötigt.
%    \begin{macrocode}
\RequirePackage{environ}[2013/04/01]
%    \end{macrocode}
% Es folgen die Pakete, welche bei Bedarf am Ende der Präambel geladen werden.
%    \begin{macrocode}
\AtEndPreamble{%
%    \end{macrocode}
% Mit \pkg{graphicx} werden die Logos der TU~Dresden sowie von Dresden Concept
% mit dem Befehl \cs{includegraphics} u.\,a. auf der Titelseite eingebunden.
% Sollte lediglich das \pkg{graphics}-Paket geladen worden sein, so wird der
% Nutzer mit einer Warnung informiert, dass das \pkg{graphicx}-Paket zusätzlich 
% geladen wird.
%    \begin{macrocode}
  \@ifpackageloaded{graphicx}{}{%
    \@ifpackageloaded{graphics}{%
      \ClassWarningNoLine{\tudcls@name}{%
        The package `graphics' was superseded by `graphicx'%
      }%
    }{}%
  }%
  \RequirePackage{graphicx}[1999/02/16]%
%    \end{macrocode}
% Mit dem Paket \pkg{tudscrcolor} werden die Befehle für die Auswahl der Farben
% des \CDs definiert, welches wiederum \pkg{xcolor} lädt.
%    \begin{macrocode}
  \RequirePackage{tudscrcolor}[\TUDVersion]%
}
%    \end{macrocode}
%
% \subsection{Parameter für Umgebungen und mehrspaltige Texte}
%
% Diese Befehle dienen dazu, bei Umgebungen die Sprache über einen Parameter
% anzugeben sowie das Paket \pkg{multicol} verwenden zu können.
% \begin{macro}{\TUD@parameter@defaulthandler}
% Hiermit kann sowohl die zu verwendende Sprache als auch die Anzahl der
% gewünschten Spalten für bestimmte Umgebungen ohne die explizite Angabe eines
% Schlüssels festgelegt werden. Momentan betrifft das die beiden Umgebungen
% \env{abstract} und \env{tudpage}.
%    \begin{macrocode}
\newcommand*\TUD@parameter@defaulthandler[2]{%
  \def\@tempa{#2}%
  \@for\@tempb:=\@tempa\do{%
    \ifx\@tempb\@empty\else%
      \ifstr{\@tempb}{twocolumn}{\def\@tempb{2}}{}%
      \ifxnumber{\@tempb}{%
        \TUD@parameter@set{#1}{columns=\@tempb}%
      }{%
        \TUD@parameter@set{#1}{language=\@tempb}%
      }%
    \fi%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \TUD@parameter@defaulthandler
% \begin{macro}{\tud@multicols}
% \begin{macro}{\tud@multicols@check}
% Im Makro \cs{tud@multicols} wird die Anzahl der gewünschten Spalten in einer
% Umgebung für die Verwendung des \pkg{multicol}"=Paketes gespeichert.
%    \begin{macrocode}
\cs@lock{tud@multicols}{1}
%    \end{macrocode}
% Der Befehl \cs{tud@multicols@check} prüft, ob das Paket \pkg{multicol} 
% geladen wurde. Falls dies nicht der Fall ist, wird eine Warnung ausgegeben 
% und die Änderung des Wertes über einen Parameter der Umgebungen \env{tudpage} 
% repsektive \env{abstract} sowie \env{declarations} über \cs{set@set@lock} 
% verhindert.
%    \begin{macrocode}
\newcommand*\tud@multicols@check{%
  \ifdef{\multicols}{}{%
    \ifnum\tud@multicols>\@ne\relax%
      \ClassWarning{\tudcls@name}{%
        The option `columns=\tud@multicols' is only supported,\MessageBreak%
        when package `multicol' is loaded%
      }%
      \cs@set@lock{tud@multicols}{1}%
    \fi%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@multicols@check
% \end{macro}^^A \tud@multicols
%
% \subsection{Expansion geschützter Makros}
%
% Im \LaTeX-Kernel wird der Befehl \cs{@expandtwoargs} definiert, welcher zwei 
% Argumente in ein angegebenes Makro vollständig expandiert. Dabei erfolgt die 
% Expansion der beiden Argumente aufgrund der standardmäßigen Verwendung von 
% \cs{edef} allerdings vollständig und ohne die Beachtung von \cs{protect}.
% \begin{macro}{\protected@expandtwoargs}
% \changes{v2.02}{2014/11/13}{neu}^^A
% Der Befehl \cs{protected@expandtwoargs} kann äquivalent genutzt werden, 
% lässt dabei aber mit \cs{protect} geschützte Makros unberührt.
%    \begin{macrocode}
\providecommand*\protected@expandtwoargs[3]{%
  \protected@edef\reserved@a{\noexpand#1{#2}{#3}}\reserved@a%
}
%    \end{macrocode}
% \end{macro}^^A \protected@expandtwoargs
%
% \subsection{Division für rationale Zahlen}
%
% Mit \LaTeXe kann~-- ohne die Verwendung zusätzlichr Pakete~-- nicht ohne 
% Weiteres eine Division durchgeführt werden, die als Ergenis eine rationale 
% Zahl liefert. Dem wird hier Abhilfe geleistet.
% \begin{macro}{\tud@divide}
% \changes{v2.04}{2015/04/09}{neu}^^A
% Der Befehl erwartet im ersten Argument das Makro, in welches das Ergebnis 
% der Division expandiert werden soll, danach folgen Dividend und Divisor.
%    \begin{macrocode}
\newcommand*\tud@divide[3]{%
%    \end{macrocode}
% Die Division wird über temporäre Längenregister durchgeführt. Die zu 
% teilenden Zahlen werden normiert, wodurch auch Längen mit unterschiedlichen 
% Einheiten geteilt werden können.
%    \begin{macrocode}
  \@defaultunits\@tempdima #2pt\relax\@nnil%
  \@defaultunits\@tempdimb #3pt\relax\@nnil%
%    \end{macrocode}
% Danach wird mit der größeren der beiden Zahlen der größtmögliche, durch
% \val{2} teilbare Faktor zur Berechnung ermittelt.
%    \begin{macrocode}
  \ifdim\@tempdima>\@tempdimb\relax%
    \setlength\@tempdimc{\@tempdima}%
  \else%
    \setlength\@tempdimc{\@tempdimb}%
  \fi%
  \@tempcnta=1%
  \@whiledim\dimexpr\@tempdimc*\@tempcnta\relax<\dimexpr\maxdimen/10\relax\do{%
    \multiply\@tempcnta by 10\relax%
  }%
%    \end{macrocode}
% Mit dem im temporären Zählerregister \cs{@tempcnta} gespeicherten Faktor 
% wird der Dividend erweitert und der berechnete Quotient wieder gekürzt.
%    \begin{macrocode}
  \setlength{\@tempdimc}{\dimexpr (\@tempcnta\@tempdima / \@tempdimb * \p@)}%
  \setlength{\@tempdimc}{\dimexpr \@tempdimc/\@tempcnta\relax}%
%    \end{macrocode}
% Das Ergebnis wird in das angegebene Makro expandiert.
%    \begin{macrocode}
  \edef#1{\strip@pt\@tempdimc}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@divide
%
% \iffalse
%</class&body>
% \fi
%
% \Finale
%
\endinput
