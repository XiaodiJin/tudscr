% \CheckSum{4104}
% \iffalse meta-comment
% 
% ============================================================================
% 
%  TUD-KOMA-Script
%  Copyright (c) Falk Hanisch <tudscr@gmail.com>, 2012-2015
% 
% ============================================================================
% 
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, version 1.3c of the license. The latest
%  version of this license is in http://www.latex-project.org/lppl.txt and 
%  version 1.3c or later is part of all distributions of LaTeX 2005/12/01
%  or later and of this work. This work has the LPPL maintenance status 
%  "author-maintained". The current maintainer and author of this work
%  is Falk Hanisch.
% 
% ----------------------------------------------------------------------------
% 
% Dieses Werk darf nach den Bedingungen der LaTeX Project Public Lizenz
% in der Version 1.3c, verteilt und/oder veraendert werden. Die aktuelle 
% Version dieser Lizenz ist http://www.latex-project.org/lppl.txt und 
% Version 1.3c oder spaeter ist Teil aller Verteilungen von LaTeX 2005/12/01 
% oder spaeter und dieses Werks. Dieses Werk hat den LPPL-Verwaltungs-Status 
% "author-maintained", wird somit allein durch den Autor verwaltet. Der 
% aktuelle Verwalter und Autor dieses Werkes ist Falk Hanisch.
% 
% ============================================================================
%
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \iffalse
%%% From File: tudscr-manual.dtx
%<*driver>
\ifx\ProvidesFile\undefined\def\ProvidesFile#1[#2]{}\fi
\ProvidesFile{tudscr-manual.dtx}[%
  2015/11/06 v2.05 TUD-KOMA-Script\space%
%</driver>
%<package&identify>\NeedsTeXFormat{LaTeX2e}
%<package&identify>\ProvidesPackage{tudscrtutorial}[%
%<*driver|package&identify>
%!TUDVersion
%<package>  package (internal tutorials)%
]
%</driver|package&identify>
%<*driver>
\RequirePackage[ngerman=ngerman-x-latest]{hyphsubst}
\documentclass[english,ngerman]{tudscrdoc}
\usepackage{selinput}\SelectInputMappings{adieresis={ä},germandbls={ß}}
\usepackage[T1]{fontenc}
\usepackage{babel}
\usepackage{tudscrfonts} % only load this package, if the fonts are installed
\KOMAoptions{parskip=half-}
\CodelineIndex
\RecordChanges
\GetFileInfo{tudscr-manual.dtx}
\begin{document}
  \maketitle
  \DocInput{\filename}
\end{document}
%</driver>
% \fi
%
% \selectlanguage{ngerman}
%
% \changes{v2.02}{2014/12/17}{\cls{tudscrmanual} xindy-Stildatei wird bei der 
%   Kompilierung erzeugt}^^A
% \changes{v2.02}{2014/11/18}{\pkg{tudscrtutorial} Index für Tutorials}^^A
% \changes{v2.05}{2015/08/04}{Geteilte Deklarationen für Klassen und Pakete}^^A
%
% \section{%
%   Klasse und Paket für Anwenderdokumentation und -leitfäden von \TUDScript%
% }
%
% Es werden die Klasse \cls{tudscrmanual} für das \TUDScript-Handuch sowie das 
% Paket \pkg{tudscrtutorial} für das Setzen von einigen Anwenderleitfäden bzw.
% Tutorials erzeugt. Da es zwischen der Klasse und dem Paket es eine große
% Menge an Überschneidungen gibt, basieren diese auf der gleichen Quelldatei.
%
% \ToDo{\cs{@for} mit \cs{forcsvlist} ersetzen}[2.05]
%
% \StopEventually{\PrintIndex\PrintChanges}
%
% \iffalse
%<*body|doc>
% \fi
%
% \subsection{Notwendige Pakete und grundlegende Befehle für Klasse und Paket}
%
% Basis für die Handbuchklasse \cls{tudscrmanual} ist die \cls{tudscrreprt}. 
% Zusätzlich wird das Paket \pkg{tudscrtutorial} erstellt, um an das Handbuch
% angelehnte Tutorials in einem Unterordner zu erstellen. Sowohl für die Klasse
% als auch das Paket werden einige Pakete geladen, um Einstellungen vorzunehmen 
% und nützliche Befehle zu definieren.
%
% Bugfixes für unterschiedliche Pakete.
%    \begin{macrocode}
\RequirePackage{scrhack}[2014/02/27]
%    \end{macrocode}
% Die Sprachunterstützung für Klasse und Paket.
%    \begin{macrocode}
%<*!doc>
\RequirePackage{babel}[2014/03/24]
%</!doc>
%    \end{macrocode}
% Das Paket \pkg{xparse} erlaubt eine sehr freie Deklaration von Makros mit
% nahezu beliebig arrangierbaren (optionalen) Argumenten.
%    \begin{macrocode}
%<*!doc>
\PassOptionsToPackage{log-declarations=false}{xparse}
\RequirePackage{xparse}[2013/12/31]
%</!doc>
%    \end{macrocode}
% Das Paket \pkg{marginnote} stellt nicht fließenden Randnotizen bereit, welche 
% für die Kennzeichnung von Änderungen, Hinweise oder ToDo-Notizen verwendet 
% werden. Die Randnotizen werden auf dem linken~-- weil größeren~-- Seitenrand
% gesetzt.
%    \begin{macrocode}
%<*!doc>
\PassOptionsToPackage{quiet}{marginnote}
\RequirePackage{marginnote}[2012/03/29]
\reversemarginpar
%</!doc>
%    \end{macrocode}
% Das Paket für intelligente Leerzeichen am Ende von Makros mit \cs{xspace}.
%    \begin{macrocode}
\RequirePackage{xspace}[2009/10/20]
\xspaceaddexceptions{"=}
%    \end{macrocode}
% \begin{macro}{\vTUDScript}
% \begin{macro}{\vKOMAScript}
% Diese beiden Befehle werden für die aktuelle \TUDScript-Versionsnummer sowie 
% die mindestens notwendige Version von \KOMAScript{} in der Dokumentation
% verwendet.
%    \begin{macrocode}
\newcommand*\vTUDScript{}
\def\@tempb#1 #2 #3\relax#4\relax{\def\vTUDScript{#2}}%
\edef\@tempa{\TUDVersion}%
\expandafter\@tempb\@tempa\relax? ? \relax\relax%
\newcommand*\vKOMAScript{v3.17\xspace}
%    \end{macrocode}
% \end{macro}^^A \vKOMAScript
% \end{macro}^^A \vTUDScript
%
% \iffalse
%</body|doc>
%<*!doc>
%<*body>
%<*class>
% \fi
%
% \begin{macro}{\tud@toks@}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\eaddto@hook}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Es wird ein token-Regsiter reserviert, welches im weiteren Verlauf an allen
% möglichen Punkten verwendet wird. Mit \cs{eaddto@hook} wird~-- in Ergänzung
% zu \cs{addto@hook}~-- ein Makro zum Anfügen des expandierten Arguments an ein 
% token-Register bereitgestellt.
%    \begin{macrocode}
\newtoks\tud@toks@
\newcommand*\eaddto@hook[2]{%
  \expandafter\addto@hook\expandafter#1\expandafter{#2}%
}
%    \end{macrocode}
% \end{macro}^^A \eaddto@hook
% \end{macro}^^A \tud@toks@
% \begin{macro}{\tud@replace}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Mit diesem Befehl kann in einem gegebenen Makro ein bestimmtes Zeichen durch 
% ein anderes ersetzt werden. Dies wird verwendet, um für Indexbefehle oder 
% Labels die möglicherweise enthaltenen \val{@}-Zeichen zu ersetzen.
%    \begin{macrocode}
\newcommand*\tud@replace[3]{%
  \begingroup%
%    \end{macrocode}
% Zunächst wird \cs{@tempa} als ein durch \cs{@nil} abgegrenztes Makro mit 
% zwei Argumenten definiert, wobei diese durch das im zweiten Argument gegebene 
% \meta{Zeichen} voneinander abgegrenzt werden. Mit diese beiden Argumente wird
% das Makro \cs{@tempb} aufgerufen. 
%    \begin{macrocode}
    \toks@{\def\@tempa##1}%
    \eaddto@hook\toks@{\detokenize{#2}}%
    \addto@hook\toks@{##2\@nil{\@tempb{##1}{##2}}}%
%    \end{macrocode}
% Der Inhalt von \cs{toks@} ist
% \cs{def}\cs{@tempa\#1\meta{Zeichen}\#2}\cs{@nil\{\cs{@tempb\{\#1\}\{\#2\}}\}}
% und definiert \cs{@tempa}.
%    \begin{macrocode}
    \the\toks@%
%    \end{macrocode}
% Nun wird \cs{@tempb} definiert. Dieses Makro fügt dem Zielmakro das erste
% Argumente gefolgt von \meta{Ersatzzeichen} hinzu. Mit dem zweiten Argument
% wird anschließend \cs{@tempa\#\#2}\cs{@nil} so lange rekursiv aufgerufen, bis
% es wirklich leer ist, wodurch das zweite Argument \meta{Zeichen} sukzessive 
% durch das dritte Argument \meta{Ersatzzeichen} ersetzt wird.
%    \begin{macrocode}
    \def\@tempb##1##2{%
      \if\relax\detokenize{##2}\relax%
        \appto#1{##1}%
        \let\@tempc\relax%
      \else%
        \appto#1{##1#3}%
        \def\@tempc{\@tempa##2\@nil}%
      \fi%
      \@tempc%
    }%
%    \end{macrocode}
% Nachdem die beiden notwendigen Makros definiert wurden, erfolgt jetzt die 
% eigentliche Ersetzung. Dafür wird der Inhalt des Zielmakros als Argument für 
% \cs{@tempa} verwendet. Dem wird zum das zu ersetzende Zeichen gefolgt von
% \cs{@nil} hinzugefügt, um das Argument abschließend zu begrenzen.
%    \begin{macrocode}
    \toks@{\@tempa}%
    \edef\@tempc{\expandafter\detokenize\expandafter{#1}}%
    \eaddto@hook\toks@{\@tempc}%
    \eaddto@hook\toks@{\detokenize{#2}\@nil}%
%    \end{macrocode}
% Der Inhalt von \cs{toks@} hat die Form \cs{@tempa\#1\meta{Zeichen}}\cs{@nil},
% wobei der inhalt von \meta{\#1} expandiert wird.
%    \begin{macrocode}
    \def#1{}%
    \the\toks@%
    \edef\tud@reserved{%
      \noexpand\endgroup%
      \def\noexpand#1{#1}%
    }%
  \tud@reserved%
}
%    \end{macrocode}
% \end{macro}^^A \tud@replace
% \begin{macro}{\sortlist}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\@sortlist}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\@templist}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\if@sorted@list}
% \changes{v2.02}{2014/07/25}{neu}^^A
% Der Befehl \cs{sortlist} erwartet eine \pkg{etoolbox}-Liste und sortiert diese
% mit \cs{@sortlist} in alphabetischer Reihenfolge in eine kommagetrennte 
% Auflistung. Diese wird anschließend wieder in eine \pkg{etoolbox}-Liste 
% umgewandelt.
%    \begin{macrocode}
\newcommand*\@templist{}
\let\@templist\relax%
\newcommand*\sortlist[1]{%
  \ifdefvoid{#1}{%
    \ClassWarning{tudscrmanual}{%
      The given list \string#1\space\MessageBreak%
      is empty, nothing to sort here%
    }%
  }{%
    \let\tud@reserved#1%
    \let\@templist\relax%
    \forlistloop\@sortlist{\tud@reserved}%
    \let\tud@reserved\relax%
    \@for\@tempa:=\@templist\do{\listeadd\tud@reserved{\@tempa}}%
    \let#1\tud@reserved%
  }%
}
%    \end{macrocode}
% Hier erfolgt die eigentliche Sortierung der Liste.
%    \begin{macrocode}
\newif\if@sorted@list
\newcommand*\@sortlist[1]{%
%    \end{macrocode}
% Der erste Eintrag wird direkt der Liste hinzugefügt.
%    \begin{macrocode}
  \ifx\@templist\relax%
    \def\@templist{#1}%
%    \end{macrocode}
% Weitere Einräge werden mit \cs{pdfstrcmp} an der richtigen Stelle eingefügt.
% Dabei wird die kommagetrennte Liste \cs{@templist} mit \cs{@for} durchlaufen
% und \cs{@tempb} als Hilfsmakro verwendet, in welches die aktuelle Liste 
% innerhalb der \cs{@for}-Schelife stückweise expandiert wird. Der Schalter
% \cs{if@sorted@list} wird gesetzt, wenn das aktuelle Element an der richtigen
% Stelle eingesetzt wurde.
%    \begin{macrocode}
  \else%
    \@sorted@listfalse%
    \let\@tempb\@empty%
    \@for\@tempa:=\@templist\do{%
%    \end{macrocode}
% Ist der Eintrag bereits erfolgt, wird der verbliebene Teil der Liste 
% angehangen.
%    \begin{macrocode}
      \if@sorted@list%
        \expandafter\edef\expandafter\@tempb\expandafter{\@tempb,\@tempa}%
      \else%
%    \end{macrocode}
% Liegt der Eintrag in alphabetischer Reihenfolge vor dem aktuellen der 
% durchlaufenenen Liste, so wird dieser davor eingefügt. Dabei muss der Fall, 
% dass das Element der erste Eintrag in der temporären Liste \cs{@tempb} ist, 
% eine Sonderbehandlung erfolgen. Anschließend wird \cs{@sorted@listtrue} 
% gesetzt.
%    \begin{macrocode}
        \expandafter\ifnum\pdfstrcmp{#1}{\@tempa}<\z@\relax%
          \ifx\@tempb\@empty%
            \expandafter\edef\expandafter\@tempb\expandafter{%
              #1,\@tempa%
            }%
          \else%
            \expandafter\edef\expandafter\@tempb\expandafter{%
              \@tempb,#1,\@tempa%
            }%
          \fi%
          \@sorted@listtrue%
        \else%
%    \end{macrocode}
% Ist Eintrag in alphabetischer Reihenfolge nach dem aktuellen der geprüften 
% Liste, so wird dieser (noch) nicht eingefügt. Der Sonderfall des ersten
% Elementes wird abgedeckt.
%    \begin{macrocode}
          \ifx\@tempb\@empty%
            \expandafter\edef\expandafter\@tempb\expandafter{\@tempa}%
          \else%
            \expandafter\edef\expandafter\@tempb\expandafter{\@tempb,\@tempa}%
          \fi%
        \fi%
      \fi%
    }%
%    \end{macrocode}
% Wurde der Eintrag nach dem Durchlaufen der Liste nicht eingefügt, so erfolgt 
% dies hier am Ende der Liste.
%    \begin{macrocode}
    \if@sorted@list\else%
      \expandafter\edef\expandafter\@tempb\expandafter{\@tempb,#1}%
    \fi%
%    \end{macrocode}
% Die temporäre Liste \cs{@tempb} wird auf \cs{@templist} überschrieben.
%    \begin{macrocode}
    \let\@templist\@tempb%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \if@sorted@list
% \end{macro}^^A \@templist
% \end{macro}^^A \@sortlist
% \end{macro}^^A \sortlist
%
% \subsubsection{Debug-Traces für die Klasse}
%
% Ab und an ist es beim Erstellen des Handbuchs recht sinnvoll, verschiedene 
% Dinge direkt im Logfile zu überprüfen. Hierfür werden folgend einige Befehle 
% zur Ablaufkontrolle definiert.
%
% \begin{macro}{\tracinglabels}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@created}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@missing}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@list@created}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@list@missing}
% \changes{v2.05}{2015/10/29}{neu}^^A
% Mit \cs{tracinglabels} wird die Nachverfolgung aller erstellten Labels in der 
% Dokumentation aktiviert werden. Die Label werden zum einen direkt im Logfile
% ausgegeben und am Ende des selbigen in einer sortierten Liste ausgegeben. Die 
% Sternversion des Befehls erzeugt keine sortierte Liste. Über das optionale 
% Argument kann mit verschiedenen Schlüsseln zudem eingestellt werden, ob alle
% Label (\val{all}) oder nur die erstellten (\val{created}) beziehungsweise die
% fehlenden (\val{missing}) nachverfolgt werden sollen.
%    \begin{macrocode}
\newcommand*\tud@trace@lbl@created[1]{}
\newcommand*\tud@trace@lbl@missing[1]{}
\NewDocumentCommand\tracinglabels{sO{missing}}{%
  \newcommand*\tud@trace@lbl@list@created{}%
  \newcommand*\tud@trace@lbl@list@missing{}%
  \@tempswafalse%
  \ifstr{#2}{created}{\@tempswatrue}{}%
  \ifstr{#2}{all}{\@tempswatrue}{}%
  \if@tempswa%
    \renewcommand*\tud@trace@lbl@created[1]{%
      \typeout{%
        +++++ label created: ##1 on page \thepage%
      }%
      \xifinlist{##1}{\tud@trace@lbl@list@created}{}{%
        \listxadd\tud@trace@lbl@list@created{##1}%
      }%
    }%
    \IfBooleanF{#1}{%
      \AfterEndDocument{%
        \typeout{+++++ labels created (sorted) +++++}%
        \sortlist\tud@trace@lbl@list@created%
        \forlistloop\typeout{\tud@trace@lbl@list@created}%
      }%
    }%
  \fi%
  \@tempswafalse%
  \ifstr{#2}{missing}{\@tempswatrue}{}%
  \ifstr{#2}{all}{\@tempswatrue}{}%
  \if@tempswa%
    \renewcommand*\tud@trace@lbl@missing[1]{%
      \typeout{%
        +++++ label missing: ##1 on page \thepage%
      }%
      \xifinlist{##1}{\tud@trace@lbl@list@missing}{}{%
        \listxadd\tud@trace@lbl@list@missing{##1}%
      }%
    }%
    \IfBooleanF{#1}{%
      \AfterEndDocument{%
        \typeout{+++++ labels missing (sorted) +++++}%
        \sortlist\tud@trace@lbl@list@missing%
        \forlistloop\typeout{\tud@trace@lbl@list@missing}%
      }%
    }%
  \fi%
}
\@onlypreamble\tracinglabels
%    \end{macrocode}
% \end{macro}^^A \tud@trace@lbl@list@missing
% \end{macro}^^A \tud@trace@lbl@list@created
% \end{macro}^^A \tud@trace@lbl@missing
% \end{macro}^^A \tud@trace@lbl@created
% \end{macro}^^A \tracinglabels
% \begin{macro}{\tracingmarkup}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@markup}
% \changes{v2.05}{2015/10/29}{neu}^^A
% Durch die Verwendung von \cs{tracinglabels} wird die Nachverfolgung der durch
% das Makro \cs{@ProcessMarkup} aufgerufenen Befehle \cs{ProcessMarkup@Declare}
% beziehungsweise \cs{ProcessMarkup@Inline} inklusive all ihrer Argumente
% aktiviert. Dies ist für die Kontrolle des erzeugten Markups sinnvoll.
%    \begin{macrocode}
\newcommand*\tud@trace@markup[2]{}
\newcommand*\tracingmarkup{%
  \renewcommand*\tud@trace@markup[2]{%
    \typeout{+++++ markup ##1 on page \thepage^^J##2}%
  }%
}
\@onlypreamble\tracingmarkup
%    \end{macrocode}
% \end{macro}^^A \tud@trace@markup
% \end{macro}^^A \tracingmarkup
% \begin{macro}{\tracingbundle}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@bundle}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@bundle@list}
% \changes{v2.05}{2015/10/29}{neu}^^A
% Wird \cs{tracingbundle} in der Präambel verwendet, werden alle direkt oder 
% indirekt durch \cs{@ProcessMarkup} im Handbuch erzeugten Querverweise auf
% Klassen oder Pakete aus dem \TUDScript-Bundle nachverfolgt und am Ende des
% Logfiles ausgegeben. Damit kann im Zweifel übeprüft werden, ob eventuell eine
% falsche Referenz genutzt wurde, wodurch u.\,U. Querverweise oder Einträge in
% Index und Änderungsliste fehlerhaft werden oder erst gar nicht erscheinen.
%    \begin{macrocode}
\newcommand*\tud@trace@bundle[1]{}
\newcommand*\tud@trace@bundle@list{}
\newcommand*\tracingbundle{%
  \renewcommand*\tud@trace@bundle[1]{%
    \begingroup%
      \def\Class####1{class:####1}%
      \def\Package####1{package:####1}%
      \xifinlist{##1}{\tud@trace@bundle@list}{}{%
        \listxadd\tud@trace@bundle@list{##1}%
      }%
    \endgroup%
  }%
  \AfterEndDocument{%
    \typeout{+++++ bundle list +++++}%
    \forlistloop\typeout{\tud@trace@bundle@list}%
  }%
}
\@onlypreamble\tracingbundle
%    \end{macrocode}
% \end{macro}^^A \tud@trace@bundle@list
% \end{macro}^^A \tud@trace@bfundle
% \end{macro}^^A \tracingbundle
%
% \iffalse
%</class>
% \fi
%
% \subsubsection{Anpassungen für \pkg{hyperref} und Querverweise}
%
% Das Paket \pkg{hyperref} wird für alle möglichen Links und Querverweise 
% geladen, \pkg{bookmark} verbesssert das Erstellen der Outline-Einträge.
%    \begin{macrocode}
\PassOptionsToPackage{hyperindex=false,colorlinks,linkcolor=blue}{hyperref}
\PassOptionsToPackage{open,openlevel=0}{bookmark}
%    \end{macrocode}
% Es folgen einige Befehle, die an das Paket \pkg{hyperref} gekoppelt sind. 
% Sobald das Paket geladen wurde, werden die Makros mit der jeweiligen
% Funktionalität definiert. 
%    \begin{macrocode}
\AfterPackage*{hyperref}{%
%    \end{macrocode}
% Die Bezeichner für die Abschnittsebenen werden umbenannt.
%    \begin{macrocode}
  \renewcaptionname{ngerman}{\sectionautorefname}{Unterkapitel}%
  \renewcaptionname{ngerman}{\subsectionautorefname}{Abschnitt}%
  \renewcaptionname{ngerman}{\subsubsectionautorefname}{Unterabschnitt}%
%    \end{macrocode}
% \begin{macro}{\Email}
% Hiermit wird ein Hyperlink für eine E-Mail-Adresse erzeugt.
%    \begin{macrocode}
  \newcommand*\Email[1]{\href{mailto:#1}{\nolinkurl{#1}}}%
%    \end{macrocode}
% \end{macro}^^A \Email
% \begin{macro}{\tudhyperdef}
% \changes{v2.02}{2014/10/27}{neu}^^A
% \begin{macro}{\tudhyperref}
% \changes{v2.02}{2014/10/27}{neu}^^A
% Diese beiden Befehle dienen zum Defnieren von Textankern im Handbuch und zum
% Referenzieren auf diese. Bei der Erstelung des Ankers mit \cs{tudhyperdef} 
% wird zusätzlich auch noch ein Label (\cs{label}) erzeugt. Der Anker wird mit 
% \cs{Hy@raisedlink}~-- wie es bei normalen \pkg{hyperref}-Labels geschieht~--
% über die Grundlinie gehoben. Die Sternversion sollte nach Überschriften
% verwendet werden und verschiebt die vertikale Position des Ankers noch weiter
% nach oben.
%    \begin{macrocode}
%<*class>
  \NewDocumentCommand\tudhyperdef{sm}{%
    \IfBooleanTF{#1}{%
      \raisebox{4\baselineskip}[0pt][0pt]{\hyperdef{\jobname}{#2}{}}%
      \par\nobreak\vskip\dimexpr-\parskip-\baselineskip\relax%
      \@afterindentfalse\@afterheading%
    }{%
      \Hy@raisedlink{\hyperdef{\jobname}{#2}{}}\ignorespaces%
    }%
    \label{#2}%
    \tud@trace@lbl@created{#2}%
  }%
  \newcommand*\tudhyperref[2]{\hyperref{}{\jobname}{#1}{#2}}%
%</class>
%    \end{macrocode}
% Aus einem Tutorial erfolgen alle Querverweise mit \cs{tudhyperref} auf das 
% Anwenderhandbuch \enquote{tudscr} im übergeordneten Ordner.
%    \begin{macrocode}
%<*package>
  \newcommand*\tudhyperref[2]{\hyperref{../tudscr}{tudscr}{#1}{#2}}%
%</package>
%    \end{macrocode}
% \end{macro}^^A \tudhyperref
% \end{macro}^^A \tudhyperdef
% \begin{macro}{\autorefname}
% \begin{macro}{\@autorefname}
% \begin{macro}{\@@autorefname}
% Der Befehl \cs{autorefname} dient dazu, den Verweistyp beziehungsweise den 
% Bezeichner des aktuellen oder optional zu einem speziellen Label ohne die 
% dazugehörige Nummerierung zu erhalten. Auf der Seite LaTeX Stack Exchange%
% \footnote{\url{http://tex.stackexchange.com/q/33776/}} wurde das Prinzip 
% vorgestellt und hier übernommen.
%    \begin{macrocode}
  \newcommand*\autorefname[1][current]{%
    \ifstr{#1}{current}{%
      \expandafter\HyPsd@@autorefname\@currentHref\@nil%
    }{%
      \@autorefname\HyPsd@@autorefname{#1}%
    }%
    \unskip\xspace%
  }%
  \newcommand*\@autorefname[2]{%
    \expandafter\ifx\csname r@#2\endcsname\relax%
      ??%
    \else%
      \expandafter\expandafter\expandafter\@@autorefname%
          \csname r@#2\endcsname{}{}{}{}\@nil#1\@nil%
    \fi%
  }%
  \newcommand*\@@autorefname{}%
  \def\@@autorefname#1#2#3#4#5\@nil#6\@nil{#6#4.\@nil}%
%    \end{macrocode}
% \end{macro}^^A \@@autorefname
% \end{macro}^^A \@autorefname
% \end{macro}^^A \autorefname
% Damit sind die Ausführungen für das Paket \pkg{hyperref} beendet.
%    \begin{macrocode}
}
%    \end{macrocode}
% Sollte das Paket \pkg{hyperref} nicht geladen werden, wird eine Rückfallebene 
% definiert, wodurch die Klasse dennoch verwendet werden kann.
%    \begin{macrocode}
\TUD@UnwindPackage{hyperref}{%
%    \end{macrocode}
% Zunächst die direkt innerhalb der Dokumentation verwendeten Befehle nebst 
% dazugehöriger Warnung.
% \begin{macro}{\url}
% \begin{macro}{\hypersetup}
% \begin{macro}{\hyperdef}
% \begin{macro}{\hyperref}
% \begin{macro}{\tud@hyperref}
% \begin{macro}{\tud@@hyperref}
% \begin{macro}{\href}
% \begin{macro}{\hyperpage}
% \begin{macro}{\autoref}
% \begin{macro}{\texorpdfstring}
% \begin{macro}{\phantomsection}
%    \begin{macrocode}
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrtutorial}%
%</package>
  {%
    It is strongly recommended to load package `hyperref'.\MessageBreak%
    Nevertheless, essential commands are rudimentarily\MessageBreak%
    defined. At least the package `url' is loaded.
  }%
  \RequirePackage{url}[2013/09/16]%
  \providecommand*\hypersetup[1]{}%
  \providecommand*\hyperdef[3]{\label{#1.#2}#3}%
%    \end{macrocode}
% Der Befehl \cs{hyperref} existiert in zwei Varianten. Entweder mit einem 
% optionalen und einem obligatorischen Argument oder mit vier Argumenten.
%    \begin{macrocode}
  \providerobustcmd*\hyperref{\@ifnextchar[{\tud@hyperref}{\tud@@hyperref}}
  \newcommand*\tud@hyperref[2][]{#2}
  \newcommand*\tud@@hyperref[4]{#4}
  \providecommand*\href[3][]{#3}%
  \providecommand*\hyperpage[1]{#1}%
%    \end{macrocode}
% Der Befehl \cs{autoref} wird auch in der Sternversion genutzt.
%    \begin{macrocode}
  \providecommand*\autoref{??\xspace\@ifstar{\ref}{\ref}}%
%    \end{macrocode}
% Auch \cs{texorpdfstring} und \cs{phantomsection} werden vorgehalten.
%    \begin{macrocode}
  \providecommand*\phantomsection{}%
  \providecommand*\texorpdfstring[2]{#1}%
%    \end{macrocode}
% \end{macro}^^A \phantomsection
% \end{macro}^^A \texorpdfstring
% \end{macro}^^A \autoref
% \end{macro}^^A \hyperpage
% \end{macro}^^A \href
% \end{macro}^^A \tud@@hyperref
% \end{macro}^^A \tud@hyperref
% \end{macro}^^A \hyperref
% \end{macro}^^A \hyperdef
% \end{macro}^^A \hypersetup
% \end{macro}^^A \url
% \begin{macro}{\partautorefname}
% \begin{macro}{\chapterautorefname}
% \begin{macro}{\sectionautorefname}
% \begin{macro}{\subsectionautorefname}
% \begin{macro}{\subsubsectionautorefname}
% Die notwendigen, lokalen Bezeichner der Gliederungsebenen.
%    \begin{macrocode}
  \tud@locale@german{\partautorefname}{Teil}%
  \tud@locale@german{\chapterautorefname}{Kapitel}%
  \tud@locale@german{\sectionautorefname}{Unterkapitel}%
  \tud@locale@german{\subsectionautorefname}{Abschnitt}%
  \tud@locale@german{\subsubsectionautorefname}{Unterabschnitt}%
  \tud@locale@english{\partautorefname}{Part}%
  \tud@locale@english{\chapterautorefname}{chapter}%
  \tud@locale@english{\sectionautorefname}{section}%
  \tud@locale@english{\subsectionautorefname}{subsection}%
  \tud@locale@english{\subsubsectionautorefname}{subsubsection}%
%    \end{macrocode}
% \end{macro}^^A \subsubsectionautorefname
% \end{macro}^^A \subsectionautorefname
% \end{macro}^^A \sectionautorefname
% \end{macro}^^A \chapterautorefname
% \end{macro}^^A \partautorefname
% Anschließend folgen die für Klasse und Paket eigens definierten Befehle.
%    \begin{macrocode}
  \providecommand*\Email[1]{\mbox{#1}}%
%<*class>
  \ProvideDocumentCommand\tudhyperdef{sm}{\label{#2}}%
%</class>
  \providecommand*\tudhyperref[2]{#2}%
  \providecommand*\autorefname[1][]{??\xspace}%
}
%    \end{macrocode}
% Verbesserte Referenzierungen auf Seiten.
%    \begin{macrocode}
\RequirePackage{varioref}[2011/10/02]
\renewcommand*\fullref[1]{\hyperref[#1]{\autoref*{#1} \vpageref{#1}}}
%    \end{macrocode}
% \begin{macro}{\hrfn}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \changes{v2.04}{2015/02/18}{Schriftgröße mit \cs{scalebox}}^^A
% Mit diesem Makro können Hyperlinks im Fließtext erzeugt werden, welche 
% zusätzlich noch die dazugeörige URL als Fußnote anzeigen.
%    \begin{macrocode}
\newcommand*\hrfn[2]{%
  \href{#1}{\trim@spaces{#2}}%
  \footnote{%
    \scalebox{0.95}{%
%    \end{macrocode}
% Die Box wird verwendet, um zu lange URLs ausreichend zu verkleinern. Außerdem 
% werden Unterstriche entschärft, die im Zweifel zu Fehlern führen können.
%    \begin{macrocode}
      \def\_{_}%
      \edef\@tempa{#1}%
      \strut\expandafter\url\expandafter{\@tempa}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \hrfn
% Wenn \pkg{hyperref} geladen wird, erzeugt das Paket \pkg{babel} innerhalb von 
% \cs{pdfstringdef} ziemlich viele und absolut unnötige Infos in der Form
% \texttt{Package babel Info: Redefining ngerman shorthand}. Dieser Patch dient
% zum Unterdrücken dieser Infos.
%    \begin{macrocode}
\AfterPackage*{hyperref}{%
  \patchcmd{\pdfstringdef}{\csname HyPsd@babel@}{%
    \let\bbl@info\@gobble\csname HyPsd@babel@%
  }{}{\tud@patch@wrn{pdfstringdef}}%
}
%    \end{macrocode}
% Das Paket \pkg{microtype} wird für den optischen Randausgleich verwendet. Es 
% sollte erst nach \pkg{hyperref} geladen werden.
%    \begin{macrocode}
\AfterPackage*{hyperref}{\RequirePackage[babel]{microtype}[2013/05/23]}
%    \end{macrocode}
% Wurde \pkg{hyperref} nicht geladen, dann soll auf \pkg{microtype} trotzdem 
% nicht verzichtet werden.
%    \begin{macrocode}
\TUD@UnwindPackage{hyperref}{\RequirePackage[babel]{microtype}[2013/05/23]}
%    \end{macrocode}
%
% \iffalse
%<*package>
% \fi
%
% \subsubsection{Zusätzliche Pakete für \pkg{tudscrtutorial}}
%
% Mit dem Paket \pkg{scrwfile} lassen sich Probleme mit zu wenig verfügbaren 
% Streams für das Schreiben externer Datein beheben. Hintergrund ist die
% Verwendung des Paketes \pkg{glossaries} in einem der Tutorials, welches eine
% Vielzahl solcher Streams benötigt. Das Paket \pkg{morewrites} hat keinen 
% Einfluss auf \pkg{glossaries}.
%    \begin{macrocode}
\RequirePackage{scrwfile}[2013/08/05]
%    \end{macrocode}
% Die Umgebungen \env{Preamble}, \env{Trunk} und \env{Hint} sowie deren
% Varianten nutzen das Paket \pkg{filecontents}, um ihren Inhalt in eine
% temporäre Datei zu schreiben und diese direkt mit dem Paket \pkg{listings}
% darzustellen sowie ggf. den Quelltext auszuführen. Beim Überschreiben einer
% Datei wird für gewöhnlich eine Warnung erzeugt. Mit dem Paket \pkg{silence}
% wird diese innerhalb der genannten Umgebungen deaktiviert.
%    \begin{macrocode}
\RequirePackage{silence}[2012/07/02]
\RequirePackage{filecontents}[2011/10/08]
\WarningFilter[Tutorial]{latex}{Overwriting file}%
%    \end{macrocode}
%
% \iffalse
%</package>
%</body>
%<*option>
% \fi
%
% \subsection{Optionen für das Ausgabeformat}
%
% \begin{option}{final}
% \begin{option}{print}
% \begin{macro}{\tudfinalflag}
% \begin{macro}{\tudprintflag}
% Diese beiden Optionen dienen zur finalen und/oder der unbunten Ausgabe.
%    \begin{macrocode}
\TUD@key{final}[true]{%
  \TUD@set@ifkey{final}{@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@tempswa%
      \let\tudfinalflag\relax%
    \fi%
  \fi%
}
\TUD@key{print}[true]{%
  \TUD@set@ifkey{print}{@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@tempswa%
      \let\tudprintflag\relax%
    \fi%
  \fi%
}
%    \end{macrocode}
% Wurde eine oder beide der Optionen \opt{final} oder \opt{print} gesetzt bzw.
% vor einem externen \app{pdflatex}-Aufruf die Flags \cs{tudfinalflag} und/oder
% \cs{tudprintflag} definiert, werden die entsprechenden Einstellungen zur
% finalen Ausgabe und/oder unbunten Druck vorgenommen und anschließend die 
% entsprechenden Optionen unschädlich gemacht.
%    \begin{macrocode}
\AtEndPreamble{%
  \ifdef{\tudfinalflag}{%
    \TUDoptions{ToDo=false}%
    \TUD@key{ToDo}{}%
  }{}%
  \ifdef{\tudprintflag}{%
    \TUDoptions{cd=true}%
    \TUD@key{cd}{}%
    \ifdef{\hypersetup}{\hypersetup{hidelinks}}{}%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \tudprintflag
% \end{macro}^^A \tudfinalflag
% \end{option}^^A print
% \end{option}^^A final
%
% \iffalse
%<*class>
% \fi
%
% \subsection{Standardoptionen der Anwenderdokumentation}
%
% Es werden einige Optionen für das Handbuch standardmäßig aktiviert. Dazu 
% werden diese an die entsprechende Elternklasse übergeben.
%    \begin{macrocode}
\PassOptionsToClass{%
  cdfoot=true,%
  chapterpage=true,%
  chapterprefix=true,%
  headings=optiontoheadandtoc,%
  captions=tableheading,%
  numbers=noenddot,%
  cd=color,%
}{\TUDClassName@Parent}
\PassOptionsToPackage{automark}{scrlayer-scrpage}
%    \end{macrocode}
%
% \iffalse
%</class>
%<*package>
% \fi
%
% Wird das Paket \pkg{tudscrtutorial} geladen, werden zu Beginn des Dokumentes 
% ein paar Standardeinstellungen gemacht.
%
%    \begin{macrocode}
\KOMAoptions{headings=small}
\TUDoptions{cd=true,cdfoot=true}
%    \end{macrocode}
% Falls innerhalb eines Tutorials das Paket \pkg{pstricks} verwendet wird, muss
% dafür Sorge getragen werden, dass die automatische Kompilierung reibungslos
% mit \pkg{auto-pst-pdf} funktioniert.
%    \begin{macrocode}
\AfterPackage*{pstricks}{%
  \ifnum\pdfshellescape=\@ne\relax\else%
    \PassOptionsToPackage{off}{auto-pst-pdf}%
  \fi%
  \RequirePackage{auto-pst-pdf}[2009/04/26]%
}
%    \end{macrocode}
%
% \iffalse
%</package>
%</option>
%<*body>
%<*class>
% \fi
%
% \subsection{Deklarationen für die Klasse}
%
% Die Umgebungen \env{Declaration} und \env{Declaration*} werden beide für die 
% Auszeichnung von Optionen, Umgebungen und Befehlen verwendet, die \TUDScript 
% dem Anwender zur Verfügung stellt.
%
% \begin{macro}{\if@declare}
% \begin{macro}{\if@openindex}
% \begin{macro}{\tud@declare@type}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Dies sin ein paar Hilfsmakros zur Steuerung des Markup sowie der Ausgabe von
% Deklarationen, Index und Änderungsliste, welche bei den nächsten Befehlen und 
% Umgebungen genutzt werden. Mit \cs{if@declare} wird bestimmt, ob die Befehle 
% für das Markup in der Ausgabe als Deklaration oder anderweiteig erfolgt. Der 
% Schalter \cs{if@openindex} wird zu Beginn einer Deklaration auf \val{true} 
% gesetzt und vor dem Beenden auf \val{false}. Damit wird bestimmt, ob ein 
% öffnender oder ein schließender Indexeintrag erzeugt werden soll.
%    \begin{macrocode}
\newif\if@declare
\newif\if@openindex
%    \end{macrocode}
% Das Makro \cs{tud@declare@type} bestimmt innerhalb einer Deklaration, wie 
% das Markup erfolgen soll. Die möglichen Werte für \cs{tud@declare@type} sind
% bei der Beschreibung von \cs{ProcessMarkup@Declare} zu finden.
%    \begin{macrocode}
\newcommand*\tud@declare@type{0}
%    \end{macrocode}
% \end{macro}^^A \tud@declare@type
% \end{macro}^^A \if@openindex
% \end{macro}^^A \if@declare
% \begin{environment}{Declaration}
% \begin{environment}{Obsolete}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\list@declaration}
% \begin{macro}{\if@obsolete}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Es werden einige Hilfsmakros für die Ausgabe einer Deklaration sowie der 
% dazugehörigen Änderungsliste initialisiert.
%    \begin{macrocode}
\newcommand*\list@declaration{}
\let\list@declaration\relax
%    \end{macrocode}
% Die \env{Declaration}-Umgebung dient zur Deklaration von Optionen, Umgebungen,
% Befehlen, Parametern, Bezeichnern, Längen, Schriftelementen und Farben. Diese 
% werden mit den entsprechenden Auszeichnungsbefehlen als obligatorisches 
% Argument übergeben. Zuvor kann noch vorher im ersten optionalen Argument eine
% Beschreibung für die Änderungsliste in der Form \oarg{Verison!Beschreibung}
% angegeben werden. Danach kann im dritten Argument~-- das zweite optionale~-- 
% die Voreinstellung für eine Option oder dergleichen angegeben werden. Das
% nächste optionale Argument erlaubt die Angabe einer bedingten Voreinstellung, 
% also einer anderen Voreinstellung als der zuerst angegeben unter bestimmten
% Voraussetzungen. Diese wird in der Form \oarg{Bedingung:Voreinstellung}
% angegeben. Das letzte Argument ist ebenfalls optional, wird aber in der Form
% \marg{Zusatz} angegeben und enthält ggf. zusätzliche Informationen.
%
% Die Umgebung \env{Obsolete} hat eine ganz ähnliche Funktion, wird allerdings
% für die Deklaration veralteter Befehle, Umgebungen, Optionen etc. verwendet.
% Da sich beide Umgebungen stark ähneln, werden zum Start bzw. zum Abschluss
% die Makros \cs{tud@declare@start} bzw. \cs{tud@declare@end} aufgerufen. Zu 
% Beginn wird nichts weiter ausgegeben sondern lediglich alle übergebenen
% Argumente in jeweiligen Listen gesammelt. Die eigentliche Ausgabe der 
% Deklaration erfolgt mit dem Befehl \cs{printdeclarationlist} bezieungsweise 
% \cs{printobsoletelist}. 
%    \begin{macrocode}
\NewDocumentEnvironment{Declaration}{omoog}{%
  \listadd\list@declaration{#2}%
  \tud@declare@start[#1]{#2}{#3}{#4}{#5}%
}{%
  \tud@declare@end{#2}{\printdeclarationlist}%
}
%    \end{macrocode}
% Für die Umgebung \env{Obsolete} sieht die Eingabe etwas anders aus. Das erste 
% obligatorische Argument sollte eine Versionsnummer enthalten, ab wann die 
% Deklaration veraltet ist. Das erste optionale Argument wird genutzt, wenn 
% für eine weiterhin gültige Deklaration lediglich ein bestimmter Wert 
% entfällt. Wird das erste Argument leer gelassen, erfolgt lediglich die 
% Ausgabe der Deklaration ohne einen Eintrag in die Änderungsliste. Dies ist 
% für Umgebungen und Befehle gedacht, bei denen lediglich ein oder mehrere 
% Parameter geändert wurden bzw. entfallen.
%    \begin{macrocode}
\newif\if@obsolete
\NewDocumentEnvironment{Obsolete}{momoog}{%
  \@obsoletetrue%
  \ifstr{#1}{}{%
%    \end{macrocode}
% Ohne Versionsnummer erfolgt die Ausgabe ohne Label. Für den Eintrag wird auch 
% keine Änderungsnotiz erzeugt.
%    \begin{macrocode}
    \listadd\list@declaration{%
      \def\tud@declare@type{1}%
      #3%
      \def\tud@declare@type{0}%
    }%
    \tud@declare@start{#3}{#4}{#5}{#6}%
  }{%
    \listadd\list@declaration{#3}%
%    \end{macrocode}
% Wurde ein optionales Argument angegeben, bezieht sich der Änderungseintrag 
% auf ebendieses Argument, die eigentliche, obsolete Deklaration wird als 
% Untereintrag genutzt.
%    \begin{macrocode}
    \IfValueTF{#2}{%
      \@ChangedAt@CreateList[#2]{#1!#3}%
    }{%
      \@ChangedAt@CreateList[#3]{#1}%
    }%
    \IfValueTF{#6}{%
      \tud@declare@start{#3}{#4}{#5}{#6}%
%    \end{macrocode}
% Ohne eine zusätzliche Angabe imletzten optionalen Argument wird standardmäßig
% der Entfall der Deklaration angegeben. Alternativ dazu kann im ersten 
% Argument der Versionsangabe mit einem Dopppelpunkt von dieser getrennt eine 
% neue bzw. aktuell gültige Deklaration als Querverweis angegeben werden.
%    \begin{macrocode}
    }{%
      \toks@{\tud@declare@start{#3}{#4}{#5}}%
      \def\@tempa{\emph{entf\"allt}}%
      \in@{:}{#1}%
      \ifin@%
        \def\@tempb##1:##2\@nil{%
          \if\relax\detokenize{##2}\relax\else%
            \def\@tempa{\seeref{##2'page'}}%
          \fi%
        }%
        \@tempb#1\@nil%
      \fi%
      \eaddto@hook\toks@{\expandafter{\@tempa}}%
      \the\toks@%
    }%
  }%
  \@obsoletefalse%
}{%
  \@obsoletetrue%
  \tud@declare@end{#3}{\printobsoletelist}%
  \@obsoletefalse%
}
%    \end{macrocode}
% \end{macro}^^A \if@obsolete
% \end{macro}^^A \list@declaration
% \end{environment}^^A Obsolete
% \end{environment}^^A Declaration
% \begin{macro}{\list@preset}
% \begin{macro}{\if@preset@list}
% \begin{macro}{\list@additional}
% \begin{macro}{\if@additional@list}
% Dies sind die temporären listen, die für alle Deklarationen verwendet werden.
%    \begin{macrocode}
\newcommand*\list@preset{}
\let\list@preset\relax
\newif\if@preset@list
\newcommand*\list@additional{}
\let\list@additional\relax
\newif\if@additional@list
%    \end{macrocode}
% \end{macro}^^A \if@additional@list
% \end{macro}^^A \list@additional
% \end{macro}^^A \if@preset@list
% \end{macro}^^A \list@preset
% \begin{macro}{\tud@declare@start}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@declare@end}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Dies sind die Makros für die eigentliche Abarbeitung der Deklarationsbefehle 
% zu Beginn und Ende der Umgebungen \env{Declaration} und \env{Obsolete}.
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@start{ommmm}{%
%    \end{macrocode}
% Die optional angegebenen Änderungen werden mit \cs{@ChangedAt@CreateList} in 
% der Liste \cs{list@ChangedAt} gesichert und später sowohl für die Randnotiz 
% als auch die Änderungsliste verarbeitet.
%    \begin{macrocode}
  \@ChangedAt@CreateList[#2]{#1}%
%    \end{macrocode}
% Hier noch die Listen für Voreinstellungen\dots
%    \begin{macrocode}
  \IfValueTF{#3}{%
    \@preset@listtrue%
    \def\@tempa{Voreinstellung: \PValue{#3}}%
    \IfValueT{#4}{%
      \def\@tempb[##1:##2]{##1: \PValue{##2}}%
      \eappto\@tempa{ | \expandonce{\@tempb[#4]}}%
    }%
    \listeadd\list@preset{\expandonce\@tempa}%
  }{%
    \listadd\list@preset{\relax}%
  }%
%    \end{macrocode}
% \dots sowie zusätliche Informationen.
%    \begin{macrocode}
  \IfValueTF{#5}{%
    \@additional@listtrue%
    \listadd\list@additional{(#5)}%
    \in@{\Environment}{#2}%
    \ifin@\listadd\list@additional{\tabularnewline}\fi%
  }{%
    \listadd\list@additional{\relax}%
    \in@{\Environment}{#2}%
    \ifin@\listadd\list@additional{\relax}\listadd\list@additional{\relax}\fi%
  }%
}
%    \end{macrocode}
% Am Ende der Umgebungen wird das übergebenen Hauptargument erneut ausgeführt,
% was zum Beenden der Indexeinträge für die jeweilige Deklaration führt
% (\cs{@openindexfalse}, siehe \cs{@ProcessIndex}). Dafür werden die Makros für
% die Angabe obligatorischer und optionaler Parameter lokal umdefiniert.
%    \begin{macrocode}
\newcommand*\tud@declare@end[2]{%
  \ifx\list@declaration\relax\else%
    \ClassError{tudscrmanual}{\string#2\space is missing}{%
      \string\list@declaration\space is not empty. Did you forget\MessageBreak%
      to print this list with \string#2?%
    }%
  \fi%
  \vskip-\lastskip%
  \@declaretrue\@openindexfalse#1\@declarefalse%
  \pagebreak[1]%
}
%    \end{macrocode}
% \end{macro}^^A \tud@declare@end
% \end{macro}^^A \tud@declare@start
% \begin{environment}{Declaration*}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \changes{v2.05}{2015/08/04}{Indexaufteilung/-markup für Klassen und Pakete}^^A
% Die Sternversion der Umgebung \env{Declaration*} ist für die vereinfachte 
% Deklaration von Klassen, Paketen etc. gedacht, bei denen keine Ausgabe 
% sondern lediglich Hyperlink, Indexeintrag und Änderungsnotiz erzeugt werden 
% sollen. Hierbei werden die Befehle \cs{tud@declare@special@start} sowie 
% \cs{tud@declare@special@end} genutzt, wobei der Anker des erzeugten Labels
% nicht erhöht sondern auf der aktuellen Grundlinie erzeugt wird.
%    \begin{macrocode}
\NewDocumentEnvironment{Declaration*}{om}{%
  \tud@declare@special@start[#1]{#2}{2}%
}{%
  \tud@declare@special@end{#2}%
}
%    \end{macrocode}
% \end{environment}^^A Declaration*
% \begin{environment}{Bundle!}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{environment}{Bundle}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Die Umgebung \env{Bundle!} wird verwendet, wenn ein zusätzliche Paket oder 
% eine weitere Klasse in Ergänzung zu den Hauptklassen dokumentiert wird. Dabei 
% wird die Umgebung \env{Bundle} geöffnet, nachdem das obligatorischen Argument 
% mit dem Befehl \cs{tud@declare@special@start} deklariert wird. Dabei sollte 
% die Umgebung \env{Bundle!} direkt nach einer Gliederungsüberschrift genutzt
% werden, in welcher das zu deklarierende Element (Klasse, Paket etc.) genannt
% wird, da der Anker des erzeugten Labels weiter nach oben auf die Höhe der 
% Überschirft verschoben wird. Zum Abschluss der Deklaration wird nach dem
% Schließen der Umgebung \env{Bundle} \cs{tud@declare@special@end} genutzt. 
%    \begin{macrocode}
\NewDocumentEnvironment{Bundle!}{om}{%
  \tud@declare@special@start[#1]{#2}{3}%
  \Bundle{#2}%
}{%
  \endBundle%
  \tud@declare@special@end{#2}%
}
%    \end{macrocode}
% Die Umgebung \env{Bundle} kann nicht verschachtelt werden und prüft zuerst 
% dementsprechend die Verwendung. Anschließend wird lediglich das Makro 
% \cs{@bundle} auf das übergebene Argument gesetzt, um innerhalb der Umgebung 
% erstellte Label und Indexeinträge zu beeinflussen.
%    \begin{macrocode}
\newenvironment{Bundle}[1]{%
  \tud@ifbundle{%
    \ClassError{tudscrmanual}{Nested environment `Bundle'}{%
      It is not possible to nest this environment, when\MessageBreak%
      a cross-label was given before.%
    }%
  }{%
    \gdef\@bundle{#1}%
  }%
  \ignorespaces%
}{\global\let\@bundle\@bundledefault\aftergroup\ignorespaces}
%    \end{macrocode}
% \end{environment}^^A Bundle
% \end{environment}^^A Bundle!
% \begin{macro}{\@bundle}
% \changes{v2.05}{2015/08/04}{neu}^^A
% \begin{macro}{\@bundledefault}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@ifbundle}
% \changes{v2.05}{2015/08/04}{neu}^^A
% Das angegebene Argument wird geprüft. Sollte registriert werden, dass dieses 
% nicht der Deklaration der Hauptklassen entspricht, wird das zweite Argument 
% ausgeführt, andernfalls das dritte.
%    \begin{macrocode}
\newcommand*\@bundle{}
\newcommand*\@bundledefault{tudscr}
\let\@bundle\@bundledefault
\newcommand*\tud@ifbundle[2]{\ifstr{\@bundle}{\@bundledefault}{#2}{#1}}
%    \end{macrocode}
% \end{macro}^^A \tud@ifbundle
% \end{macro}^^A \@bundledefault
% \end{macro}^^A \@bundle
% \begin{macro}{\tud@declare@start}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@declare@end}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Die beiden dienen zur vereinfachten Deklaration. Es wird keine Ausgabe 
% sondern lediglich Hyperlink, Indexeintrag und Änderungsnotiz erzeugt. Das 
% optionale Argument dient einem Änderungseintrag, das erste obligaotrische 
% gilt der eigentlichen Deklaration, das zweite zur Einstellung des Makros 
% \cs{tud@declare@type}, mit welchem das Verhalten für das Erzeugen der Labels 
% gesteuert wird.
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@special@start{omm}{%
  \@ChangedAt@CreateList(#2){#1}%
  \def\tud@declare@type{#3}%
  \@declaretrue\@openindextrue#2\@declarefalse%
  \def\tud@declare@type{0}%
}
\newcommand*\tud@declare@special@end[1]{%
  \ifx\list@ChangedAt\relax\else%
    \ClassError{tudscrmanual}{\string\printchangedatlist\space is missing}{%
      \string\list@ChangedAt\space is not empty. Did you\MessageBreak%
      forget to print this list with \string\printchangedatlist?%
    }%
  \fi%
  \@declaretrue\@openindexfalse#1\@declarefalse%
}
%    \end{macrocode}
% \end{macro}^^A \tud@declare@end
% \end{macro}^^A \tud@declare@start
% \begin{macro}{\printdeclarationlist}
% \begin{length}{\tud@lastskip}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\index}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\label}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Mit dem Befehl \cs{printdeclarationlist} erfolgt die eingentliche Ausgabe 
% aller Deklarationen. Zweck ist es, mehrere \env{Declaration}-Umgebungen 
% ineinander verschachteln zu können und eine Ausgabe aller auf einmal zu 
% erzeugen. Die durch die ggf. nacheinander folgenden Deklarationen wurden in 
% entsprechenden Listen gesammelt und werden hier jetzt formatiert ausgegben.
%
% Da die Verwendung der Befehle \cs{index} und \cs{label} nach Überschriften 
% dazu führt, dass \cs{addvspace} nicht mehr richtig verendet werden kann, 
% wird hier etwas gebastelt, damit das trotzdem funktioniert. Dabei wird 
% einfach bei der verwendung der genannten Befehle der zuvor gesetzte vertikale 
% Abstand in \cs{tud@lastskip} gesichert.
%    \begin{macrocode}
\newskip\tud@lastskip
\pretocmd{\index}{\tud@lastskip=\lastskip}{}{\tud@patch@wrn{index}}
\pretocmd{\label}{\tud@lastskip=\lastskip}{}{\tud@patch@wrn{label}}
\NewDocumentCommand\printdeclarationlist{sd()}{%
  \ifx\list@declaration\relax\else%
    \ifhmode%
      \vskip\medskipamount%
    \else%
%    \end{macrocode}
% Im vertikalen modus wird dann einfach vom eigentlich gewünschten Abstand der 
% durch \cs{label} bzw. \cs{index} erzwungene vertikale Freiraum abgezogen. 
% Sollte dann noch ein positiver Wert bestehen, wird dieser einfach zusätzlich
% gesetzt.
%    \begin{macrocode}
      \@tempskipa=\glueexpr\medskipamount-\tud@lastskip\relax%
      \ifdim\@tempskipa>\z@%
        \addpenalty{\@beginparpenalty}%
        \addvspace{\@tempskipa}%
      \fi%
    \fi%
%    \end{macrocode}
% Anschließend wird die Länge auf jeden Fall zurückgesetzt.
%    \begin{macrocode}
    \global\tud@lastskip=\z@%
    \@afterindentfalse\@afterheading%
    \@declaretrue\@openindextrue%
%    \end{macrocode}
% Die deklarierten Optionen, Umgebungen, Befehle etc. werden umrahmt. Dabe
% erfolgt die Ausgabe mithilfe einer Box, um die Größe des Deklarationsrahmens
% zu speichern und die Änderungsmarkierung am Seitenrand auf die richtige Höhe
% zu platzieren. Da innerhalb von Tabellen der Wert von \cs{baselineskip} auf
% \makeatletter\the\z@\makeatother~gesetzt wird, muss für einen richtig
% platzierten Link dieser in \cs{HyperRaiseLinkDefault} gesichert werden.
%    \begin{macrocode}
    \def\@tempa##1{\ignorespaces##1\tabularnewline}%
    \edef\HyperRaiseLinkDefault{\the\baselineskip}%
    \sbox\z@{%
      \begin{tabular}{|l|}%
        \hline%
        \forlistloop\@tempa{\list@declaration}%
        \hline%
      \end{tabular}%
    }\usebox\z@%
    \@declarefalse%
%    \end{macrocode}
% Danach werden ggf. die Voreinstellungen und Zusatzinformationen in etwas 
% kleinerer Schrift gesetzt.
%    \begin{macrocode}
    \ifboolexpr{bool {@preset@list} or bool {@additional@list}}{%
      \def\@tempa##1{\small\ignorespaces##1\tabularnewline}%
      \qquad%
      \if@preset@list%
        \begin{tabular}{@{}l@{}}%
          \forlistloop\@tempa{\list@preset}%
        \end{tabular}%
        \hspace{\tabcolsep}%
      \fi%
      \if@additional@list%
        \begin{tabular}{@{}l@{}}%
          \forlistloop\@tempa{\list@additional}%
        \end{tabular}%
      \fi%
    }{}%
%    \end{macrocode}
% Alle für die Deklaration verwendeten Listen werden nach ihrer Abarbeitung 
% zurückgesetzt.
%    \begin{macrocode}
    \global\let\list@declaration\relax%
    \global\let\list@preset\relax%
    \global\let\list@additional\relax%
    \global\@preset@listfalse%
    \global\@additional@listfalse%
%    \end{macrocode}
% Die Einträge in der Änderungsliste sowie die dazugehörige Randnotiz werden
% innerhalb der Deklaration mit \cs{printchangedatlist} erzeugt. Das optionale 
% Argument sorgt für die Verschiebung der Randnotiz auf die richtige Höhe, um 
% den Höhenversatz zwischen Randnotiz und Deklarationsrahmen auszugleichen.
%    \begin{macrocode}
    \@printchangedatlist{#1}{%
      \dimexpr.5\ht\strutbox+.5\dp\strutbox-.5\ht0-.5\dp0\relax%
    }%
%    \end{macrocode}
% Zum Schluss wird das optionale Argument (in runden Klammern) neben der
% Deklarationsbox ausgegeben.
%    \begin{macrocode}
    \IfValueT{#2}{#2}%
    \par\nobreak%
    \vskip\medskipamount%
    \@afterindentfalse\@afterheading%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \label
% \end{macro}^^A \index
% \end{length}^^A \tud@lastskip
% \end{macro}^^A \printdeclarationlist
% \begin{macro}{\printobsoletelist}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Damit werden Deklarationen der Umgebung \env{Obsolete} ausgegeben.
%    \begin{macrocode}
\newcommand*\printobsoletelist{%
  \@obsoletetrue%
  \printdeclarationlist*%
  \@obsoletefalse%
}
%    \end{macrocode}
% \end{macro}^^A \printobsoletelist
% \begin{macro}{\printchangedatlist}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Damit werden Änderungsnotizen der Umgebungen \env{Declaration*} sowie
% \env{Bundle} und \env{Bundle!} ausgegeben.
%    \begin{macrocode}
\NewDocumentCommand\printchangedatlist{sO{\z@}}{%
  \@printchangedatlist{#1}{#2}%
}
%    \end{macrocode}
% \end{macro}^^A \printchangedatlista
%
% \iffalse
%</class>
% \fi
%
% \subsection{Markup von Klassen, Paketen, Optionen und weiteren Elementen}
%
% Es folgen die Definitionen für Befehle und Umgebungen für Klasse und Paket, 
% welche sich überschneidenden und für beide benötigt werden. Allerdings sind 
% diese für Klasse und Paket in ihrer Implementierung teilweise unterschiedlich.
%
% Als erstes werden für Klasse und Paket einige Hilfmakros definiert.
%
% \begin{macro}{\bsc}
% \changes{v2.02}{2014/07/22}{\cs{newrobustcmd} aus \pkg{etoolbox} anstelle von 
%   \cs{DeclareRobustCommand}}^^A
% Eine einfacher zu verwendende Kurzform.
%    \begin{macrocode}
\newrobustcmd*\bsc{\@backslashchar}
%    \end{macrocode}
% \end{macro}^^A \bsc
% \begin{macro}{\suffix}
% \changes{v2.05}{2015/10/27}{neu}^^A
% Für alle möglichen, zusätzlichen Informationen bei Deklarationen, im Index 
% oder der normalen in Ausgabe im Fließtext wird eine etwas kleinere Schrift 
% verwendet.
%    \begin{macrocode}
\newrobustcmd*\suffix[1]{\begingroup~\footnotesize(#1)\endgroup}
%    \end{macrocode}
% \end{macro}^^A \suffix
% \begin{macro}{\NewExpandableDocumentCommand}
% \changes{v2.02}{2014/11/04}{neu}^^A
% Für Labels, Index- und Änderungs sowie PDF-Outline-Einträge etc. müssen ganz
% bestimmte Markup-Befehle durch eine expandierbare Version ersetzt werden. Der
% Befehl \cs{NewExpandableDocumentCommand} wird definiert, um dies möglichst
% einfach zu gestalten.
%    \begin{macrocode}
\newcommand*\NewExpandableDocumentCommand[3]{%
  \NewDocumentCommand#1{#2}{#3}%
  \DeclareExpandableDocumentCommand#1{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}^^A \NewExpandableDocumentCommand
%
% \subsubsection{Definition der Markup-Befehle}
%
% \changes{v2.05}{2015/11/02}{Markup-Befehle komplett überarbeitet}^^A
%
% Im Folgenden werden allerhand Befehle mit Hilfe des Paketes \pkg{xparse} 
% definiert, um bestimmte Begriffe, Klassen, Pakete, Optionen, Umgebungen, 
% Befehle, Parameter, Bezeichner, Längen, Schriftelemente und Farben speziell
% auszuzeichnen. Diese Befehle lauten für Klasse und Paket aus Gründen der
% Konsistenz zwar gleich, unterschieden sich jedoch ein klein wenig in der
% Implementierung.
%
% Die Sternversion all dieser Befehlen tragen nichts in den Index ein. Für 
% (fast) alle der folgenden Befehle gilt, dass diese mit zwei optionalen
% Argumenten am Ende genutzt werden können. Sollte ein Label existieren, wird 
% automatisch ein Hyperlink erzeugt, welcher mit der optionalen Angabe von
% \val{'}\meta{Referenzvariante}\val{'} um einen textuellen Querverweis ergänzt 
% werden kann. Mit \val{\textbar}\meta{Indexformat}\val{\textbar} kann die
% Erscheinung im Index angepasst werden. Bei einigen Befehlen kann zusätzlich
% zuvor im Markup mit dem optionalen Argument \parg{Bundleelement} die
% Zuweisung auf ein bestimmtes Paket oder eine Klasse aus dem \TUDScript-Bundle
% erfolgen.
%
% Die eigentliche Behandlung erfolgt mit dem Befehl \cs{@ProcessMarkup}, 
% welcher die tatsächliche Auszeichnung im Fließtext bzw. als Deklaration 
% übernimmt. Das Auszeichnungsformat wird dafür zuvor mit \cs{@SetMarkupFormat}
% festgelegt. Ein Eintrag in den Index wird mit \cs{@ProcessIndex} realisiert.
% Für die Änderungsliste wird der Befehl \cs{@ProcessChangedAt} genutzt, um die 
% entsprechende Formatierung zu gewährleisten.
%
% \ToDo{Implementierung/Anpassung für Paket \pkg{tudscrtutorial}}[v2.05]
% Die Befehle für das Paket \pkg{tudscrtutorial} sind in ihrer Funktionalität 
% um einiges reduziert. Die meisten besitzen nur ein obligatorisches Argument
% für die formatierte Ausgabe sowie evtl. eine Sternversion, die einen
% Querverweis auf das Handbuch erzeugt.
%
% \begin{macro}{\ProcessorKeyVal}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@keyval@error}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Bei Optionen und Parametern können spezielle Werte einfach im Hauptargument 
% durch \val{=} getrennt angegeben werden. Um diese auszuwerten, wird dieser 
% Befehl definiert, welcher als Argumentprozessor verwendet wird.
%    \begin{macrocode}
\newcommand*\ProcessorKeyVal[1]{%
  \begingroup%
    \in@{=}{#1}%
%    \end{macrocode}
% Wird im Argument ein \val{=} gefunden, so wird alles Darauffolgende als Wert
% erkannt und dem eigentlichen Hauptargument bei der Ausgabe angehangen. Das
% Makro, welches diesen Argumentprozessor verwendet, erhält als Ausgabe also
% entweder \marg{Schlüssel} oder \marg{Schlüssel}\val{=}\meta{Wert}\val{=} 
% falls \cs{ProcessorKeyVal} mit \marg{Schlüssel=Wert} verwendet wurde .
%    \begin{macrocode}
    \ifin@%
      \def\@tempa##1=##2\@nil{\toks@{{##1}=##2=}}%
    \else%
      \def\@tempa##1\@nil{\toks@{{##1}}}%
    \fi%
    \@tempa#1\@nil%
    \edef\tud@reserved{%
      \noexpand\endgroup%
      \def\noexpand\ProcessedArgument{\the\toks@}%
    }%
  \tud@reserved%
}
%    \end{macrocode}
% Es gibt auch noch eine interne Variante für ein optioneles Werte-Argument. 
% Dabei sollte vermieden werden, dass im Markup das Argument für einen Wert 
% doppelt angegeben wird. In diesem Fall wird dieser Fehler ausgegeben.
%    \begin{macrocode}
\newcommand*\tud@keyval@error{%
%<*class>
  \ClassError{tudscrmanual}%
%</class>
%<*package>
  \PackageError{tudscrtutorial}%
%</package>
    {Wrong usage of optional argument for value}%
    {There are two optional arguments for a value given!}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@keyval@error
% \end{macro}^^A \ProcessorKeyVal
% \begin{macro}{\Application}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Application}
% Die Auszeichnung und der Indexeintrag einer Anwendungssoftware.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Application{sm}{#2}
\NewDocumentCommand\Application{smd||}{%
  \@SetMarkupFormat{\sbsfont}%
  \@ProcessMarkup{\Application{#2}}%
  \@ProcessIndex{#1}{\Application{#2}}[Anwendungssoftware]|#3|%
}
%<*package>
\renewcommand*\Application[1]{\ifdin{#1}{\mbox{\textsbs{#1}}}}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Application
% \end{macro}^^A \Application
% \begin{macro}{\Distribution}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag einer \LaTeX-Distribution. Das 
% optionale Argument kann für das Anhängen einer Versionsnummer o.\,ä. im 
% Fließtext genutzt werden.
% \begin{macro}{\@Distribution}
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Distribution{sm}{#2}
\NewDocumentCommand\Distribution{smod||}{%
  \@SetMarkupFormat{\sbnfont}%
  \IfValueTF{#3}{%
    \@ProcessMarkup{\Distribution{#2}}[~#3]%
  }{%
    \@ProcessMarkup{\Distribution{#2}}%
  }%
  \@ProcessIndex{#1}{\Distribution{#2}}[Distribution]|#4|%
}
%<*package>
\renewcommand*\Distribution[1]{\ifdin{#1}{\mbox{\textsbn{#1}}}}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Distribution
% \end{macro}^^A \Distribution
% \begin{macro}{\Engine}
% \changes{v2.05}{2015/11/04}{neu}^^A
% \begin{macro}{\@Engine}
% \changes{v2.05}{2015/11/04}{neu}^^A
% Die Auszeichnung und der Indexeintrag für ein bestimmtes Textsatzsystem.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Engine{sm}{#2}
\NewDocumentCommand\Engine{smd||}{%
  \@SetMarkupFormat{\sbnfont}%
  \@ProcessMarkup{\Engine{\hologo{#2}}}%
  \@ProcessIndex{#1}{\Engine{#2}}[Textsatzsystem]|#3|%
}
%<*package>
\renewcommand*\Engine[1]{\ifdin{\hologo{#1}}{\mbox{\textsbn{\hologo{#1}}}}}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Engine
% \end{macro}^^A \Engine
% \begin{macro}{\File}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@File}
% Die Auszeichnung und der Indexeintrag einer Datei.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@File{sm}{#2}
\NewDocumentCommand\File{smd||}{%
  \@SetMarkupFormat{\sbnfont}%
  \@ProcessMarkup{\File{#2}}%
  \@ProcessIndex{#1}{\File{#2}}[Datei]|#3|%
}
%<*package>
\renewcommand*\File[1]{\ifdin{#1}{\mbox{\textsbn{#1}}}}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@File
% \end{macro}^^A \File
% \begin{macro}{\Class}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Class}
% Die Auszeichnung und der Indexeintrag einer Klasse. Das optionale Argument 
% zwischen Apostrophen kann für die Formatierung eines Querverweises im Text
% genutzt werden, das optionale Argument zwischen senkrechten Strichen dient
% der Formatierung des Indexeintrages.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Class{sm}{#2}
\NewDocumentCommand\Class{smd''d||}{%
%<*class>
  \if@changedat%
    \@ProcessChangedAt{\Class{#2}}[Klasse]%
  \else%
%</class>
    \@SetMarkupFormat{\sbnfont}%
    \@ProcessMarkup{\Class{#2}}'#3'%
    \@ProcessIndex{#1}{\Class{#2}}[Klasse]|#4|%
%<*class>
  \fi%
%</class>
}
%<*package>
\RenewDocumentCommand\Class{sm}{%
  \ifdin{#2}{%
    \IfBooleanTF{#1}{%
      \tudhyperref{files:#2}{\textsbn{#2}}%
    }{%
      \textsbn{#2}%
    }%
    \index[files]{%
      \begingroup\protect\sbnfont#2\endgroup\nobreakspace{\idxfont(Klasse)}%
    }%
  }%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Class
% \end{macro}^^A \Class
% \begin{macro}{\Package}
% \changes{v2.02}{2014/07/10}{Ausgabe für ChangeLog hinzugefügt}^^A
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Package}
% Für die Auszeichnungen von Paketen gelten vorherigen Aussagen äquivalent. 
% Für Pakete wird ergänzend ein Hyperlink auf CTAN erzeugt, wenn für dieses 
% kein Label im Dokument besteht. Genaueres ist der Beschreibung und Definition 
% von \cs{@ProcessMarkup} zu entnehmen. Das optionale Argument in einfachen
% Guillemets dient zum Anpassen des CTAN-Links, welcher normalerweise aus
% obligatorischen Argument generiert wird.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Package{sm}{#2}
\NewDocumentCommand\Package{smd<>d''d||}{%
%<*class>
  \if@changedat%
    \@ProcessChangedAt{\Package{#2}}[Paket]%
  \else%
%</class>
    \@SetMarkupFormat{\sbnfont}%
    \IfValueTF{#3}{%
      \@ProcessMarkup{\Package{#2}}<#3>'#4'%
    }{%
      \@ProcessMarkup{\Package{#2}}<#2>'#4'%
    }%
    \@ProcessIndex{#1}{\Package{#2}}[Paket]|#5|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% Zusätzlich wird ein Befehl für Tutorials erstellt, welcher auf das Handbuch 
% verweist.
%    \begin{macrocode}
%<*package>
\RenewDocumentCommand\Package{smd<>}{%
  \ifdin{#2}{%
    \IfBooleanTF{#1}{%
      \tudhyperref{files:#2}{\textsbn{#2}}%
    }{%
      \IfValueTF{#3}{%
        \href{http://www.ctan.org/pkg/#3}{\textsbn{#2}}%
      }{%
        \href{http://www.ctan.org/pkg/#2}{\textsbn{#2}}%
      }%
    }%
    \index[files]{%
      \begingroup\protect\sbnfont#2\endgroup\nobreakspace{\idxfont(Paket)}%
    }%
  }%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Package
% \end{macro}^^A \Package
% \begin{macro}{\Option}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\Option@Value}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\@Option}
% \changes{v2.02}{2014/11/02}{neu}^^A
% Im Gegensatz zu den vorherigen Befehlen, kann im Hauptargument ein spezieller 
% Wert für eine Option optional durch ein \val{=} getrennt angegeben werden.
% Durch den Argumentprozessor \cs{ProcessorKeyVal} wird dieses vom eigentlichen
% Schlüssel getrennt. Dabei wird der gegebene Schlüssel immer in der Form
% \marg{Schlüssel} ausgegeben. Sollte ein optionaler Wert gegeben worden sein, 
% wird dieser in der Form \val{=}\meta{Wert}\val{=} einfach angehängt und als
% optionales Argument von \cs{Option@Value} weiter verarbeitet. Mit dem
% optionalen Argument in runden Klammern kann ggf. auf eine Option aus einem 
% \TUDScript-Paket verwiesen 
% werden.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Option{sm}{#2}
\NewDocumentCommand\Option{s>{\ProcessorKeyVal}md==d()d''d||}{%
  \Option@Value{#1}#2=#3=(#4)'#5'|#6|%
}
%    \end{macrocode}
% Für die interne Verwendung kann das optionale Argument für den Wert auch 
% direkt mit \val{=}\meta{Wert}\val{=} angehangen werden. Um die gleichzeitige 
% Verwendung beider Varianten zu unterdrücken, wird in diesem Fall ein Fehler 
% erzeugt.
%    \begin{macrocode}
\NewDocumentCommand\Option@Value{mmd==d==d()d''d||}{%
  \IfValueT{#4}{\tud@keyval@error}%
%<*class>
  \if@changedat%
    \@ProcessChangedAt{\Option{#2}}=#3=[Option](#5)%
  \else%
%</class>
    \@SetMarkupFormat{\ttfamily}%
    \@ProcessMarkup{\Option{#2}}=#3=(#5)'#6'%
    \@ProcessIndex{#1}{\Option{#2}}=#3=(#5)|#7|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% Für Tutorials wird ein Befehl definiert, der auf das Handbuch verweist. 
%    \begin{macrocode}
%<*package>
\RenewDocumentCommand\Option{smo}{%
  \ifdin{#2}{%
    \IfBooleanTF{#1}{%
      \tudhyperref{options:#2}{\texttt{#2}}\IfValueT{#3}{\texttt{=#3}}%
    }{%
      \texttt{#2}\IfValueT{#3}{\texttt{=#3}}%
    }%
    \index[options]{\begingroup\ttfamily#2\endgroup}%
  }%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Option
% \end{macro}^^A \Option@Value
% \end{macro}^^A \Option
% \begin{macro}{\Environment}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Environment}
% \changes{v2.02}{2014/11/02}{neu}^^A
% Bei diesem Makro dient das optionale Argument für die Ausgabe der möglichen 
% Umgebungsargumente bzw. -parameter \emph{bei der Deklaration}. 
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Environment{sm}{#2}
\NewDocumentCommand\Environment{smod()d''d||}{%
%<*class>
  \if@changedat%
    \@ProcessChangedAt{\Environment{#2}}[Umgebung](#4)%
  \else%
%</class>
%    \end{macrocode}
% Außerdem wird für den Fall, dass der \cs{Environment}-Befehl innerhalb der
% Umgebung \env{Declaration} verwendet wird, eine spezielle Ausgabe erzeugt. 
% Nur hier kommt das optionale Argument von \cs{@SetMarkupFormat} nach dem
% Hauptargument zum Tragen. Die resultierende Ausgabe hat die Gesatlt:
%
% \begin{tabular}{l}%
%   \cs{begin}\marg{Umgebung}\tabularnewline
%   \dots\tabularnewline
%   \cs{end}\marg{Umgebung}\tabularnewline
% \end{tabular}%
%    \begin{macrocode}
    \@SetMarkupFormat{\ttfamily}(%
      \ttfamily\bsc{}begin\{#2\}\IfValueT{#3}{#3}\tabularnewline%
      \ttfamily\dots\tabularnewline%
      \ttfamily\bsc{}end\{#2\}%
    )%
    \@ProcessMarkup{\Environment{#2}}[#3](#4)'#5'%
    \@ProcessIndex{#1}{\Environment{#2}}[Umgebung](#4)|#6|%
%<*class>
  \fi%
%</class>
}
%<*package>
\RenewDocumentCommand\Environment{sm}{%
  \ifdin{#2}{%
    \IfBooleanTF{#1}{%
      \tudhyperref{macros:#2}{\texttt{#2}}%
    }{%
      \texttt{#2}%
    }%
    \index[macros]{\begingroup\ttfamily#2\endgroup}%
  }%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Environment
% \end{macro}^^A \Environment
% \begin{macro}{\Macro}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Macro}
% \changes{v2.02}{2014/11/02}{neu}^^A
% Die Auszeichnung und der Indexeintrag eines Befehls. Das ordinäre optionale 
% Argument ist für das Anhängen von Parametern o.\,ä. nach dem eigentlichen 
% Makro zu verwenden. Das optionale Argument in runden Klammern dient dem
% Hyperlink zu einem Befehl aus einem anderen Paket oder einer anderen Klasse
% aus dem \TUDScript-Bundle.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Macro{sm}{#2}
\NewDocumentCommand\Macro{smod()d''d||}{%
%<*class>
  \if@changedat%
    \@ProcessChangedAt{\Macro{#2}}[Befehl](#4)%
  \else%
%</class>
    \@SetMarkupFormat{\ttfamily\bsc}%
    \@ProcessMarkup{\Macro{#2}}[#3](#4)'#5'%
    \@ProcessIndex{#1}{\Macro{#2}}(#4)|#6|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% Für das Paket \pkg{tudscrtutorial} der Hyperlink auf das Handbuch.
%    \begin{macrocode}
%<*package>
\RenewDocumentCommand\Macro{sm}{%
  \ifdin{\bsc#2}{%
    \IfBooleanTF{#1}{%
      \tudhyperref{macros:#2}{\texttt{\bsc#2}}%
    }{%
      \texttt{\bsc#2}%
    }%
    \index[macros]{\begingroup\ttfamily\bsc#2\endgroup}%
  }%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Macro
% \end{macro}^^A \Macro
% \begin{macro}{\Length}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Length}
% Die Auszeichnung und der Indexeintrag einer \LaTeX-Länge.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Length{sm}{#2}
\NewDocumentCommand\Length{smd()d''d||}{%
%<*class>
  \if@changedat%
    \@ProcessChangedAt{\Length{#2}}[L\"ange](#3)%
  \else%
%</class>
    \@SetMarkupFormat{\ttfamily\bsc}[L\"ange]%
    \@ProcessMarkup{\Length{#2}}(#3)'#4'%
    \@ProcessIndex{#1}{\Length{#2}}[L\"ange](#3)|#5|%
%<*class>
  \fi%
%</class>
}
%<*package>
\RenewDocumentCommand\Length{sm}{%
  \ifdin{\bsc#2}{%
    \IfBooleanTF{#1}{%
      \tudhyperref{macros:#2}{\texttt{\bsc#2}}%
    }{%
      \texttt{\bsc#2}%
    }%
    \index[macros]{%
      \begingroup\ttfamily\bsc#2\endgroup\nobreakspace{\idxfont(L\"ange)}%
    }%
  }%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Length
% \end{macro}^^A \Length
% \begin{macro}{\Counter}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Counter}
% \changes{v2.02}{2014/10/08}{entfernt}^^A
% Die Auszeichnung und der Indexeintrag einer \LaTeX-Zählers.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Counter{sm}{#2}
\NewDocumentCommand\Counter{smd()d''d||}{%
%<*class>
  \if@changedat%
    \@ProcessChangedAt{\Counter{#2}}[Z\"ahler](#3)%
  \else%
%</class>
    \@SetMarkupFormat{\ttfamily}[Z\"ahler]%
    \@ProcessMarkup{\Counter{#2}}(#3)'#4'%
    \@ProcessIndex{#1}{\Counter{#2}}[Z\"ahler](#3)|#5|%
%<*class>
  \fi%
%</class>
}
%<*package>
\RenewDocumentCommand\Counter{sm}{%
  \ifdin{\bsc#2}{%
    \IfBooleanTF{#1}{%
      \tudhyperref{macros:#2}{\texttt{\bsc#2}}%
    }{%
      \texttt{\bsc#2}%
    }%
    \index[macros]{%
      \begingroup\ttfamily\bsc#2\endgroup\nobreakspace{\idxfont(Z\"ahler)}%
    }%
  }%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \@Counter
% \end{macro}^^A \Counter
%
% \iffalse
%<*class>
% \fi
%
% \minisec{Exklusive Auszeichnungen für die Klasse}
% Alle weiteren Befehle werden ausschließlich für die Klasse \cls{tudscrmanual}
% definiert.
%
% \begin{macro}{\Key}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\Key@Value}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\@Key}
% Die Auszeichnung und der Indexeintrag eines Parameters für Umgebungen und 
% Befehle. Das erste Argument ist die Umgebung oder der Befehl, wofür der 
% Parameter gültig ist. Das zweite Argument ist der Parameter selbst. Die 
% optionale Zuweisung eines Wertes kann äquivalent zu \cs{Option} mit dem
% Trennzeichen~\val{=} im Hauptargument erfolgen.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Key{smm}{#2!#3}
\NewDocumentCommand\Key{sm>{\ProcessorKeyVal}md==d()d''d||}{%
  \Key@Value{#1}{#2}#3=#4=(#5)'#6'|#7|%
}
\NewDocumentCommand\Key@Value{mmmd==d==d()d''d||}{%
  \IfValueT{#5}{\tud@keyval@error}%
  \if@changedat%
    \@ProcessChangedAt{\Key{#2}{#3}}=#4=[Parameter](#6)%
  \else%
    \@SetMarkupFormat{\ttfamily}[Parameter]%
    \@ProcessMarkup{\Key{#2}{#3}}=#4=(#6)'#7'%
    \@ProcessIndex{#1}{\Key{#2}{#3}}=#4=(#6)|#8|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@Key
% \end{macro}^^A \Key@Value
% \end{macro}^^A \Key
% \begin{macro}{\Term}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Term}
% Die Auszeichnung und der Indexeintrag eines sprachabhängigen Bezeichners.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Term{sm}{#2}
\NewDocumentCommand\Term{smd()d''d||}{%
  \if@changedat%
    \@ProcessChangedAt{\Term{#2}}[Bezeichner](#3)%
  \else%
    \@SetMarkupFormat{\ttfamily\bsc}[Bezeichner]%
    \@ProcessMarkup{\Term{#2}}(#3)'#4'%
    \@ProcessIndex{#1}{\Term{#2}}(#3)|#5|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@Term
% \end{macro}^^A \Term
% \begin{macro}{\PageStyle}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\@PageStyle}
% Die Auszeichnung und der Indexeintrag eines Seitenstils.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@PageStyle{sm}{#2}
\NewDocumentCommand\PageStyle{smd()d''d||}{%
  \if@changedat%
    \@ProcessChangedAt{\PageStyle{#2}}[Seitenstil](#3)%
  \else%
    \@SetMarkupFormat{\ttfamily}[Seitenstil]%
    \@ProcessMarkup{\PageStyle{#2}}(#3)'#4'%
    \@ProcessIndex{#1}{\PageStyle{#2}}[Seitenstil](#3)|#5|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@PageStyle
% \end{macro}^^A \PageStyle
% \begin{macro}{\Font}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Font}
% Die Auszeichnung und der Indexeintrag eines Schriftelementes.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Font{sm}{#2}
\NewDocumentCommand\Font{smd()d''d||}{%
  \if@changedat%
    \@ProcessChangedAt{\Font{#2}}[Schriftelement](#3)%
  \else%
    \@SetMarkupFormat{\ttfamily}[Schriftelement]%
    \@ProcessMarkup{\Font{#2}}(#3)'#4'%
    \@ProcessIndex{#1}{\Font{#2}}[Schriftelement](#3)|#5|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@Font
% \end{macro}^^A \Font
% \begin{macro}{\Color}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Color}
% Die Auszeichnung und der Indexeintrag einer Farbe des \CDs. Das optionale 
% Argument kann sowohl bei der Deklaration als auch im Fließtext für das 
% Anhängen eines Suffix verwendet werden. Alle mit \cs{Color} ausgezeichneten 
% Farben referenzieren standardmäßig auf das Paket \pkg{tudscrcolor}.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Color{sm}{#2}
\NewDocumentCommand\Color{smoD(){\Package{tudscrcolor}}d''d||}{%
  \if@changedat%
    \@ProcessChangedAt{\Color{#2}}[Farbe](#4)%
  \else%
    \@SetMarkupFormat{\ttfamily}[Farbe](%
      \begingroup\ttfamily{#2\IfValueT{#3}{~(#3)}}\endgroup%
    )%
    \@ProcessMarkup{\Color{#2}}[#3](#4)'#5'%
    \@ProcessIndex{#1}{\Color{#2}}[Farbe](#4)|#5|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@Color
% \end{macro}^^A \Color
%
% \iffalse
%</class>
% \fi
%
% \subsubsection{Zuordnung der Markup-Befehle für Label und Index}
%
% \ToDo{Implementierung für Paket \pkg{tudscrtutorial}}[v2.05]
%
% \begin{macro}{\@getattribution}
% \changes{v2.05}{2015/11/03}{neu}^^A
% Der Befehl \cs{@getattribution} ordnet den einzelnen Markup-Befehlen ihren 
% spezifischen Präfix für ein Label oder in der Sternversion den passenden 
% Index zu. Im ersten obligatorischen Argument wird ein Makro angegeben,
% welches die Zuordnung enthalten soll, das zweite ist der Markup-Befehl selbst.
%    \begin{macrocode}
\NewDocumentCommand\@getattribution{smm}{%
  \begingroup%
%    \end{macrocode}
% Das temporäre Makro \cs{@tempa} definiert zunächst alle Markup-Befehle lokal
% neu und expandiert beim Aufruf für jeden dieser Markup-Befehle~-- abhängig
% vom Aufruf von \cs{@getattribution} mit oder ohne Stern~-- entweder den
% passenden Index oder den Labelpräfix in \cs{@tempb}.
%    \begin{macrocode}
    \def\@tempa##1##2##3{%
      \def##1####1{%
        \edef\@tempb{\IfBooleanTF{#1}{##2}{##3}}%
      }%
    }%
    \@tempa\Application{\jobname}{app}%
    \@tempa\Distribution{\jobname}{dst}%
    \@tempa\Engine{\jobname}{eng}%
    \@tempa\File{files}{fle}%
    \@tempa\Class{files}{cls}%
    \@tempa\Package{files}{pkg}%
    \@tempa\Option{options}{opt}%
    \@tempa\Environment{macros}{env}%
    \@tempa\Macro{macros}{cmd}%
    \@tempa\Length{misc}{len}%
    \@tempa\Counter{misc}{cnt}%
%    \end{macrocode}
% Da \cs{Key} mit zwei Hauptargumenten aufgerufen wird, ist nur die Expansion
% des ersten Argumentes in \cs{@tempb} notwendig.
%    \begin{macrocode}
%<*class>
    \def\Key##1##2{%
      \edef\@tempb{\IfBooleanTF{#1}{macros}{key}}%
    }%
    \@tempa\Term{terms}{term}%
    \@tempa\PageStyle{elements}{pgs}%
    \@tempa\Font{elements}{font}%
    \@tempa\Color{elements}{clr}%
%</class>
%    \end{macrocode}
% Nachdem alle Markup-Befehle lokal redefiniert wurden, wird der nun angegebene 
% Befehl ausgeführt, was zum eigentlichen Definieren von \cs{@tempb} führt.
%    \begin{macrocode}
    #3%
%    \end{macrocode}
% Damit alle Änderungen der temporären Makros lokal bleiben, wird das Ergebnis 
% nach der Gruppe in das erste obligatorische Argument expandiert.
%    \begin{macrocode}
    \edef\tud@reserved{%
      \noexpand\endgroup%
      \def\noexpand#2{\@tempb}%
    }%
  \tud@reserved%
}
%    \end{macrocode}
% \end{macro}^^A \@getattribution
%
% \subsubsection{Markup von Variablen, Parametern etc.}
%
% \begin{macro}{\Path}
% \changes{v2.02}{2014/07/22}{\cs{DeclareRobustCommand} ersetzt durch
%   \cs{newrobustcmd} aus \pkg{etoolbox}}^^A
% \begin{macro}{\PValue}
% \begin{macro}{\PName}
% \begin{macro}{\PValueName}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\PSet}
% \begin{macro}{\PBoolean}
% \begin{macro}{\PBName}
% \changes{v2.02}{2014/11/12}{neu}^^A
% \begin{macro}{\Parameter}
% \begin{macro}{\OParameter}
% \begin{macro}{\LParameter}
% \begin{macro}{\OLParameter}
% \begin{macro}{\PParameter}
% \begin{macro}{\POParameter}
% \changes{v2.03}{2015/01/25}{neu}^^A
% \begin{macro}{\textOR}
% Diese Befehle dienen zum Auszeichnen von obligatorischen und optionalen 
% Parametern und Befehlen oder bestimmten Wertzuweisungen.
%    \begin{macrocode}
\newrobustcmd*\Path[1]{\mbox{\texttt{#1}}}
\newrobustcmd*\PValue[1]{\mbox{\texttt{#1}}}
\newrobustcmd*\PName[1]{\PValue{\textsl{<#1>}}}
\newrobustcmd*\PValueName[1]{\PName{#1}}
\newrobustcmd*\PSet{\PName{Einstellung}}
\newrobustcmd*\PBoolean{\PName{Ein-Aus-Wert}}
\newrobustcmd*\PBName[1]{\PBoolean\textOR\PName{#1}}
\newrobustcmd*\Parameter[1]{\mbox{\texttt{\{}\PName{#1}\texttt{\}}}}
\newrobustcmd*\OParameter[1]{\mbox{\texttt{[}\PName{#1}\texttt{]}}}
\newrobustcmd*\LParameter{\mbox{\texttt{[}\PName{Parameterliste}\texttt{]}}}
\newrobustcmd*\OLParameter[1]{%
  \mbox{\texttt{[}\PName{#1}\textOR\PName{Parameterliste}\texttt{]}}%
}
\newrobustcmd*\PParameter[1]{\mbox{\texttt{\{#1\}}}}
\newrobustcmd*\POParameter[1]{\mbox{\texttt{[#1]}}}
\newrobustcmd*\textOR{\PValue{\,\textbardbl\,}}
%    \end{macrocode}
% \end{macro}^^A \textOR
% \end{macro}^^A \POParameter
% \end{macro}^^A \PParameter
% \end{macro}^^A \OLParameter
% \end{macro}^^A \LParameter
% \end{macro}^^A \OParameter
% \end{macro}^^A \Parameter
% \end{macro}^^A \PBName
% \end{macro}^^A \PBoolean
% \end{macro}^^A \PSet
% \end{macro}^^A \PValueName
% \end{macro}^^A \PName
% \end{macro}^^A \PValue
% \end{macro}^^A \Path
% \begin{macro}{\@onlyPValue}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \changes{v2.03}{2015/02/02}{\cs{relax} mit \cs{@empty} ersetzt}^^A
% Dieser Befehl unterdrückt die Ausgabe fast aller Parameter. Lediglich die
% Inhalte aus den beiden Makros \cs{PValue} und \cs{PValueName} werden 
% ausgeführt. Dies wird für die Generierung von Labeln sowie die Erstellung der 
% Einträge für index und Änderungsliste benötigt, um die Angabe von speziellen 
% Werten bei Schlüsseln zu erhalten.
%    \begin{macrocode}
%<*class>
\newcommand*\@onlyPValue{%
  \let\PValue\@firstofone%
  \let\PName\@gobble%
  \let\PValueName\@firstofone%
  \let\PSet\@empty%
  \let\PBoolean\@empty%
  \let\PBName\@gobble%
  \let\Parameter\@gobble%
  \let\OParameter\@gobble%
  \let\LParameter\@empty%
  \let\OLParameter\@gobble%
  \let\PParameter\@gobble%
  \let\POParameter\@gobble%
  \let\textOR\relax%
  \let\emph\@firstofone%
}
%</class>
%    \end{macrocode}
% \end{macro}^^A \@onlyPValue
% \begin{macro}{\@TUDScript}
% \changes{v2.02}{2014/08/16}{neu}^^A
% Der expandierbare Befehl von \TUDScript.
%    \begin{macrocode}
\newcommand*\@TUDScript{TUD-KOMA-Script}
%    \end{macrocode}
% \end{macro}^^A \@TUDScript
% \begin{macro}{\@gobblemarkup}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Dieser Befehl definiert alle Markup-Befehle in der Form um, dass diese nur 
% noch das eigentliche Hauptargument unformatiert durchreichen. Dies wird für 
% die Erstellung von Label und Indexeinträgen benötigt. Die Sternversion führt 
% dies auch noch für die Auszeichnung von Parametern etc. durch.
%    \begin{macrocode}
\NewDocumentCommand\@gobblemarkup{s}{%
  \let\Application\@Application%
  \let\Distribution\@Distribution%
  \let\Engine\@Engine%
  \let\File\@File%
  \let\Class\@Class%
  \let\Package\@Package%
  \let\Option\@Option%
  \let\Environment\@Environment%
  \let\Macro\@Macro%
  \let\Length\@Length%
  \let\Counter\@Counter%
%<*class>
  \let\Key\@Key%
  \let\Term\@Term%
  \let\PageStyle\@PageStyle%
  \let\Font\@Font%
  \let\Color\@Color%
%</class>
  \IfBooleanF{#1}{%
    \let\PValue\@firstofone%
    \let\PName\@firstofone%
    \let\PValueName\@firstofone%
    \let\PSet\relax%
    \let\PBoolean\relax%
    \let\PBName\@firstofone%
    \let\Parameter\@firstofone%
    \let\OParameter\@firstofone%
    \let\LParameter\relax%
    \let\OLParameter\@firstofone%
    \let\PParameter\@firstofone%
    \let\POParameter\@firstofone%
    \let\textOR\relax%
    \let\hologoRobust\@firstofone%
    \let\TUDScript\@TUDScript%
    \def\_{-}%
    \protected\def~{~}%
  }%
}
%    \end{macrocode}
% Mit dem zuvor definierten Makro \cs{@gobblemarkup} wird gleich dafür Sorge 
% getragen, dass die Auszeichnungsbefehle für PDF-Outline-Einträge korrekt 
% funktionieren.
%    \begin{macrocode}
\AfterPackage*{hyperref}{%
  \expandafter\pdfstringdefDisableCommands\expandafter{\@gobblemarkup}%
}
%    \end{macrocode}
% \end{macro}^^A \@gobblemarkup
%
% \subsubsection{Erstellung und Validierung von Labeln}
%
% \begin{macro}{\@templabel}
% \changes{v2.05}{2015/11/03}{neu}^^A
% \begin{macro}{\@formatlabel}
% \changes{v2.05}{2015/11/03}{neu}^^A
% In \cs{@templabel} werden im weiteren Verlauf die durch \cs{@getlabel} oder 
% \cs{@getattribution} erzeugten (Sub-)Label gespeichert. Mit \cs{@formatlabel} 
% wird innerhalb von \cs{@@Label} und \cs{@@getlabel} dafür gesorgt, dass
% sowohl geschützte Leerzeichen als auch eingabekodierungsabhängige Zeichen
% richtig für ein Label umgesetzt werden. Auch durch \cs{NoCaseChange} in 
% Überschriften geschützte Inhalte werden direkt übernommen.
%    \begin{macrocode}
\newcommand*\@templabel{}
\newcommand*\@formatlabel{%
  \def~{-}%
  \let\IeC\@firstofone%
  \def\"##1{##1e}%
  \def\ss{ss}%
  \let\NoCaseChange\@firstofone%
}
%    \end{macrocode}
% \end{macro}^^A \@formatlabel
% \end{macro}^^A \@templabel
% \ToDo{Implementierung für Paket \pkg{tudscrtutorial}}[v2.05]
% \begin{macro}{\@getlabel}
% \changes{v2.05}{2015/11/03}{neu}^^A
% \begin{macro}{\@@getlabel}
% \changes{v2.05}{2015/11/03}{neu}^^A
% Für den Befehl \cs{@getlabel} wird das zweite obligatorische Argument 
% (\val{\#3}) für gewöhnlich in der Form
% \val{\{\string\Bundle{\marg{Klasse/Paket}}:\string\Markup{\marg{Element}}\}}
% angegeben. Dieses wird beim Einlesen direkt an die beiden Argumentprozessoren 
% \cs{SplitArgument}\val{\{2\}\{:\}} gefolgt von \cs{@Label} weitergereicht. 
% Nach dem Zusammenspiel enthält das zweite obligatorische Argument ein Label 
% der Form \meta{Bundlepräfix}\val{:}\meta{Labelpräfix}\val{:}\meta{Element}.
% Auch die Angabe eines Makros als zweites obligatorische Argument, welches das 
% Label in der richtigen Formatierung enthält, ist möglich.
%    \begin{macrocode}
\NewDocumentCommand\@getlabel{sm>{\@Label}>{\SplitArgument{2}{:}}md==}{%
%    \end{macrocode}
% Mit \cs{@@getlabel} wird das im zweiten obligatorischen Argument (\val{\#3}) 
% generierte Label in das im ersten obligatorischen Argument (\val{\#2})
% angegebenen Makro gespeichert und ggf. diesem das letzte optionale Argument
% für einen speziellen Wert zu einem Schlüssel angehangen.
%    \begin{macrocode}
  \@@getlabel#2{#3}=#4=%
%    \end{macrocode}
% Die Sternversion von \cs{@getlabel} wird für das Definieren von Labeln bei 
% Deklarationen etc. genutzt. Sollte diese verwendet worden sein, ist die 
% Generierung beendet.
%    \begin{macrocode}
  \IfBooleanF{#1}{%
%    \end{macrocode}
% Andernfalls wird geprüft, ob das erstellte Label überhaupt existiert. Sollte 
% dies nicht der Fall sein wird ein passendes Label für den gegebenen Schlüssel 
% ohne speziellen Wert gesucht.
%    \begin{macrocode}
    \@tempswafalse%
    \tud@iflabelexists{#2}{%
      \@tempswatrue%
    }{%
      \IfValueT{#4}{%
        \@@getlabel\tud@reserved{#3}%
        \tud@iflabelexists{\tud@reserved}{%
          \let#2\tud@reserved%
          \@tempswatrue%
        }{}%
      }%
    }%
%    \end{macrocode}
% Wurde auch danach noch kein passendes Label gefunden, gibt es u.\,U. eine 
% letzte Möglichkeit, ein passendes Label zu finden. Wird in der Dokumentation 
% gerade ein Paket oder eine sich von den Hauptklassen unterscheidende Klasse
% aus dem \TUDScript-Bundle erläutert (Umgebungen \env{Bundle}, \env{Bundle!}), 
% so wird eventuell auf ein Element aus ebendiesen Hauptklassen referenziert. 
% In diesem Fall wird \cs{@getdefaultlabel} aufgerufen, um den Bundlepräfix
% für das Label entsprechend zu setzen.
%    \begin{macrocode}
    \if@tempswa\else%
      \tud@ifbundle{\@getdefaultlabel#2{#3}=#4=}{}%
    \fi%
  }%
}
%    \end{macrocode}
% Mit \cs{@@getlabel} wird das generierte Label in das beim Aufruf von 
% \cs{@getlabel} angegebenen Makro gespeichert.
%    \begin{macrocode}
\NewDocumentCommand\@@getlabel{mmd==}{%
  \def#1{#2}%
%    \end{macrocode}
% Sollte optional ein spezieller Wert für einen Schlüssel übergeben worden 
% sein, wird dieser ggf. angehängt.
%    \begin{macrocode}
  \IfValueT{#3}{%
    \begingroup%
%    \end{macrocode}
% Dies geschieht jedoch nur für Werte, welche im optionalen Argument mit
% \cs{PValue} bzw. \cs{PValueName} angegeben wurden.
%    \begin{macrocode}
      \@onlyPValue%
      \@formatlabel%
      \ifstr{#3}{}{%
        \def\tud@reserved{\endgroup}%
      }{%
        \protected@edef\tud@reserved{%
          \noexpand\endgroup%
          \appto\noexpand#1{=#3}%
        }%
      }%
    \tud@reserved%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \@@getlabel
% \end{macro}^^A \@getlabel
% \begin{macro}{\@getdefaultlabel}
% \changes{v2.05}{2015/11/04}{neu}^^A
% \begin{macro}{\@@getdefaultlabel}
% \changes{v2.05}{2015/11/04}{neu}^^A
% Diese beiden Makros werden genutzt, um mit \cs{@getlabel} innerhalb der
% Umgebungen \env{Bundle} und \env{Bundle!} für den Fall, dass ein gesuchtes 
% Label für das aktuelle Bundle-Element nicht existiert, nach diesem Element
% in den existierenden Labels der Hauptklassen zu suchen.
%
% Dabei wird das bereits generierte Label durch \cs{@getdefaultlabel} in seine 
% drei Hauptbestandteile zur WEiterverarbeitung zerlegt.
%    \begin{macrocode}
\NewDocumentCommand\@getdefaultlabel{m>{\SplitArgument{2}{:}}mr==}{%
  \@@getdefaultlabel{#1}#2=#3=%
}
%    \end{macrocode}
% Durch \cs{@@getdefaultlabel} wird als erstes geprüft, ob der Bundlepräfix 
% bereits dem Standardpräfix für die Hauptklassen entspricht. Nur wenn dies 
% nicht der Fall ist, wird die Labelgenerierung abermals ausgeführt.
%    \begin{macrocode}
\NewDocumentCommand\@@getdefaultlabel{mmmmr==}{%
  \edef\tud@reserved{\expandafter\detokenize\expandafter{\@bundledefault}}%
  \ifstr{\tud@reserved}{#2}{}{%
%    \end{macrocode}
% Dabei erfolgt der Aufruf logischerweise mit dem richtigen Bundlepräfix. 
%    \begin{macrocode}
    \@getlabel#1{\@bundledefault:#3:#4}=#5=%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \@@getdefaultlabel
% \end{macro}^^A \@getdefaultlabel
% \begin{macro}{\tud@iflabelexists}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit dem Befehl \cs{tud@iflabelexists} wird eine Fallunterscheidung bezüglich
% der Existenz eines Labels in der Form
% \meta{Bundlepräfix}\val{:}\meta{Labelpräfix}\val{:}\meta{Element} 
% durchgeführt. Das zu prüfende Label ist in gleicher Weise wie bei 
% \cs{@getlabel} anzugeben. Je nachdem, ob ein existierendes Label gefunden
% wird oder nicht, wird das zweite oder das dritte obligatorische Argument
% ausgeführt.
%    \begin{macrocode}
\NewDocumentCommand\tud@iflabelexists{>{\@Label}>{\SplitArgument{2}{:}}m}{%
  \ifcsdef{r@#1}{%
    \expandafter\@firstoftwo%
  }{%
    \expandafter\@secondoftwo%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@iflabelexists
% \ToDo{Implementierung für Paket \pkg{tudscrtutorial}}[v2.05]
% \begin{macro}{\@Label}
% \changes{v2.05}{2015/11/03}{neu}^^A
% \begin{macro}{\@@Label}
% \changes{v2.05}{2015/11/03}{neu}^^A
% Das Makro \cs{@@Label} ist ein Argumentprozessor, welcher als Eingabe genau 
% drei Argumente für das Erstellen eines gültigen Labels erwartet. Er wird 
% sowohl von \cs{@getlabel} als auch von \cs{tud@iflabelexists} verwendet. Vor 
% der Ausführung von \cs{@Label} muss das zu behandelnde Argument bereits mit 
% \cs{SplitArgument}\val{\{2\}\{:\}} aufgerufen worden sein. Diese Eigenheit
% macht die Definition von \cs{@Label} notwendig, um das Ergebnis der zuvor
% vorgenommenen Argumentaufspaltung verarbeiten zu können, in dem dieses an
% \cs{@@Label} weitergereicht wird. Eine direkte Integration der Spaltung des
% Argumentes in \cs{@Label} ist aufgrund des mehrmaligen rekursiven Aufrufs von
% \cs{@Label} nicht möglich.
%
% Mit dem Argumentprozessor \cs{@Label} wird es möglich, an die beiden Makros
% \cs{@getlabel} und \cs{tud@iflabelexists} entweder ein einzelnes Makro,
% welches das Label bereits beinhaltet, als auch einen Markup-Befehl ggf. mit
% einem Bundlepräfix zu übergeben. In beiden Fällen wird ein eindeutiges Label 
% in der Form \meta{Bundlepräfix}\val{:}\meta{Labelpräfix}\val{:}\meta{Element}
% generiert und als resultierendes Argument an das aufrufenden Makro übergeben.
%    \begin{macrocode}
\NewDocumentCommand\@Label{m}{%
  \@@Label#1%
}
%    \end{macrocode}
% Es gibt insgesamt vier verschiedene Varianten der Argumentenübergabe an den
% Argumentprozessor \cs{@@Label}.
% \begin{description}\let\itshape\slshape
%    \item[\cs{@@Label}\val{\ignorespaces
%      \{\string\LabelMakro\}\{-NoValue-\}\{-NoValue-\}\ignorespaces
%    }]\strut\newline 
%      Das Label ist bereits in \cs{LabelMakro} enthalten und soll expandiert 
%      werden. Dabei spielt es keine Rolle, ob die durch \val{:} getrennten
%      Bestandteile innerhalb des Labels schon als einfacher String oder in der 
%      Markupform gegeben sind.
%    \item[\cs{@@Label}\val{\ignorespaces
%      \{-NoValue-\}\{\string\Markup{\marg{Element}}\}\{-NoValue-\}\ignorespaces
%    }]
%      \strut\newline Das Label soll für ein Markupelement genriert werden, 
%      wobei in jedem Fall der Inhalt aus \cs{@bundle} als Bundlepräfix genutzt 
%      wird.
%    \item[\cs{@@Label}\val{\ignorespaces
%      \{\string\Class\marg{Klasse}/\string\Package\marg{Paket}\}\ignorespaces
%      \{\string\Markup{\marg{Element}}\}\ignorespaces
%      \{-NoValue-\}\ignorespaces
%    }]\strut\newline 
%      Das Label soll für ein Markupelement generiert werden. 
%      Dabei wurde explizit ein Paket oder eine Klasse aus dem Bundle angegeben 
%      oder implizit das Makro \cs{@bundle} als Argument verwendet, welches
%      innerhalb der Umgebungen \env{Bundle} und \env{Bundle!} auf das/die
%      aktuell beschriebene Paket/Klasse gesetzt wurde.
%    \item[\cs{@@Label}\val{\ignorespaces
%      \marg{Bundlepräfix}\ignorespaces
%      \marg{Labelpräfix}\ignorespaces
%      \marg{Element}\ignorespaces
%    }]\strut\newline 
%      Das Label ist bereits vollständig bestimmt und die Argumente werden 
%      entweder als String oder als Markup übergeben. Auch Mischformen sind 
%      möglich. In diesem Fall wird es einfach wieder zusammengesetzt. Diese
%      Variante tritt durch rekursiven Aufruf des Argumentprozessors auf.
% \end{description}
%    \begin{macrocode}
\NewDocumentCommand\@@Label{mmm}{%
  \begingroup%
%    \end{macrocode}
% Zu Beginn werden die Markup-Befehle auf ihre expandierbaren Varianten gesetzt 
% und die zusätzlichen Redefinitionen für die Labelgenerierung aktiviert.
%    \begin{macrocode}
    \@gobblemarkup%
    \@formatlabel%
%    \end{macrocode}
% Sind alle drei Bestandteile bereits vorhanden, wird das Label einfach wieder
% zusammengesetzt.
%    \begin{macrocode}
    \IfValueTF{#3}{%
      \edef\@tempa{#1:#2:#3}%
    }{%
%    \end{macrocode}
% Hier geschieht der eigentliche Vorgang der Labelgenerierung. Dabei wird mit 
% dem Makro \cs{@getattribution} der für den jeweiligen Markup-Befehl aus dem
% zweiten obligatorischen Argument spezifische Labelpräfix generiert. Abhängig
% davon, ob im ersten obligatorischen Argument ein spezieller Bundlepräfix
% angegeben wurde, wird dieser entweder verwendet oder aber implizit auf den
% Inhalt aus \cs{@bundle} zurückgegriffen.
%    \begin{macrocode}
      \IfValueTF{#2}{%
        \@getattribution\@tempb{#2}%
        \IfValueTF{#1}{%
          \edef\@tempa{#1:\@tempb:#2}%
        }{%
          \edef\@tempa{\@bundle:\@tempb:#2}%
        }%
      }{%
%    \end{macrocode}
% Wurde lediglich ein Makro angegeben, wird dieses einfach expandiert.
%    \begin{macrocode}
        \edef\@tempa{#1}%
      }%
    }%
%    \end{macrocode}
% Das Ergebnis der Labelgenrierung wurde für alle der behandelten Fälle in 
% \cs{@tempa} geschrieben. Abschließnd wird \cs{ProcessedArgument} nach der 
% Gruppe mit dessen Inhalt definiert. Dabei werden bei der Expansion die 
% catcodes aller Zeichen in Tokens der Klasse \val{other} gewandelt, um diese 
% später sicher vergleichen zu können.
%    \begin{macrocode}
    \edef\@tempc{%
      \noexpand\endgroup%
      \def\noexpand\ProcessedArgument{%
        \expandafter\detokenize\expandafter{\@tempa}%
      }%
    }%
  \@tempc%
}
%    \end{macrocode}
% \end{macro}^^A \@@Label
% \end{macro}^^A \@Label
%
% \iffalse
%<*class>
% \fi
%
% \subsubsection{Abarbeitung der Markup-Befehle}
%
% Die Festlegung des individuellen Markups der Einzelnen Elemente erfolgt bei 
% der Definition mit \cs{@SetMarkupFormat}. Bei der Nutztung der Markup-Befehle
% im Fließtext wird zum einen das in \cs{@MarkupFormat} individuell definierte
% Markup umgesetzt und zum anderen wird dabei gleich automatisch ein Eintrag
% für das Element im Index erzeugt.
%
% In der Klasse \cls{tudscrmanual} werden die Markup-Befehle zusätzlich auch 
% als Argument der Umgebung \env{Declaration} genutzt. Für diese Verwendung
% kommt die Definiton von \cs{@MarkupDeclare} und ggf. \cs{@MarkupSuffix} zum 
% Einsatz. 
% \ToDo{Implementierung für Paket \pkg{tudscrtutorial}}[v2.05]
%
% \begin{macro}{\@ProcessMarkup}
% \changes{v2.02}{2014/10/08}{Markup für Index und Fließtext getrennt}^^A
% \changes{v2.02}{2014/10/09}{Anpassung für Umgebung \env{Declaration*}}^^A
% \changes{v2.05}{2015/11/05}{Neuimplementierung}^^A
% \begin{macro}{\@SuppressMarkup}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@suppressmarkup}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Der Befehl \cs{@ProcessMarkup} ist das Herzstück der Auszeichnungen aller
% Elemente. Das obligatorische Argument ist das auszuzeichnende Element selbst,
% welches im weiteren Verlauf der Abarbeitung expandiert wird. Darauf folgen 
% mehrere optionale Argumente. Mit \val{=}\meta{Wert}\val{=} kann ein Wert für
% einen Schlüssel angegeben werden, was aktuell von \cs{Option} und \cs{Key} 
% genutzt wird. Darauf folgend kann in einem ordinären optionalen Argument ein
% Suffix für die Fließtextausgabe angegeben werden, was von \cs{Distribution} 
% sowie \cs{Environment}, \cs{Macro} und \cs{Color} verwendet wird.
%
% Mit dem optionalen Argument in runden Klammern kann eine Klasse oder ein 
% Paket aus dem \TUDScript-Bundle angegeben werden, auf welche sich das
% aktuelle auszuzeichnende Element bezieht und ggf. das Label und der
% Indexeintrag dementsprechend erzeugt werden sollen. Verwendet wird es mit: 
% \val{(\string\Class\marg{Klasse}/\string\Package\marg{Paket})} 
%
% Das optionale Argument in Guillemets wird von \cs{Package} benötigt, um ggf.
% die automatisch generierten Links auf CTAN anzupassen. Zuletzt kann mit 
% \val{'}\meta{Referenzvariante}\val{'} der automatisch erzeugte Querverweis in
% verschiedenen Varianten formatiert werden. Der vollständige Funktionsaufruf:
% \newline\begingroup\scriptsize
% \cs{@ProcessMarkup}\marg{Element}\val{=}\meta{Wert}\val{=}\ignorespaces
% \oarg{Ausgabesuffix}\parg{Bundleelement}\ignorespaces
% \val{<}\meta{CTAN-Paketname}\val{>}\val{'}\meta{Referenzvariante}\val{'}
% \endgroup
%
% In eingen Fällen ist es beim Aufruf eines Markup-Befehls nicht erwünscht, 
% dass dieser auch tatsächlich ausgegeben wird. Für diesen Fall wird gleich zu
% Beginn der Befehl \cs{@suppressmarkup} definiert, der dies ermöglicht.
%    \begin{macrocode}
\newcommand*\@suppressmarkup{\let\@ProcessMarkup\@SuppressMarkup}
\NewDocumentCommand\@SuppressMarkup{md==od()d<>d''}{}%
%    \end{macrocode}
% Nun folgt die eigentliche Befehlsdefinition.
%    \begin{macrocode}
\NewDocumentCommand\@ProcessMarkup{md==od()d<>d''}{%
%    \end{macrocode}
% Gleich zu Beginn wird mit dem Schalter \cs{if@declare} geprüft, ob die der 
% Markup-Befehl in einer der Deklarationsumgebungen oder anderweitig genutzt 
% wird. Für den ersten Fall erfolgt die Weiterverarbeitung der Argumente mit
% \cs{ProcessMarkup@Declare}, andernfalls kommt \cs{ProcessMarkup@Inline} zum
% Einsatz. Da beide Makros die gleiche Reihenfolge der Argumente verlangen,
% wird der jeweilige Befehlsaufruf über ein Token-Register realisiert, womit
% das Zusammensetzen der notwendigen Übergabewerte erleichtert wird. 
%
% Die Fallunterscheidung betrifft des Weiteren die Erzeugung des Labels. Für 
% eine Deklaration wird die Sternversion von \cs{@getlabel} verwendet, welche 
% ein Label aus den gegebenen Argumenten zusammensetzt. Ist keine Deklaration 
% aktiv, versucht \cs{@getlabel} ein gültiges, schon vorhandenes Label zu 
% verwenden. Das generierte Label wird anschließend als erstes Argument für das 
% weiterverabeitende Makro verwendet.
%    \begin{macrocode}
  \if@declare%
    \tud@toks@{\ProcessMarkup@Declare}%
    \@getlabel*\@templabel{\@bundle:#1}=#2=%
  \else%
    \tud@toks@{\ProcessMarkup@Inline}%
    \@getlabel\@templabel{#4:#1}=#2=%
  \fi%
  \eaddto@hook\tud@toks@{\expandafter{\@templabel}}%
%    \end{macrocode}
% Danach wird der Inhalt des im ersten Argument übergebenen Markup-Befehls in 
% einer Gruppe ein temporäres Makro expandiert und als zweites Argument für die 
% Weiterverarbeitung genutzt.
%    \begin{macrocode}
  \begingroup%
    \@gobblemarkup*%
    \protected@edef\tud@reserved{%
      \noexpand\endgroup%
      \def\noexpand\tud@reserved{#1}%
    }%
  \tud@reserved%
  \eaddto@hook\tud@toks@{\expandafter{\tud@reserved}}%
%    \end{macrocode}
% Es folgen gegebenenfalls die optionalen Argument \val{=}\meta{Wert}\val{=} 
% sowie \oarg{Ausgabesuffix}~-- falls diese angegeben wurden.
%    \begin{macrocode}
  \IfValueT{#2}{\addto@hook\tud@toks@{=#2=}}%
  \IfValueT{#3}{\addto@hook\tud@toks@{[#3]}}%
%    \end{macrocode}
% Erfolgt gerade eine Deklaration, wird mit dem Schalter \cs{if@openindex} 
% eigentlich unterschieden, ob ein öffnender oder ein schließender Indexeintrag
% erzeugt werden soll. Dieser wird mit \cs{@@ProcessIndex} erstellt. Um den 
% schließenden Indexeintrag zu erzeugen, ist die Ausführung des Hauptargumentes 
% der Deklarationsumgebung am Ende dieser notwendig. Dabei soll allerdings das
% Markup nicht noch ein weiteres Mal ausgegeben werden. Deshalb wird der
% Schalter hier genutzt, um lediglich zu Beginn einer Deklaration das Markup 
% auszuführen. Dabei Angaben für eine \val{'}\meta{Referenzvariante}\val{'}
% nicht erlaubt.
%   \begin{macrocode}
  \if@declare%
    \if@openindex%
      \IfValueT{#6}{%
        \ClassWarning{tudscrmanual}{%
          It is not possible to use any cross-reference\MessageBreak%
          shorthand like '#6' within the arguments of\MessageBreak%
          the environment `Declaration'%
        }%
      }%
%    \end{macrocode}
% Für ein eventuell notwendiges Debugging, wird der nachfolgend aufgerufene
% Befehl \cs{ProcessMarkup@Declare} mit seinen Argumenten ggf. in das Log-File 
% geschrieben. Anschließend erfolgt der Aufruf.
%    \begin{macrocode}
      \tud@trace@markup{declare}{\the\tud@toks@}%
      \the\tud@toks@%
    \fi%
%    \end{macrocode}
% Findet der Auszeichnungsbefehl außerhalb einer Umgebung für Deklarationen
% Verwendung, werden die optionalen Argumente für einen CTAN-Link 
% \val{<}\meta{CTAN-Paketname}\val{>} sowie die Formatierung des Querverweise
% \val{'}\meta{Referenzvariante}\val{'} hinzugefügt~-- falls vorhanden. Dies 
% geschieht jedoch nur, wenn das Markup nicht innerhalb eines Index erfolgt, 
% da hier URL-Hyperlinks und formatierte Querverweise unerwünscht sind. Mit 
% der Angabe eines leeren Argumentes \val{<>} wird gar kein Hyperlink erstellt.
%    \begin{macrocode}
  \else%
    \if@tud@index\else%
      \IfValueT{#5}{%
        \ifstr{#5}{}{}{\addto@hook\tud@toks@{<http://www.ctan.org/pkg/#5>}}%
      }%
      \IfValueT{#6}{\addto@hook\tud@toks@{'#6'}}%
    \fi%
%    \end{macrocode}
% Danach erfolgt mit \cs{ProcessMarkup@Inline} die Ausführung der Auszeichnung,
% wobei auch hier ggf. ein Debug-Eintrag ins Log-File geschrieben wird. 
%    \begin{macrocode}
    \tud@trace@markup{output}{\the\tud@toks@}%
    \the\tud@toks@%
  \fi%
%    \end{macrocode}
% Ganz zum Schluss wird noch für beide Fälle geprüft, ob \parg{Bundleelement} 
% angegeben wurde. Ist dies der Fall, wird zum einen das \meta{Bundleelement}
% zur Überprüfung ggf. in das Log-File geschrieben, zum anderen wird geprüft, 
% ob für das \meta{Element} überhaupt ein Link definiert wurde, der verwendet
% werden soll. Ist dies nicht der Fall, wird eine Warnung ausgegeben. Dies ist 
% möglich, da durch die automatische Labelgenerierung normalerweise alle nicht 
% existierenden Labels mit \meta{Bundlepräfix} auf \cs{@bundledefault} zielen 
% müssten. Für die wenigen Fälle, in denen gezielt auf einen Querverweis 
% verzichtet werden soll, kann ein leeres Argument \val{()} angegeben werden.
%    \begin{macrocode}
  \IfValueT{#4}{%
    \ifstr{#4}{}{}{%
      \tud@trace@bundle{#4}%
      \tud@iflabelexists{\@templabel}{}{%
        \ClassWarning{tudscrmanual}{No existing label \@templabel\space for #4}%
      }%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \@suppressmarkup
% \end{macro}^^A \@SuppressMarkup
% \end{macro}^^A \@ProcessMarkup
% \begin{macro}{\ProcessMarkup@Declare}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{ProcessMarkup@Declare} wird die formatierte Ausgabe der Deklaration 
% realisiert. Wie diese genau gestaltet ist, wird durch \cs{tud@declare@type}
% bestimmt. Folgende Werte sind möglich:
% \begin{description}
% \item[\val{0}:] Ausgabe von Markup, Erzeugen eines Labels
% \item[\val{1}:] Ausgabe von Markup, kein Label
% \item[\val{2}:] keine Ausgabe, aber Erzeugen eines Labels
% \item[\val{3}:] keine Ausgabe, Erzeugen eines nach oben verschobenen Labels
% \end{description}
% Normalerweise kommt die erste Variante zum Einsatz. Die zweite Variante wird 
% genutzt, wenn mit mit der Umgebung \env{Obsolete} zwar eine Ausgabe aber kein 
% Label erstellt werden soll. Dies wird verwendet, um bei der Beschreibung 
% veralteter Werte oder Parameter diese im Kontext ihrer Option oder Umgebung
% bzw. ihres Befehls anzugeben.
%
% Die dritte Version kommt bei Erklärungen mit der Umgebung \env{Declaration*}
% zum Einsatz, welche im Fließtext verwendet wird und kein Markup, wohl aber
% eine Label für das beschriebene Element erzeugt werden soll. Für die vierte
% Variante, welche die Umgebung \env{Bundle!} betrifft, gilt dies im Prinzip
% gleichermaßen. Allerdings wird diese Umgebung zu Beginn der Deklarationen
% eines Bundleelements direkt nach einer Überschrift verwendet. Hier soll der 
% erzeugte Link direkt auf der Höhe der Überschrift platziert werden.
%
% Das erste Argument enthält das zu definierende Label, gefolgt vom Element, 
% welches ausgezeichnet werden soll. Die tatsächliche Ausgabe erfolgt mit dem 
% Makro \cs{@MarkupOutput}. An dieses werden die beiden optionalen Argumente 
% \val{=}\meta{Wert}\val{=} und \oarg{Ausgabesuffix} direkt weitergereicht.
%
% Vor der eigentlichen Ausführung wird mit \cs{@CheckMarkupFormat} geprüft, ob 
% für das auszuzeichnende Element mit \cs{@SetMarkupFormat} überhaupt eine 
% Ausgabeformatierung defineirt wurde. Nach der Ausgabe wird diese Formatierung 
% mit \cs{@ClearMarkupFormat} zurückgesetzt.
%    \begin{macrocode}
\NewDocumentCommand\ProcessMarkup@Declare{mmd==o}{%
  \@CheckMarkupFormat%
  \ifcase\tud@declare@type%
    \tudhyperdef{#1}%
    \@MarkupOutput{#2}=#3=[#4]%
  \or%
    \@MarkupOutput{#2}=#3=[#4]%
  \or%
    \tudhyperdef{#1}%
  \or%
    \tudhyperdef*{#1}%
  \fi%
  \@ClearMarkupFormat%
}
%    \end{macrocode}
% \end{macro}^^A \ProcessMarkup@Declare
% \begin{macro}{\ProcessMarkup@Inline}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{ProcessMarkup@Inline} wird die formatierte Ausgabe außerhalb der 
% Deklarationsumgebungen umgesetzt. Dabei entsprechen die ersten vier Argument
% denen des Befehls \cs{ProcessMarkup@Declare} und werden bis auf das Label
% ebenso an \cs{@MarkupOutput} übergeben, nachdem mit \cs{@CheckMarkupFormat}
% auf eine exisierende Markup-Definition geprüft wurde.
%    \begin{macrocode}
\NewDocumentCommand\ProcessMarkup@Inline{mmd==od<>d''}{%
  \@CheckMarkupFormat%
%    \end{macrocode}
% Um die aktuelle Definiton der temporären Makros nicht zu ändern, erfolgt die
% formatierte Ausgabe in einer Gruppe. Dabei wird in \cs{@tempc} die minimale 
% Variante gesichert.
%    \begin{macrocode}
  \begingroup%
    \def\@tempc{\@MarkupOutput{#2}=#3=[#4]}%
%    \end{macrocode}
% Danach wird eine Fallunterscheidung anhand des im ersten Argument übergebenen 
% Labels getroffen. Existiert dieses, soll das Element als Hyperlink ausgegeben 
% werden. Die Definition dafür wird in \cs{@tempa} gespeichert.
%    \begin{macrocode}
    \tud@iflabelexists{#1}{%
      \def\@tempa{\hyperref{}{\jobname}{#1}{\@tempc}}%
%    \end{macrocode}
% Anschließend wird \cs{@tempb} ggf. für den erweiterten Querverweis verwendet.
% Wurde ein Format für den Querverweis gesetzt, muss dieses validiert werden. 
% Gültige Kürzel sind \val{'auto'}, \val{'page'} und \val{'full'}. Damit werden
% die erzeugten Querverweise um den Gliederungsabschnitt, die Seite oder beides
% ergänzt. Außerdem kann mit \val{'none'} der Hyperlink komplett unterbunden
% werden. Für \cs{Package} kann mit zusätzlich \val{'url'} noch der CTAN-Link 
% forciert werden, auch wenn eigentlich ein Label für das Paket exisitiert.
%    \begin{macrocode}
      \let\@tempb\relax%
      \IfValueT{#6}{%
        \def\@tempb{%
          \ClassWarning{tudscrmanual}{%
            You've used the unknown cross-reference\MessageBreak%
            shorthand '#6'. Only 'auto', 'page' and 'full'\MessageBreak%
            as well as 'none' \IfValueT{#5}{or 'url' }are valid%
          }%
        }%
        \ifstr{#6}{auto}{\def\@tempb{ in \autoref{#1}}}{%
        \ifstr{#6}{page}{\def\@tempb{ \vpageref{#1}}}{%
        \ifstr{#6}{ppage}{\def\@tempb{ \reftextfaraway{#1}}}{%
        \ifstr{#6}{full}{\def\@tempb{ in \fullref{#1}}}{%
        \ifstr{#6}{none}{\let\@tempa\@tempc\let\@tempb\relax}{}}}}}%
        \IfValueT{#5}{%
          \ifstr{#6}{url}{\def\@tempa{\href{#5}{\@tempc}}\let\@tempb\relax}{}%
        }%
      }%
    }{%
%    \end{macrocode}
% Existiert kein Label, so wird einfach die minimale Markup-Variante verwendet. 
% Für Pakete wird ein CTAN-Link erzeugt.
%    \begin{macrocode}
      \let\@tempa\@tempc%
      \IfValueT{#5}{\def\@tempa{\href{#5}{\@tempc}}}%
%    \end{macrocode}
% Ein Querverweis kann logischerweise nicht erstellt werden. Wurde dennoch im 
% letzten optionalen Argument eine \val{'}\meta{Referenzvariante}\val{'} für 
% den Querverweis angegeben, wird eine Warnung erzeugt.
%    \begin{macrocode}
      \let\@tempb\relax%
      \IfValueT{#6}{%
        \ifstr{#6}{none}{}{%
          \def\@tempb{%
            \ClassWarning{tudscrmanual}{%
              Label #1\MessageBreak%
              is missing, no cross-reference created.%
            }%
          }%
        }%
      }%
%    \end{macrocode}
% Um im Zweifel nach allen fehlenden Labels im Log-File prüfen zu können, gibt 
% es den passenden Debug-Befehl.
%    \begin{macrocode}
      \tud@trace@lbl@missing{#1}%
    }%
%    \end{macrocode}
% Ganz zum Schluss erfolgt die Ausgabe als Hyperlink mit optional erweitertem 
% Querverweis nicht, wenn gerade eine Überschrift gesetzt wird.
%    \begin{macrocode}
    \ifdin{\@tempc}{\@tempa\@tempb}%
%    \end{macrocode}
% Zum Schluss wird die Formatierung mit \cs{@ClearMarkupFormat} zurückgesetzt.
%    \begin{macrocode}
  \endgroup%
  \@ClearMarkupFormat%
}
%    \end{macrocode}
% \end{macro}^^A \ProcessMarkup@Inline
% \begin{macro}{\@MarkupOutput}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@@MarkupOutput}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Der Befehl \cs{@MarkupOutput} wird für die formatierte Markup-Ausgabe von den
% beiden Makros \cs{ProcessMarkup@Declare} sowie \cs{ProcessMarkup@Inline}
% aufgerufen. Das erste Argument enthält dabei das auszuzeichnende Element.
% Dabei ist die Besonderheit des Makros \cs{Key}\marg{Makro}\marg{Parameter} zu
% beachten, dessen beiden Argumente hier in der Form \marg{Makro!Parameter} 
% übergeben werden. Deshalb wird das erste Argument mit dem Argumentprozessor 
% \cs{SplitArgument}\val{\{1\}\{!\}} getrennt und dann weiter verarbeitet.
%    \begin{macrocode}
\NewDocumentCommand\@MarkupOutput{>{\SplitArgument{1}{!}}md==o}{%
  \@@MarkupOutput#1=#2=[#3]%
}
%    \end{macrocode}
% Danach wird~-- wieder abhängig vom Schalter \cs{if@declare}~-- entweder
% \cs{@MarkupDeclare} oder \cs{@MarkupInline} aufgerufen. Auch hier wird für
% den Befehlsaufruf mit dem dazugehörigen Argument zur Vereinfachung ein
% Token-Register verwendet.
%    \begin{macrocode}
\NewDocumentCommand\@@MarkupOutput{mmd==o}{%
  \if@declare%
    \tud@toks@{\@MarkupDeclare}%
  \else%
    \tud@toks@{\@MarkupInline}%
  \fi%
%    \end{macrocode}
% Ist das aktuelle Element \cs{Key} wird nur das zweite Argument ausgegeben. 
% Das erste wird lediglich für Label und Indexeintrag benötigt.
%    \begin{macrocode}
  \IfValueTF{#2}{%
    \def\@tempa{#2}%
  }{%
    \def\@tempa{#1}%
  }%
%    \end{macrocode}
% Die beiden optionalen Argumente werden ggf. in der gleichen Formatierung 
% ausgegeben. 
%    \begin{macrocode}
  \IfValueT{#3}{\appto\@tempa{=#3}}%
  \IfValueT{#4}{\appto\@tempa{#4}}%
  \eaddto@hook\tud@toks@{\expandafter{\@tempa}}%
  \the\tud@toks@%
}
%    \end{macrocode}
% \end{macro}^^A \@@MarkupOutput
% \end{macro}^^A \@MarkupOutput
% \begin{macro}{\@MarkupInline}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@MarkupDeclare}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@MarkupDeclare@Default}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Die Ausgabe selbst ist alles andere als spektakulär. Die zur Formatierung 
% verwendeten Makros \cs{@MarkupFormat} und \cs{@MarkupSuffix} werden durch
% \cs{@SetMarkupFormat} für jedes Markup-Element individuell definiert.
%    \begin{macrocode}
\newcommand*\@MarkupInline[1]{\mbox{\@MarkupFormat{#1}}}
\newcommand*\@MarkupDeclare{}
\newcommand*\@MarkupDeclare@Default[1]{%
  \begingroup\@MarkupFormat{#1}\endgroup\@MarkupSuffix%
}
%    \end{macrocode}
% \end{macro}^^A \@MarkupDeclare@Default
% \end{macro}^^A \@MarkupDeclare
% \end{macro}^^A \@MarkupInline
% \begin{macro}{\@SetMarkupFormat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@CheckMarkupFormat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@ClearMarkupFormat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@MarkupFormat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@MarkupSuffix}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@uclcnotmath}
%    \begin{macrocode}
\newcommand*\@MarkupFormat{}
\newcommand*\@MarkupSuffix{}
%    \end{macrocode}
% Der Befehl \cs{@SetMarkupFormat} setzt das gewünschte Format für die jeweilge
% Ausgabe. Dieses wird im ersten Argument angegeben. Das ordinäre optionale 
% Argument kann genutzt werden, wenn bei der Deklaration noch eine geanuere 
% Beschreibung oder Spezifizierung erscheinen soll, beispielsweise etwas wie
% \enquote{Umgebung} oder \enquote{Parameter}. Mit dem optionalen Argument in 
% runden Klammern wird es möglich, die Definition von \cs{@MarkupDeclare}, die 
% ohne eine Angabe der von \cs{@MarkupDeclare@Default} entspricht, zu ändern. 
% Dies wird insbesondere von \cs{Environment} genutzt, um bei der Deklaration 
% eine Tabelle zu erzeugen.
%    \begin{macrocode}
\NewDocumentCommand\@SetMarkupFormat{mod()}{%
%    \end{macrocode}
% Außerdem ist noch eine weitere Besonderheit zu beachten. Sollte gerade \DIN
% verwendet werden~-- der Befehl wird innerhalb einer Überschrift genutzt~--
% wird lediglich das Hauptargument unformatiert jedoch als Argument von 
% \cs{MakeTextUppercase} ausgegeben, um das Setzen von Majuskeln zu erzwingen.
% Der Hintergrund wird folgend bei der Erweiterung von \cs{tud@uclcnotmath}
% erläutert.
%    \begin{macrocode}
  \def\@MarkupFormat{\ifdin{\MakeTextUppercase}{#1}}%
  \IfValueT{#2}{\def\@MarkupSuffix{\suffix{#2}}}%
  \IfValueT{#3}{\renewcommand*\@MarkupDeclare[1]{#3\@MarkupSuffix}}%
}
%    \end{macrocode}
% Das Makro \cs{tud@uclcnotmath} wird von den \TUDScript-Hauptklassen erstellt.
% Es erlaubt die Definition von Makros, welche von \cs{MakeTextUppercase} nicht
% beachtet werden sollen. Dieser Befehl kommt bei den \TUDScript-Klassen in 
% Überschriften zum Einsatz, wenn diese in \DIN gesetzt werden. Das hat zu 
% Folge, dass die Argumente der Markup-Befehle bereits in Majuskeln übergeben 
% werden würden, was unter anderem für die Erstellung von Labeln und Einträgen 
% für den Index nicht gewünscht wäre. Deshalb werden \emph{alle} Markup-Befehle 
% der Liste zum Ignorieren hinzugefügt. Damit aber bei der eigentlichen Ausgabe 
% alles in Majuskeln erscheint, wird für diesen Fall \cs{@MarkupFormat} genutzt.
%    \begin{macrocode}
\robustify\NoCaseChange
\appto\tud@uclcnotmath{%
  \@nonchangecase\Application%
  \@nonchangecase\Distribution%
  \@nonchangecase\Engine%
  \@nonchangecase\File%
  \@nonchangecase\Class%
  \@nonchangecase\Package%
  \@nonchangecase\Option%
  \@nonchangecase\Environment%
  \@nonchangecase\Macro%
  \@nonchangecase\Length%
  \@nonchangecase\Counter%
  \def\Key#1#2{\NoCaseChange{\Key{#1}{#2}}}%
  \@nonchangecase\Term%
  \@nonchangecase\PageStyle%
  \@nonchangecase\Font%
  \@nonchangecase\Color%
}
%    \end{macrocode}
% Nach der formatierten Ausgabe wird \cs{@ClearMarkupFormat} aufgerufen, um die 
% aktuell definierte Formatierung zurückzusetzen und bei einem neuen Aufruf 
% eines der Markup-Befehle mit \cs{@CheckMarkupFormat} auf die Verwendung von 
% \cs{@SetMarkupFormat} prüfen zu können.
%    \begin{macrocode}
\newcommand*\@ClearMarkupFormat{%
  \let\@MarkupFormat\relax%
  \let\@MarkupDeclare\@MarkupDeclare@Default%
  \let\@MarkupSuffix\relax%
}
\@ClearMarkupFormat
\newcommand*\@CheckMarkupFormat{%
  \ifx\@MarkupFormat\relax%
    \ClassError{tudscrmanual}{\string\@SetMarkupFormat\space unused}{%
      It seems you have forgotten to use \string\@SetMarkupFormat.%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \tud@uclcnotmath
% \end{macro}^^A \@MarkupSuffix
% \end{macro}^^A \@MarkupFormat
% \end{macro}^^A \@ClearMarkupFormat
% \end{macro}^^A \@SetMarkupFormat
% \end{macro}^^A \@CheckMarkupFormat
%
% \iffalse
%</class>
% \fi
%
%
% \subsection{Index}
%
% Hier erscheint alles, was für Erstellen und Ausgabe der einzelnen Indexe 
% notwendig ist.
%
% \subsubsection{Indexerstellung}
%
% Für die Erstellung aller Indexe wird das Paket \pkg{imakeidx} zusammen mit 
% \app{texindy} verwendet. Diese können sowohl mit dem Paket als auch mit der 
% Klasse erzeugt werden. 
%    \begin{macrocode}
\PassOptionsToPackage{xindy,splitindex}{imakeidx}
\RequirePackage{imakeidx}[2013/07/11]
%    \end{macrocode}
% Zuerst ein paar kleinere Einstellungen für das Layout\dots
%    \begin{macrocode}
\indexsetup{%
%<*class>
  level=\addsec,%
%</class>
%<*package>
  level=\subsection*,%
%</package>
  noclearpage,firstpagestyle=headings,headers={\indexname}{\indexname},%
  othercode={\renewcommand*\subitem{\@idxitem\hspace*{15\p@}}}%
}
%    \end{macrocode}
% \begin{environment}{theindex}
% \dots gefolgt von einem Patch für die Umgebung \env{theindex}, um unschöne 
% Seitenumbrüche direkt nach Überschriften zu vermeiden.
%    \begin{macrocode}
\@ifpackagelater{imakeidx}{2013/07/12}{%
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrtutorial}%
%</package>
  {%
    Package `imakeidx' was updated so the patch for the\MessageBreak%
    environment `theindex' is maybe outdated.%
  }%
}{%
  \ifimki@original\else%
    \renewenvironment{theindex}{%
      \imki@maybeaddtotoc%
      \imki@indexheaders%
      \thispagestyle{\imki@firstpagestyle}%
      \ifnum\imki@columns>\@ne%
        \columnsep \imki@columnsep%
        \ifx\imki@idxprologue\relax%
          \begin{multicols}{\imki@columns}[\imki@indexlevel{\indexname}]%
        \else%
          \begin{multicols}{\imki@columns}[%
            \imki@indexlevel{\indexname}%
            \imki@idxprologue%
          ]%
        \fi%
      \else%
        \imki@indexlevel{\indexname}\imki@idxprologue%
      \fi%
      \global\let\imki@idxprologue\relax%
      \parindent\z@%
      \parskip\z@ \@plus .3\p@\relax%
      \columnseprule \ifKV@imki@columnseprule.4\p@\else\z@\fi%
      \raggedright%
      \let\item\@idxitem%
      \imki@othercode%
    }{\ifnum\imki@columns>\@ne\end{multicols}\fi}%
  \fi%
}
%    \end{macrocode}
% \end{environment}^^A theindex
% \begin{macro}{\cleversee}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\cleverseealso}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\@cleversee}
% \changes{v2.05}{2015/11/02}{neu}^^A
% Diese Befehle dienen zum smarten Setzen von Hinweisen im Index. Existiert 
% lediglich dieser Hinweis im Index, wird dieser mit dem Präfix \cs{seename} 
% ausgegeben. Sind jedoch für einen Indexeintrag auch Seitenzahlen vorhanden, 
% so werden diese zuerst ausgegeben, danach folgt der Querverweis mit dem 
% Präfix \cs{seealsoname}. Der Befehl \cs{cleverseealso} verwendet letzteren 
% Präfix in jedem Fall.
% \ToDo{%
%   Ist die beliebige Kombination der beiden Befehle möglich?%
% }[v2.05]
%    \begin{macrocode}
\newrobustcmd*\cleversee{\@cleversee{\seename}}
\newrobustcmd*\cleverseealso{\@cleversee{\alsoname}}
%    \end{macrocode}
% Diese Makro übernimmt die eigentliche Arbeit. Es ist darauf angewiesen, dass 
% die angegebene Seitenzahlen eines Indexeintrages erst \emph{nach} den
% Hinweisen ausgegeben und mit \cs{relax} abgeschlossen werden. Dies wird mit
% der später definierten Stildatei für \app{texindy} sichergestellt. So wird es 
% möglich, dass das Makro \cs{@cleversee} auf alles ihm bis \cs{relax} 
% nachfolgende parsen kann und abhängig davon die Ausgabe gestaltet.
%    \begin{macrocode}
\newcommand*\@cleversee{}
\def\@cleversee#1#2#3\relax{%
  \if\relax\detokenize{#3}\relax%
    \emph{#1}\space#2%
  \else%
    #3, \emph{\alsoname}\space#2%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@cleversee
% \end{macro}^^A \cleverseealso
% \end{macro}^^A \cleversee
% \begin{macro}{\seeref}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\seeidx}
% Der Befehl \cs{seeref} kann anstelle von \cs{see} bzw. in der Sternversion
% statt \cs{alsosee} genutzt werden. Das Makro \cs{seeidx} verweist auf die 
% Seite eines Indexes.
%    \begin{macrocode}
\NewDocumentCommand\seeref{sm}{%
  \emph{\IfBooleanTF{#1}{\alsoname}{\seename}}\space#2%
}
%<*class>
\newcommand*\seeidx[2]{\pageref{idx:#1}}
%</class>
%    \end{macrocode}
% \end{macro}^^A \seeidx
% \end{macro}^^A \seeref
% \begin{macro}{\tud@write@i}
% \changes{v2.02}{2014/10/22}{neu}^^A
% \begin{macro}{\tud@write@ii}
% \changes{v2.02}{2014/11/02}{neu}^^A
% \begin{macro}{\tud@read}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Für die Erstellung der Indexe wird zum Sortieren das Programm \app{texindy} 
% genutzt. Für dieses wird eine eigene Stildatei verwendet, welche zur Laufzeit 
% erzeugt wofür zuerst ein Ausgabestream reserviert wird.
% \ToDo{Indexbefehle in der Quelldatei zusammenführen}[v2.05]
% \ToDo{Kann die Kompilierung von Tutorials beschleunigt werden?}[v2.05]
%    \begin{macrocode}
\newcommand*\tud@write@i{}
\newwrite\tud@write@i
%    \end{macrocode}
% Für die Tutorials werden später zusätzlich noch ein weiterer Ausgabe- sowie 
% ein Eingabestream benötigt, die hier gleich mit initilaisiert werden.
%    \begin{macrocode}
%<*package>
\newcommand*\tud@write@ii{}
\newwrite\tud@write@ii
\newcommand*\tud@read{}
\newread\tud@read
%</package>
%    \end{macrocode}
% \end{macro}^^A \tud@read
% \end{macro}^^A \tud@write@ii
% \end{macro}^^A \tud@write@i
% Nachfolgend wird die zu erstellenden \app{texindy}-Stildatei kurz beschrieben.
%    \begin{macrocode}
\openout\tud@write@i=\jobname-temp.xdy
\write\tud@write@i{%
%    \end{macrocode}
% Als erstes wird Standard-\LaTeX-Modul geladen.
%    \begin{macrocode}
(require "texindy.xdy")^^J%
%    \end{macrocode}
% Leider lässt sich für Seitenzahlbereiche via \val{:attr} (noch) kein Markup 
% für angehängte \enquote{f.} sowie \enquote{ff.} einstellen. Diese würden 
% deshalb bei kursiven oder fetten Seitenzahlen trotzdem in normaler Schrift
% erscheinen, weshalb auf die Auszeichnung folgender Seiten verzichtet wird.
%    \begin{macrocode}
%(require "ff-ranges.xdy")^^J%
%    \end{macrocode}
%
% Seitenbereiche werden sofort zusammengefasst, wobei als Trennzeichen ein
% Halbgeviertstrich verwendet wird.
%    \begin{macrocode}
(define-location-class^^J%
\space\space "arabic-page-numbers" ("arabic-numbers") :min-range-length 1^^J%
)^^J%
(markup-range :sep "--")^^J%
%    \end{macrocode}
% Punkte zwischen Eintrag und Seitenzahl. Das schließende \cs{relax} wird für 
% die smarte Definition des Befehls \cs{cleversee} benötigt, welcher nach den 
% beiden obligatorischen Argument die nachfolgenden Seitenzahlen sucht und 
% dabei durch \cs{relax} begrenzt wird.
%    \begin{macrocode}
(markup-locclass-list^^J%
\space\space :open "\string\,\string\dotfill\string\,"^^J%
\space\space :close "\string\relax"^^J%
)^^J%
%    \end{macrocode}
% Alle Argumente in eckigen Klammern werden ignoriert. Dies wird bei einigen
% Indexbefehlen genutzt, um die nicht beachteten RegExp-Regeln auszugleichen, 
% siehe den nächsten Absatz.
%    \begin{macrocode}
(merge-rule "\@backslashchar[(.*)\@backslashchar]" "" :eregexp)^^J%
%    \end{macrocode}
% Innerhalb ausgewählter Auszeichnungs- und Textbefehle sollten die Befehle
% selbst, nicht jedoch die Argumente verworfen werden. Leider werden die 
% manuell erstellten RegExp-Regeln durch \app{texindy} zu spät genutzt 
% (\url{http://sourceforge.net/p/xindy/bugs/22/}).
%    \begin{macrocode}
%(merge-rule "\\hologo\{(.*)\}" "/1" :eregexp)^^J%
%(merge-rule "\\texttt\{(.*)\}" "/1" :eregexp)^^J%
%(merge-rule "\\textsbn\{(.*)\}" "/1" :eregexp)^^J%
%(merge-rule "\\textsbs\{(.*)\}" "/1" :eregexp)^^J%
%    \end{macrocode}
% Es werden die Attribute \emph{declare} mit der Abkürzung \emph{!} sowie
% \emph{important} mit der Abkürzung \emph{?} und \emph{default} definiert, 
% welche hierarchisch gleichgestellt sind.
%    \begin{macrocode}
(define-attributes (("declare" "!" "important" "?" "default")))^^J%
%    \end{macrocode}
% Eine Alternative wäre, diese in der Hierarchie zu unterscheiden, allerdings
% war eine Bildung von zufriedenstellenden Seitenbereichen dabei nicht möglich
% und wurde deshalb verworfen.
%    \begin{macrocode}
%(markup-attribute-group-list :sep ", ")^^J%
%(define-attributes (("declare" "!") ("important" "?")("default")))^^J%
%    \end{macrocode}
% Einträge, die als wichtig oder als Deklaration festgelegt wurden, könnten
% auch für normale Indexeinträge zur Bereichsbildung verwendet werden. 
% Allerdings führt dies auch zur Erzeugung redundanter Einträge, falls es sich 
% bei den Sondereinträgen bereits um einen Seitenbereich handelt.
%    \begin{macrocode}
%(merge-to "declare" "default")^^J%
%(merge-to "!" "default")^^J%
%(merge-to "important" "default")^^J%
%(merge-to "?" "default")^^J%
%    \end{macrocode}
% Hier erfolgt die Definition der Auszeichnugen der Attribute. Deklarationen 
% werden fett gedruckt, wichtige Einträge erscheinen kursiv. Außerdem wird ein
% entsprechnder Link auf die Seite eingefügt.
%    \begin{macrocode}
(markup-locref^^J%
\space\space :attr "declare"^^J%
\space\space :open "\string\textbf{\string\hyperpage{"^^J%
\space\space :close "}}"^^J%
)^^J%
(markup-locref^^J%
\space\space :attr "!"^^J%
\space\space :open "\string\textbf{\string\hyperpage{"^^J%
\space\space :close "}}"^^J%
)^^J%
(markup-locref^^J%
\space\space :attr "important"^^J%
\space\space :open "\string\textsl{\string\hyperpage{"^^J%
\space\space :close "}}"^^J%
)^^J%
(markup-locref^^J%
\space\space :attr "?"^^J%
\space\space :open "\string\textsl{\string\hyperpage{"^^J%
\space\space :close "}}"^^J%
)^^J%
(markup-locref^^J%
\space\space :attr "default"^^J%
\space\space :open "\string\hyperpage{"^^J%
\space\space :close "}"^^J%
)^^J%
%    \end{macrocode}
% Mit \val{see}\marg{Eintrag} erzeugte Querverweise im Index prüfen, ob 
% außerdem noch Seitenzahlangaben exisitent sind.
%    \begin{macrocode}
(markup-crossref-list^^J%
\space\space :class "see"^^J%
\space\space :open "\string\cleversee{" :sep "; " :close "}"^^J%
)^^J%
(markup-crossref-list^^J%
\space\space :class "seealso"^^J%
\space\space :open "\string\cleverseealso{" :sep "; " :close "}"^^J%
)^^J%
%    \end{macrocode}
% Werden mit \val{see}\marg{Eintrag!Untereintrag} gezielte Querverweise auf
% Untereinträge im Index erstellt, so werden diese nicht standardmäßig mit 
% einem Komma sondern mit \enquote{\,\textbar\,} getrennt.
%    \begin{macrocode}
(markup-crossref-layer-list^^J%
\space\space :class "see" ^^J%
\space\space :sep "\string\,\string\textbar\string\,"^^J%
)^^J%
(markup-crossref-layer-list^^J%
\space\space :class "seealso" ^^J%
\space\space :sep "\string\,\string\textbar\string\,"^^J%
)^^J%
%    \end{macrocode}
%
% \iffalse
%<*class>
% \fi
%
% Dieser Querverweistyp wird speziell im allgemeinen Index verwendet, um auf 
% einen Spezialindex zu verweisen. Dabei dient \val{:unverified} zum 
% Unterdrücken von Warnungen durch \app{texindy} aufgrund eines fehlenden 
% Ziels für den Querverweis.
%    \begin{macrocode}
(define-crossref-class "seeidx" :unverified)^^J%
(markup-crossref-list^^J%
\space\space :class "seeidx"^^J%
\space\space :open "\string\seeidx{" :sep "; " :close "}{}"^^J%
)^^J%
%    \end{macrocode}
% Damit die Makros \cs{cleversee} und \cs{cleverseealso} sowie \cs{seeidx} auf
% nachfolgende Seitenzahlen suchen können, müssen diese vor selbigen im Index
% aufgerufen werden.
%    \begin{macrocode}
(define-location-class-order^^J%
\space (^^J%
\space\space "see" "seealso" "seeidx"^^J%
\space\space "roman-page-numbers" "arabic-page-numbers" "alpha-page-numbers"^^J%
\space\space "Roman-page-numbers" "Alpha-page-numbers"^^J%
\space )^^J%
)^^J%
%    \end{macrocode}
% Für die Änderungsliste werden Untereinträge bis zur fünften Ebene unterstützt.
%    \begin{macrocode}
(markup-indexentry :open "~n \string\subsubsubitem " :depth 3)^^J%
(markup-indexentry :open "~n \string\subsubsubsubitem " :depth 4)^^J%
%    \end{macrocode}
%
% \iffalse
%</class>
% \fi
%
% Damit ist die \app{texindy}-Stildatei fertig.
%    \begin{macrocode}
}
\closeout\tud@write@i
%    \end{macrocode}
% \begin{macro}{\makexindyindex}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Um die einzelnen Indexe zu erstellen, wird das Makro \cs{makexindyindex} 
% definiert. Die Sternversion dieses Befehle erstellt dabei neben dem normalen
% Spezialindex einen weiteren, welcher explizit für Deklarationen genutzt wird.
% Dieser wird anschließen als erstes an \app{texindy} weitergereicht, um die
% richtige Formatierung der einzelnen Einträge gewährleisten zu können. Erst 
% danach wird die Datei mit den normalen Einträgen verarbeitet. Siehe hierzu 
% auch \cs{@@ProcessIndex}.
%    \begin{macrocode}
\NewDocumentCommand\makexindyindex{somo}{%
  \let\@tempb\@empty%
  \IfBooleanT{#1}{%
    \def\@tempc{\jobname-#4-declare.idx}%
    \makeindex[name={#4-declare}]%
    \IfFileExists{\@tempc}{%
      \edef\@tempb{-o \jobname-#4.ind \@tempc}%
    }{%
%<*class>
      \ClassWarning{tudscrmanual}%
%</class>
%<*package>
      \PackageWarning{tudscrtutorial}%
%</package>
        {File \@tempc\space not found}%
    }%
  }%
  \protected@edef\@tempa{%
    title={#3},%
    columnsep=\noexpand\the\columnsep,%
    \IfValueTF{#4}{%
      name={#4},%
      options={-M \jobname-temp.xdy -L german-din -t \jobname-#4.xlg \@tempb},%
    }{%
      options={-M \jobname-temp.xdy -L german-din -t \jobname.xlg},%
    }%
    \IfValueT{#2}{#2}%
  }%
  \expandafter\makeindex\expandafter[\@tempa]%
}
%    \end{macrocode}
% \end{macro}^^A \makexindyindex
% Nun können mit \cs{makexindyindex} die einzelnen Indexe erstellt werden.
%    \begin{macrocode}
%<*class>
\makexindyindex{Allgemeiner Index}
%</class>
\makexindyindex*{Klassen- und Paketoptionen}[options]
\makexindyindex*{Befehle und Umgebungen mit dazugeh\"origen Parametern}[macros]
%<*class>
\makexindyindex*{Sprachabh\"angige Bezeichner}[terms]
\makexindyindex*{Seitenstile, Schriftelemente und Farben}[elements]
\makexindyindex*{L\"angen und Z\"ahler}[misc]
%</class>
\makexindyindex*{Klassen, Pakete und Dateien}[files]
%<*class>
\makexindyindex[columns=1]{\"Anderungsliste}[changelog]
%</class>
\undef\makexindyindex
%    \end{macrocode}
% \begin{macro}{\if@tud@index}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Dieser Schalter wird zwei unterschiedliche Aufgaben verwendet. Zum einen wird 
% er bei der Ausgabe von Verzeichnissen auf \val{true} gesetzt, um das Setzen 
% von Indexeinträgen durch Markup-Befehle in den Verzeichnissen selbst zu 
% unterbinden. Weiterhin verhindert der aktivierte Schalter bei der Ausführung 
% von \cs{@ProcessMarkup} das erstellen von erweiterten Querverweisen sowie das 
% Setzen von CTAN-Links bei Paketen (\cs{Package}), was weder in Verzeichnissen 
% noch im Index erwünscht ist, weshalb vom Makro \cs{@printindex} ebenfalls
% \cs{@tud@indextrue} gesetzt wird.
%    \begin{macrocode}
\newif\if@tud@index
\addtoeachtocfile{\protect\@tud@indextrue}%
%    \end{macrocode}
% \end{macro}^^A \if@tud@index
%
% \iffalse
%<*class>
% \fi
%
% \begin{macro}{\@getindex}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@idxkey}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@idxformat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@idxentry}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\@idxbundle}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit dem Makro \cs{@getindex} wird die Formatierung eines Indexeintrags für 
% einen Markup-Befehl realisiert. Für das Sortieren der Indexeinträge kommt 
% \app{texindy} zum Einsatz. Um die Indexeinträge wie gewünscht zu Formatieren, 
% gibt es zwei Möglichkeit. 
%
% Bei der ersten Variante würde der Indexeintrag einfach direkt mit den 
% Markup-Befehlen erstellt und in der \app{texindy}-Stildatei wird für alle
% Auszeichnungsbefehle die passende \val{merge-rule} erstellt, um die korrekte 
% Sortierung zu gewährleisten. Tatsächlich war in einer früheren Version genau
% das der Ansatz. Allerdings werden die manuell erstellten RegExp-Regeln leider 
% durch \app{texindy} zu spät genutzt, weshalb der Ansatz verworfen wurde.
% (\url{http://sourceforge.net/p/xindy/bugs/22/}).
%
% Damit das Sortieren verlässlich funktioniert, werden die Einträge für den 
% Index deshalb in der gewohnten Syntax von \app{makeindex} in der Form
% \meta{Schlüsselwort}\val{@}\meta{Markup} erstellt. Diese Syntax kann auch mit
% \app{texindy} genutzt werden. 
%
% An \cs{@getindex} werden vier obligatorische gefolgt von vier optionalen 
% Argumenten übergeben. Die ersten beiden Hauptargumente sind die Makros, in 
% welche \meta{Schlüsselwort}~-- für gewöhnlich \cs{@idxkey}~-- sowie die 
% Formatierung\meta{Markup}~-- normalerweise \cs{@idxformat}~-- expandiert 
% werden. Mit dem Makro im dritten Argument wird es möglich, Untereinträge zu 
% einem \meta{Schlüsselwort} für beispielsweise Parameter von Umgebungen oder
% Befehlen (\cs{Key}) sowie spezielle Schlüsselwerte von Optionen zu erzeugen.
% Dabei wird vor der Erstellung des Untereintrages der direkt zuvor generierte
% Indexhaupteintrag in das dritte Argument~-- Im Normallfall \cs{@idxentry}~--
% gesichert.
%
% Das vierte obligatorische Argument enthält den eigentlichen Markup-Befehl für 
% welchen der Indexeintrag erzeugt werden soll. An dieses schließen sich vier
% optionale Argumente an, mit denen der Indexeintrag weiter formatiert werden 
% kann. Das erste optionale Argument \val{=}\meta{Wert}\val{=} kann wie gewohnt
% für das Hinzufügen eines Schlüsselwertes genutzt werden. Das zweite ordinäre
% optionale Argument \oarg{Ausgabesuffix} fügt dem Eintrag in den Index eine
% zusätzliche Anmerkung hinzu. Soll der Indexeintrag für ein spezielles Paket
% oder eine Klasse aus \TUDScript-Bundle erstellt werden, wird das optionale
% Argument \val{(\string\Class\marg{Klasse}/\string\Package\marg{Paket})} für 
% einen Verweis auf das \parg{Bundleelement} verwendet, der in \cs{@idxbundle} 
% gespeichert wird. Das letzte Argument \val{!}\meta{Anmerkung}\val{!} wird nur
% innerhalb von \cs{@ProcessChangedAt} verwendet, um bei der Änderungsnotiz für
% Parameter, welche als Untereintrag erstellt werden, dem Haupteintrag eine
% Anmerkung hinzuzufügen.
%    \begin{macrocode}
\newcommand*\@idxkey{}
\newcommand*\@idxformat{}
\newcommand*\@idxentry{}
\newcommand*\@idxbundle{}
\NewDocumentCommand\@getindex{smmmmd==r[]r()d!!}{%
%    \end{macrocode}
% Zu Beginn wird in einer Gruppe der Markup-Befehl des vierten obligatorischen
% Arguments ausgewertet. Es wird eine Fallunterschiedung durchgeführt, ob es 
% sich dabei um einen Parameter (\cs{Key}) handelt oder nicht. Ist dies der
% Fall, wird für diesen Parameter der hier nachfolgend formatierte Indexeintrag
% als Untereintrag verwendet. Dafür wird zuvor ein Haupteintrag aus dem ersten
% Argument von \cs{Key} genriert und in das dritte obligatorische Argument
% gespeichert (\cs{@idxentry}).
%    \begin{macrocode}
  \begingroup%
    \let#4\@empty%
    \in@{\Key}{#5}%
%    \end{macrocode}
% Um den Haupteintrag zu extrahieren, wird mit \cs{@suppressmarkup} die Ausgabe
% des Markups deaktiviert und das erste Argument von \cs{Key} ausgeführt. Dies
% führt über \cs{@ProcessIndex} zum rekursiven Aufruf von \cs{@getindex}. Als
% Ergebnis sind im zweiten und dritten Argument~-- sprich in \cs{@idxkey} und 
% \cs{@idxformat}~-- sowohl \meta{Schlüsselwort} als auch \meta{Markup} für den
% Elterneintrag enthalten. Diese werden in das vierte Argument (\cs@{idxentry}) 
% gespeichert.
%    \begin{macrocode}
    \ifin@%
      \@suppressmarkup%
      \let\Key\@firstoftwo%
      #5%
%    \end{macrocode}
% Da der Inhalt des vierten Arguments am Ende der Gruppe expandiert wird, wird 
% mit \cs{expandonce} dafür gesorgt, dass die Expansion nur einmalig erfolgt. 
% Zu beachten ist außerdem, dass der Hauptindexeintrag bereits in der Form 
% \meta{Schlüsselwort}\val{@}\meta{Markup}\textbf{\val{!}} zusammengefügt wird.
%    \begin{macrocode}
      \def#4{%
        \expandonce#2\IfValueT{#9}{: #9}@%
        \expandonce#3\IfValueT{#9}{: #9}!%
      }%
    \fi%
%    \end{macrocode}
% Nachdem ein möglicher Haupteintrag für Parameter erzeugt wurde, folgt nun 
% der formatierte Indexeintrag für das aktuelle Markup-Element. Um diesen zu
% erstellen, wird für \meta{Schlüsselwort} zunächst nur der Inhalt des
% Hauptargumentes benötigt. Dieser wird hier in das zweite Argument
% expandiert, der ggf. erzeugte Haupteintrag in das vierte. Für \cs{Key} ist
% hier nur noch das zweite Argument relevant.
%    \begin{macrocode}
    \@gobblemarkup%
    \let\Key\@secondoftwo%
    \edef\tud@reserved{%
      \noexpand\endgroup%
      \def\noexpand#2{#5}%
      \def\noexpand#4{#4}%
    }%
  \tud@reserved%
%    \end{macrocode}
% Die Auszeichnung für den Indexeintrag besteht in erster Linie aus dem 
% Markup-Befehl selbst. Damit ein \val{@}-Zeichen beispielsweise in einem 
% Makronamen korrekt verarbeitet wird, wird dieses im Stil von \app{makeindex} 
% mit \val{"} maskiert.
%    \begin{macrocode}
  \def#3{#5}%
  \tud@replace#2{@}{"@}%
  \tud@replace#3{@}{"@}%
%    \end{macrocode}

%    \begin{macrocode}
  \let\@idxbundle\@bundledefault%
  \IfValueTF{#8}{%
    \def\@idxbundle{#8}%
  }{%
    \tud@ifbundle{%
      \tud@iflabelexists{\@bundle:#5}{%
        \edef\@idxbundle{\expandonce\@bundle}%
      }{}%
    }{}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \@idxbundle
% \end{macro}^^A \@idxentry
% \end{macro}^^A \@idxformat
% \end{macro}^^A \@idxkey
% \end{macro}^^A \@getindex


% Zuerst werden jedoch einige Hilfsmakros erstellt mit denen überprüft wird, ob
% die Sternversion der zuvor definierten Auszeichnung"=Befehle zusammen mit
% einer Formatierung \val{\textbar}\meta{Indexformat}\val{\textbar} genutzt
% wurde, was sich natürlich widerspricht. In diesem Fall erfolgt eine Warnung.
%    \begin{macrocode}
\NewDocumentCommand\@ProcessIndex{mmd==od()d||}{%
  \IfBooleanT{#1}{%
    \IfValueT{#2}{%
      \ClassWarning{tudscrmanual}{%
        You've used the starred version so no entry for\MessageBreak%
        the index is created and the optional argument\MessageBreak%
        |#2| will be ignored%
      }%
    }%
  }%
}

%    \end{macrocode}


% Für die Deklaration veralteter Optionen, Befehle etc. kann die Sternvariante 
% des Auszeichnungsbefehls verwendet werden, um das Erzeugen eines Labels zu 
% unterbinden.
%    \begin{macrocode}
\NewDocumentCommand\@@ProcessIndex{mr==r()r||r[]}{%
      \if@deprecated%
        \expandafter\IfBooleanF\expandafter{\@MarkupFormat}{%
          \tudhyperdef{\@templabel}%
        }%
%    \end{macrocode}
% Wurde die Sternversion eines Auszeichnungsbefehls in der Umgebung 
% \env{Declaration} genutzt, wird lediglich ein Label aber kein Eintrag im 
% Index erzeugt.
%    \begin{macrocode}
      \else%
        \expandafter\IfBooleanTF\expandafter{\@MarkupFormat}{%
          \tudhyperdef{\@templabel}%
%    \end{macrocode}
% Andernfalls werden Label bzw. Hyperlinkanker und ein Eintrag in den Index 
% erzeugt, wobei die Formatierung dieses Eintrags fest vorgegeben ist.
%    \begin{macrocode}
        }{%
          \ifx\@MarkupFormat\@empty\else%
            \ClassWarning{tudscrmanual}{%
              It is not possible to use any indexing format\MessageBreak%
              like |\@MarkupFormat| within the arguments of the\MessageBreak%
              environment `Declaration'%
            }%
          \fi%
%    \end{macrocode}
% Wird zur Deklaration die Umgebung \env{Declaration*} genutzt, so wird der 
% Hyperlink ein ganzes Stück nach oben verschoben. Hintergrund ist, dass diese 
% Umgebung nur zum Deklarieren von Klassen und Paketen gedacht ist und direkt
% nach einer Gliederungsüberschrift folgen sollte.
%    \begin{macrocode}
          \if@stareddeclare%
            \tudhyperdef'{\@templabel}%
%    \end{macrocode}
% Andernfalls wird der normale Hyperlink gesetzt. Das Label zum Prüfen wird 
% implizit durch \cs{tudhyperdef} gesetzt.
%    \begin{macrocode}
          \else%
            \tudhyperdef{\@templabel}%
          \fi%
          \@HyperIndex{#5}{#6}{#7}{#8}{#9}{#4}{(declare}%
        }%
      \fi%
%    \end{macrocode}
% Die \env{Declaration*}"=Umgebung erzeugt keine direkte Ausgabe sondern nur 
% die Hyperlinks und Indexeinträge. Die Nennung der Klasse bzw. des Paketes
% oder der Pakete sollte in der Überschrift davor erfolgen.
%    \begin{macrocode}
      \if@stareddeclare\else%
        #1\IfValueT{#2}{#2}%
      \fi%
%    \end{macrocode}



% \begin{macro}{\@HyperIndex}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Dieser Befehl sorgt für die eigentlichen Indexeinträge. Dabei werden für 
% Einträge, welche innerhalb der \env{Declaration}-Umgebung deklariert wurden, 
% ein Hyperlink im Index erstellt. Das erste Argument \marg{Index} enthält den 
% gewünschten Zielindex. Danach folgt~-- für Parameter~-- der Haupteintrag. 
% Daran schließt der Indexeintrag selbst mit \marg{Vorsatz}, \marg{Eintrag},
% \marg{Anhang} und zum Abschluss \oarg{Formatierung} an. Der vollständige 
% Funktionsaufruf lautet:
% \newline\begingroup\scriptsize
% \cs{@HyperIndex}\marg{Index}\marg{Haupteintrag}\ignorespaces%
% \marg{Vorsatz}\marg{Eintrag}\marg{Anhang}\marg{Formatierung}
% \endgroup
%    \begin{macrocode}
\NewDocumentCommand\@HyperIndex{mmmmmmm}{%
  \IfValueTF{#3}{\def\@tempa{#3}}{\def\@tempa{}}%
  \IfValueTF{#5}{\def\@tempb{#5}}{\def\@tempb{}}%
  \IfValueTF{#7}{\edef\@tempc{|#7}}{\def\@tempc{}}%
%    \end{macrocode}
% Auch hier wird unterschieden, ob es sich um einen Parameter (keys) handelt. 
% Wurde für einen Parameter eine Umgebung oder ein Befehl bereits definiert, 
% werden zwei Indexeinträge generiert. Einer beim Befehl selber als 
% Untereintrag für den jeweiligen Parameter und einer im Index für Parameter
% selbst mit der dazugehörigen Umgebung bzw. dem dazugehörigen Befehl. Beide
% erhalten einen entsprechenden Hyperlink zur Deklaration. Der Eintrag für den 
% Index wird mit \cs{@createntry} erzeugt, um ggf. die dazugehörige Klasse bzw. 
% das Paket aus dem \TUDScript-Bundle anzuhängen.
%    \begin{macrocode}
  \IfValueTF{#2}{%
    \@getlabel\@templabel{#1:#2:#4}{#6}%
    \@getindex\@idxentry{%
      \begingroup\expandonce\@tempa#4\endgroup\expandonce\@tempb%
    }{#6}%
    \@getindex\@idxkeyentry{%
      \begingroup\expandonce\@tempa#4\endgroup%
      \noexpand\nobreakspace{\idxfont(#2)}%
    }{#6}%
    \ifcsdef{r@\@templabel}{%
      \index[#1]{%
        #2!\hyperidx[\@templabel]{\expandonce\@idxentry}\expandonce\@tempc%
      }%
      \index[keys]{%
        \hyperidx[\@templabel]{\expandonce\@idxkeyentry}\expandonce\@tempc%
      }%
    }{%
      \index[#1]{#2!\expandonce\@idxentry\expandonce\@tempc}%
      \index[keys]{\expandonce\@idxkeyentry\expandonce\@tempc}%
    }%
%    \end{macrocode}
% Falls es sich nicht um einen Parameter handelt, wird lediglich der Eintrag im 
% speziellen Index vorgenommen und ggf. ein Hyperlink erzeugt.
%    \begin{macrocode}
  }{%
    \@getlabel\@templabel{#1:#4}{#6}%
    \@getindex\@idxentry{%
      \begingroup\expandonce\@tempa#4\endgroup\expandonce\@tempb%
    }{#6}%
    \ifcsdef{r@\@templabel}{%
      \index[#1]{%
        \hyperidx[\@templabel]{\expandonce\@idxentry}\expandonce\@tempc%
      }%
    }{%
      \index[#1]{\expandonce\@idxentry\expandonce\@tempc}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \@HyperIndex
% \begin{macro}{\CrossIndex}
% Der Befehl \cs{CrossIndex} dient zum Eintragen eines Schlagwortes, welches im 
% ersten obligatorischen Argument angegeben wird, in den allgemeinen Index und
% verweist auf den im zweiten obligatorischen Argument, zum Schlagwort gehörigen
% Spezialindex. Das ordinäre optionale Argument kann verwendet werden, um ggf.
% den Eintrag in den allgemeinen Index, der normalerweise mit dem jeweiligen
% Schlagwort erfolgt, zu überschrieben.
%
% Wird die Sternversion von \cs{CrossIndex} genutzt, so wird der Querverweis 
% als Eintrag in der obersten Ebene gesetzt, andernfalls wird ein Untereintrag
% gesetzt. Mit der normalen Variante können so zu einem Schlagwort weitere
% Verweise im allgemeinen Index erscheinen. Das zweite obligatorische Argument
% kann eine kommagetrennte Liste enthalten.
%    \begin{macrocode}
\NewDocumentCommand\CrossIndex{smom}{%
  \def\@tempa##1##2##3{%
    \index{%
      \IfBooleanTF{#1}{##3@##3}{##3!"|@}%
      \,\textrightarrow\,%
      \tudhyperref{idx:##2}{\IfValueTF{##1}{##1}{Index der ##3}}|seeidx{##2}%
    }%
  }%
  \forcsvlist{\@tempa{#3}{#4}}{#2}%
}
%    \end{macrocode}
% \end{macro}^^A \CrossIndex
% \begin{macro}{\SeeRef}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{SeeRef} wird unter dem im ersten Argument gegebenen Schlagwort ein
% Indexuntereintrag erzeugt, der wiederum auf einen Indexeintrag des zweiten 
% Argumentes verweist. Dabei kann im zweiten Argument ein normaler Begriff oder 
% ein Markup-Befehl verwendet werden.
%    \begin{macrocode}
\newcommand*\SeeRef[2]{%
  \sbox\z@{%
    \let\@idxformat\relax%
    #2%
%    \end{macrocode}
% Wurde im zweiten Argument ein Markup-Befehl angegeben, so wurde durch das 
% Erstellen der Box das dazugehörige Indexformat in \cs{@idxformat} für den
% Eintrag erstellt. Andernfalls wurde die Definiton von \cs{@idxformat} nicht 
% geändert und das Argument wird nach der Box direkt in den Index eingetragen.
%    \begin{macrocode}
    \ifx\@idxformat\relax%
      \gdef\@tempa{#2}%
    \else%
      \global\let\@tempa\@idxformat%
    \fi%
  }%
  \index{#1!#2|see{\@tempa}}%
}
%    \end{macrocode}
% \end{macro}^^A \SeeRef
%
% \iffalse
%</class>
% \fi
%
% \subsubsection{Indexausgabe}
%
% Dies sind alle Befehle, die zur Ausgabe der erzeugten Indexe benötigt werden.
% \begin{macro}{\PrintIndex}
% \changes{v2.02}{2014/08/20}{neu}^^A
% \begin{macro}{\tud@indexprologue}
% \changes{v2.02}{2014/08/20}{neu}^^A
% Mit \cs{PrintIndex} erfolgt die Ausgabe aller erstellten Indexe. Dabei wird 
% für bestimmte Spezialindexe das Makro \cs{tud@indexprologue} neu gesetzt, um 
% für diese vor der eigentlichen Ausgabe einige Anmerkungen machen zu können.
% Mit \cs{tud@indexprologue} kann der einleitende Teil für einen Index gesetzt
% werden.
%    \begin{macrocode}
%<*class>
\newcommand*\tud@indexprologue{}
%</class>
\newcommand*\PrintIndex{%
  \begingroup%
%<*class>
    \renewcommand\tud@indexprologue{%
      Die im Folgenden aufgelisteten Schlagworte sollen f\"ur den Umgang mit
      \hologo{LaTeXe} im Allgemeinen sowie dem \TUDScript-Bundle im Speziellen
      sowohl Antworten bei generellen Fragen liefern als auch L\"osungen f\"ur
      typische Probleme bereitstellen. Falls ein gesuchter Begriff hier nicht
      auftaucht oder trotz vorhander Hinweise kein zufriedenstellendes Ergebnis
      erzielt werden kann, sollte das \Forum erster Anlaufpunkt sein, um
      weitere Hilfe bei der Nutzung von \TUDScript zu erhalten.
    }%
    \@printindex%
    \clearpage%
    \renewcommand\tud@indexprologue{%
      Dies ist der Index aller im Handbuch erl\"auterten sowie erw\"ahnten
      Optionen, wobei bei den meisten auch Untereintr\"age mit Seitenangeben
      f\"ur spezielle Wertzuweisungen existieren.
    }%
%</class>
    \@printindex[options]%
%<*class>
    \renewcommand\tud@indexprologue{%
      Hier werden alle im Handbuch erl\"auterten sowie erw\"ahnten Befehle und
      Umgebungen aufgelistet, wobei bei einigen auch Untereintr\"age f\"ur
      Schl\"ussel-Wert-Parameter existieren, die im optionalen Argument der
      jeweiligen Anweisung verwendet werden k\"onnen. Bei einigen Parametern
      gibt es zus\"atzlich eine weitere Unterebene, in der Seitenverweise zu
      expliziten Wertzuweisungen an diese Parameter gegeben werden.
    }%
%</class>
    \@printindex[macros]%
%<*class>
    \renewcommand\tud@indexprologue{%
      Dies sind alle von \TUDScript definierten, sprachabh\"angigen Bezeichner.
      Informationen zur Verwendung sowie den Anpassungsm\"oglichkeiten sind in
      \autoref{sec:localization} zu finden.
    }%
    \@printindex[terms]%
    \@printindex[elements]%
    \@printindex[misc]%
%</class>
    \@printindex[files]%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@indexprologue
% \end{macro}^^A \PrintIndex
% \begin{macro}{\@printindex}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\@printindexskip}
% \changes{v2.02}{2014/09/02}{neu}^^A
% Mit \cs{@printindex} erfolgt die Ausgabe der einzelnen Indexe. Dabei wird in 
% der Klasse \cls{tudscrmanual} zuvor für jeden Index ein referenzierbares
% Label erstellt und ggf. der Prolog gesetzt.
%
% Aufgrund der Verwendung der \env{multicols}"=Umgebung durch das Paket
% \pkg{imakeidx} werden normalerweise ohne einen Prolog zu große vertikale
% Abstände gesetzt. Dies wird mit \cs{@printindexskip} behoben.
%    \begin{macrocode}
\newcommand*\@printindexskip{%
  \ifnum\imki@columns>\@ne\relax\vspace{-\multicolsep}\fi%
}
\newcommand*\@printindex[1][]{%
%    \end{macrocode}
% Falls ein Seitenumbruch notwendig ist, sollte dieser vor dem Index und nicht 
% unmittelbar nach dem Beginn erfolgen.
%    \begin{macrocode}
  \pagebreak[3]%
  \@tud@indextrue%
%<*class>
%    \end{macrocode}
% Das zu erstellende Label wird in \cs{tud@reserved} gespeichert. Dabei wird 
% die Sternversion von \cs{tudhyperdef} genutzt, um das Label auf die Höhe der 
% Überschrift zu setzen.
%    \begin{macrocode}
  \ifblank{#1}{%
    \def\tud@reserved{\tudhyperdef*{idx:main}}%
  }{%
    \def\tud@reserved{\tudhyperdef*{idx:#1}}%
  }%
%    \end{macrocode}
% Ohne Prolog wird der fehlerhafte vertikale Abstand behoben. 
%    \begin{macrocode}
  \ifx\tud@indexprologue\@empty%
    \indexprologue[\@printindexskip]{\tud@reserved}%
%    \end{macrocode}
% Mit Prolog wird der fehlerhafte vertikale Abstand nach diesem korrigiert.
%    \begin{macrocode}
  \else%
    \indexprologue{%
      \tud@reserved%
      \tud@indexprologue%
      \@printindexskip%
    }%
  \fi%
%</class>
%    \end{macrocode}
% Fur das Paket \pkg{tudscrtutorial} erfolgt eine einfache Ausgabe der Indexe.
%    \begin{macrocode}
%<package>  \indexprologue[\@printindexskip]{}%
%    \end{macrocode}
% Die Ausgabe des gewünschten Index und des leeren des Prologs.
%    \begin{macrocode}
  \ifblank{#1}{\printindex}{\printindex[#1]}%
%<class>  \let\tud@indexprologue\@empty%
}
%    \end{macrocode}
% \end{macro}^^A \@printindexskip
% \end{macro}^^A \@printindex
%
% \iffalse
%<*class>
% \fi
%
% \subsection{Änderungsliste}
%
% Um dem Anwender einen schnellen Überblick zu Änderungen der aktuellen Verison 
% bereitstellen zu können, werden Befehle zur automatisierten Erzeugung einer 
% solchen Liste definiert. Die Änderungsliste ist der Klasse vorbehalten.
%
% \ToDo{Doku}[v2.05]
% \begin{macro}{\if@changedat}
%    \begin{macrocode}
\newif\if@changedat
%    \end{macrocode}
% \end{macro}^^A \if@changedat
% \begin{macro}{\@ProcessChangedAt}
% \changes{v2.02}{2014/07/25}{erweitert}^^A
% \changes{v2.02}{2014/10/08}{Sternversion ergänzt}^^A
% Die Änderungsliste erhält ebenfalls einen Hyperlink zur Deklaration. Für
% Umgebungs- und Befehlsparameter wird mit dem zweiten optionalen Argument ein
% Untereintrag für die dazugehörige Umgebung beziehungsweise den dazugehörigen
% Befehl erzeugt.
%    \begin{macrocode}
\NewDocumentCommand\@ProcessChangedAt{md()md!!mmm}{%
  \IfValueTF{#4}{%
    \@getlabel\@templabel{#3:#4:#6}{#2}%
  }{%
    \@getlabel\@templabel{#3:#6}{#2}%
  }%
  \IfBooleanTF{#1}{%
    \def\@tempa{\begingroup#5#6\endgroup}%
  }{%
    \def\@tempa{\begingroup#5#6\endgroup\nobreakspace{\idxfont(#7)}}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \@ProcessChangedAt
% \begin{macro}{\ChangedAt}
% \changes{v2.02}{2014/07/25}{erweitert}^^A
% \changes{v2.02}{2014/10/15}{Sternversion neu (keine Randnotiz)}^^A
% \begin{length}{\changedatskip}
% \changes{v2.04}{2015/06/08}{neu}^^A
% An den Befehl \cs{ChangedAt} kann eine kommagetrente Liste mit verschiedenen
% Versionsnummern und dazugehörigen Änderungen übergeben werden. Er wird in der 
% Form: \cs{ChangedAt}\verb|{|\meta{Version}\verb|!|\meta{Beschreibung}\verb|}| 
% genutzt. Mit \cs{@ChangedAt@CreateList} wird der Prozess selbst durchgeführt. 
% Es wird zu der angegebenen Versionsnummer ein Eintrag in die Änderungsliste
% erstellt, wenn mit einem Ausrufezeichen getrennt der gewünschte Inhalt
% gegeben wurde.
%
% Alle übergegebenen Versionsnummern werden als Liste mit einmaligen Einträgen 
% in einer Randnotiz gesetzt. Mit dem optionalen Argument kann ein vertikaler 
% dieser angegeben werden. Die Version mit einem Apostroph verschiebt die 
% Randnotiz um den Grundlinienabstand nach oben, die Sternversion unterdrückt
% stattdessen die Ausgabe dieser vollständig.
%    \begin{macrocode}
\newlength\changedatskip
\NewDocumentCommand\ChangedAt{sO{\changedatskip}mO{Allgemein}}{%
  \tud@ifbundle{\@bundle}{%
    \@ChangedAt@CreateList[#1]{#2}[#4\nobreakspace\@bundle]{#3}%
  }{%
    \@ChangedAt@CreateList[#1]{#2}[#4]{#3}%
  }%
}
%    \end{macrocode}
% \end{length}^^A \changedatskip
% \end{macro}^^A \ChangedAt
%
% \subsection{Sukzessive Erstellung der Änderungsliste}
%
% \begin{macro}{\@ChangedAt@CreateList}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{\@ChangedAt@@CreateList}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \begin{macro}{\@ChangedAt@@@CreateList}
% \begin{macro}{\@ChangedAt@@@@CreateList}
% \begin{macro}{\list@ChangedAt}
% \changes{v2.02}{2014/07/25}{neu}^^A
% Mit diesen Befehlen wird die Änderungshistorie in Form eines Index erstellt. 
% Der Befehl \cs{@ChangedAt@CreateList} setzt eine kommagetrennte Liste in eine 
% im Format von \pkg{etoolbox} um. Anschließend wird diese für die 
% Änderungsliste mit \cs{@ChangedAt@CreateEntry} aufgespalten. Die einzelnen 
% Einträge werden mit \cs{@ChangedAt@@CreateEntry} weiter verarbeitet.
%
% Um für Änderungsnotizen die dazugehörige Option, Befehl etc. bei einer 
% Deklaration kenntlich zu machen, wird das deklarierte Element zusammen mit 
% der Notiz in einer Liste gespeichert. Da mehrere kommaseparierte Werte
% angegeben werden können, muss das optionale Argument der Umgebung
% \env{Declaration} dahingehend abgearbeitet werden. Dabei kann außerdem 
% angegeben werden, ob es sich bei Änderung um eine Umbenennung von Option,
% Befehl etc. handelt.
%    \begin{macrocode}
\newcommand*\list@ChangedAt{}
\let\list@ChangedAt\relax
\NewDocumentCommand\@ChangedAt@CreateList{omom}{%
  \let\@changedatlist\relax%
  \let\@templist\relax%
  \@for\@tempa:=#4\do{%
    \ifx\@tempa\@empty\else\ifx\@tempa\space\else%
      \IfValueT{#3}{\preto\@tempa{#3!}}%
      \listeadd{\@changedatlist}{\expandonce\@tempa}%
    \fi\fi%
  }%
  \forlistloop\@ChangedAt@CreateEntry{\@changedatlist}%
}
\newcommand*\@ChangedAt@@CreateList[2]{%
  \IfValueT{#1}{%
    \@for\@tempa:=#1\do{%
      \ifx\@tempa\@empty\else\ifx\@tempa\space\else%
        \preto{\@tempa}{#2!}%
        \expandafter\@ChangedAt@@@CreateList\expandafter{\@tempa}%
      \fi\fi%
    }%
  }%
}
%    \end{macrocode}
% Die Änderungsnotiz für die Implementierung wird erst an den Ausrufezeichen 
% in einzelne Argumente getrennt\dots
%    \begin{macrocode}
\NewDocumentCommand\@ChangedAt@@@CreateList{>{\SplitArgument{2}{!}}m}{%
  \@ChangedAt@@@@CreateList#1%
}
%    \end{macrocode}
% \dots und anschließend in die Liste \cs{list@ChangedAt}~-- in einer
% etwas kryptischen Form~-- eingetragen. Dies geschieht jedoch nur, wenn im 
% Argument nicht die Sternversion eines Auszeichnungsbefehls genutzt wurde. 
% Diese sollen keinen Eintrag in der Änderungsliste, wohl aber eine Randnotiz
% erzeugen.
%    \begin{macrocode}
\newcommand*\@ChangedAt@@@@CreateList[3]{%
  \in@{*}{#1}%
  \ifin@%
    \tud@ifbundle{\@bundle}{%
      \protected@edef\@tempa{Allgemein\nobreakspace\@bundle!#2}%
    }{%
      \protected@edef\@tempa{Allgemein!#2}%
    }%
  \else%
    \tud@ifbundle{\@bundle}{%
      \protected@edef\@tempa{%
        Implementierung\nobreakspace\@bundle!#2!%
        \IfValueTF{#3}{#3}{\noexpand\@changedatdeclaredefault}!%
        #1(\@bundle)%
      }%
    }{%
      \protected@edef\@tempa{%
        Implementierung!#2!%
        \IfValueTF{#3}{#3}{\noexpand\@changedatdeclaredefault}!#1%
      }%
    }%
  \fi%
  \listeadd\list@ChangedAt{\expandonce\@tempa}%
}
%    \end{macrocode}
% \end{macro}^^A \list@ChangedAt
% \end{macro}^^A \@ChangedAt@@@@CreateList
% \end{macro}^^A \@ChangedAt@@@CreateList
% \end{macro}^^A \@ChangedAt@@CreateList
% \end{macro}^^A \@ChangedAt@CreateList
%
% \subsection{Ezeugen der Änderungseinträge}
%
% \begin{macro}{\@ChangedAt@CreateEntry}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{\@ChangedAt@@CreateEntry}
% \changes{v2.02}{2014/09/02}{neu}^^A
% Der Befehl \cs{@ChangedAt@CreateEntry} teilt ein gegebenes Argument am 
% Delimiter Ausrufezeichen (\enquote{!}) in drei Argumente auf und reicht diese
% an \cs{@ChangedAt@@CreateEntry} weiter. Sollte kein oder nur Ausrufezeichen
% gefunden werden, so wird das zweite und/oder dritte Argument mit dem~-- vom
% Paket \pkg{xparse} definierten~-- leeren Wert \val{-NoValue-} an den 
% Befehl \cs{@ChangedAt@@CreateEntry} übergeben.
%    \begin{macrocode}
\NewDocumentCommand\@ChangedAt@CreateEntry{>{\SplitArgument{4}{!}}m}{%
  \@ChangedAt@@CreateEntry#1%
}
%    \end{macrocode}
% Hiermit wird der Eintrag in die Änderungshistorie erzeugt. Dabei ist zu 
% unterscheiden, ob der Befehl \cs{ChangedAt} direkt genutzt wurde oder aber 
% der Eintrag innerhalb der \env{Declaration}-Umgebung erfolgte. Dies wird 
% anhand des dritten Argumentes erkannt. Für den ersten Fall erfolgt ein
% Eintrag lediglich, wenn neben der Versionsnummer selbst auch eine Erklärung
% angegben wurde~-- eine Randnotiz wird aber in jedem Fall gesetzt.
% Sollte keine Erklärung direkt angegeben worden sein, so wird in der
% Änderungsliste vermerkt, dass es sich um eine \emph{neue} Option, Befehl etc.
% handelt. Der eigentliche Eintrag selbst erfolgt mit 
% \cs{@ChangedAt@@CreateEntry}.
%
% Mit diesen Befehlen wird die Änderungshistorie in Form eines Index erstellt. 
% Der Befehl \cs{@ChangedAt@CreateList} setzt eine kommagetrennte Liste in eine 
% im Format von \pkg{etoolbox} um. Anschließend wird diese für die 
% Änderungsliste mit \cs{@ChangedAt@CreateEntry} aufgespalten. Die einzelnen 
% Einträge werden mit \cs{@ChangedAt@@CreateEntry} weiter verarbeitet.
% Mit \cs{@ChangedAt@@CreateEntry} Erfolgen die Einträge in die Änderungsliste.
%
%    \begin{macrocode}
\newcommand*\@ChangedAt@@CreateEntry[5]{%
  \IfValueTF{#4}{%
%    \end{macrocode}
% Bei der Deklaration von Optionen, Befehlen etc. werden diese automatisch in 
% der Liste der Änderungen im Bereich \enquote{Implementierung} vor der
% gegebenen Erklärung selbst ausgegeben. Hierfür wird das dritte Argument
% genutzt. Damit lediglich diese und nicht noch die dazugehörigen Argumente
% eingetragen werden, werden die relevanten Befehle deaktiviert.
%    \begin{macrocode}
    \begingroup%
      \@onlyPValue%
    \endgroup%
%    \end{macrocode}
% Danach wird geprüft, ob das Makro \cs{Key} übergeben wurde. Außerdem wird ein 
% Anker in der Änderungsliste für die Referenzierung auf die einzelnen Bereiche 
% (\enquote{Allgemein}, \enquote{Implementierung} und \enquote{Ersetzungen}) 
% gesetzt.
%    \begin{macrocode}
    \expandafter\in@\expandafter\Key\expandafter{\@tempa}%
    \ifin@%
      \begingroup%
        \RenewDocumentCommand\Key{sommo}{\xdef\@TempKey{##3:}}%
        \setbox\z@\hbox{#3}%
      \endgroup%
      \index[changelog]{%
        #1\tudhyperdef*{#1}!\tudhyperdef*{#1:#2}#2!\@TempKey\ #3%
      }%
    \else%
      \index[changelog]{%
        #1\tudhyperdef*{#1}!\tudhyperdef*{#1:#2}#2!#3%
      }%
    \fi%
  \endgroup%
%    \end{macrocode}
% Wurde \cs{ChangedAt} direkt und nicht über das optionale Argument der 
% Umgebungen \env{Declaration} genutzt, erscheint der gewünschte Eintrag im
% Bereich \enquote{Allgemein}.
%    \begin{macrocode}
    \IfValueT{#3}{\@ChangedAt@@CreateEntry{#2}{#1}{#3}}%
  }%
%    \end{macrocode}
% Außerdem wird der Liste \cs{@templist} die aktuelle Version einmalig 
% hinzugefügt, um alle Versionsangaben in einer Randnotiz ausgeben zu können.
%    \begin{macrocode}
  \ifinlist{#1}{\@templist}{}{\listadd\@templist{#1}}%
}
%    \end{macrocode}
% \end{macro}^^A \@ChangedAt@@CreateEntry
% \end{macro}^^A \@ChangedAt@CreateEntry
%
% \subsubsection{Ausgabe der Änderungsliste}
%
% \begin{macro}{\PrintChangelog}
% Ähnlich wie für den Index wird auch für die Änderungsliste verfahren. Mit dem 
% Makro \cs{hyperpagedeprecated} wird die Ausgabe der Seitenzahlen unterdrückt, 
% wenn zusätzlich ein mit \cs{see} gesetzter Querverweis existiert.
%    \begin{macrocode}
\newcommand*\PrintChangelog{%
  \begingroup%
    \clearpage%
    \@printindex[changelog]%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \PrintChangelog
% \begin{macro}{\@printchangedatlist}
% \changes{v2.02}{2014/10/09}{neu}^^A
% Die Einträge in der Änderungsliste sowie die dazugehörige Randnotiz werden 
% mit dem Makro \cs{@ChangedAt@CreateList} abgearbeitet, sortiert und erstellt. 
% Bei \cs{@printchangedatlist} wird mit dem optionalen Argument der Versatz für
% die Randnotiz gesetzt. Dieser wird wie auch die Liste an \cs{???} übergeben,
% womit diese und die Randnotiz letztendlich erzeugt werden.
%    \begin{macrocode}
\NewDocumentCommand\@printchangedatlist{mm}{%
  \ifx\list@ChangedAt\relax\else%
    \@ChangedAt@CreateList{#2}{\list@ChangedAt}%
    \global\let\list@ChangedAt\relax%
%    \end{macrocode}
% Nach der Verarbeitung aller Einräge sind in \cs{@templist} alle angegebenen
% Versionsnummern genau einmal enthalten. Mit \cs{sortlist} werden diese in die
% richtige Reihenfolge sortiert und anschließend als Randnotiz in einer Tabelle
% ausgegeben, falls nicht die Sternversion verwendet wurde.
%    \begin{macrocode}
    \IfBooleanF{#1}{%
      \sortlist\@templist%
      \strut%
      \marginnote{%
        \def\@tempa####1{%
          \ignorespaces%
          \tudhyperref{idx:changelog:####1}{####1}%
          \tabularnewline%
        }%
        \begin{tabular}{|l|}%
          \hline%
          \forlistloop\@tempa{\@templist}%
          \hline%
        \end{tabular}%
      }[#2]%
      \ignorespaces%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@printchangedatlist
%
% \subsection{Erläuterungen und weiterführende Ergänzungen im Handbuch}
%
% Es folgen einige Umgebungen, mit welchen bestimmte Aspekte oder Pakete im
% Handbuch erläutert werden.
%
% Das Paket \pkg{enumitem} erlaubt das Beeinflussen der Standardlisten und die 
% Ableitung neuer Listen aus diesen. Mit \cs{setlist\{noitemsep\}} werden die 
% zusätzlichen Zwischenräume innerhalb der Listen beseitigt.
%    \begin{macrocode}
\RequirePackage{enumitem}[2011/09/28]
\setlist{noitemsep}
%    \end{macrocode}
% Mit den Möglichkeiten des Paketes \pkg{enumitem} werden folgend Listen für 
% das Aufführen von möglichen Werten einer Option sowie der Beschreibung von 
% nützlichen Paketen erstellt. Für beide Lsiten soll dabei die originale 
% Definition von \cs{item} in \cs{stditem} gesichert und anschließend angepasst
% werden. Die Sicherung und Redefinition von \cs{item} erfolgt dabei über das 
% Makro \cs{before@item} über einen bereitgestellten \emph{hook} zu Beginn der 
% jeweiligen Liste.
% \begin{macro}{\stditem}
% \begin{macro}{\before@item}
%    \begin{macrocode}
\newcommand*\stditem{}
\newcommand*\before@item[1]{%
  \ifdefvoid{\stditem}{%
    \let\stditem\item%
    \letcs\item{tud@item@#1}%
%    \end{macrocode}
% Damit Änderungsnotizen in der richtigen Höhe erscheinen, wird die Länge
% \cs{changedatskip} entsprechend angepasst.
%    \begin{macrocode}
    \setlength\changedatskip{-\baselineskip}%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \before@item
% \end{macro}^^A \stditem
% \begin{environment}{values}
% \begin{environment}{@values}
% \begin{macro}{\tud@values}
% Die Liste \env{@values} dient zum Benennen der möglichen Werte für einen 
% bestimmten Schlüssel. Im Handbuch kommt diese Liste vor allem bei Optionen 
% aber ggf. auch bei bestimmten Befehls- und Optionsparametern zum Einsatz. 
% Diese wird in der Umgebung \env{values} eingebettet, damit zum einen ein 
% \emph{obligatorisches} Argument verwendet werden kann und zum anderen 
% \emph{nach} diesem ein optionales für die Liste selbst verwendbar ist. Das 
% obligatorische Argument wird in \cs{tud@values} gesichert und sollte die 
% genauer zu beschreibende Option bzw. das Makro etc. enthalten.
%    \begin{macrocode}
\newcommand*\tud@values{}
\NewDocumentEnvironment{values}{mo}{%
  \def\tud@values{#1}%
  \IfValueTF{#2}{\@values[#2]}{\@values}%
}{%
  \end@values%
}
\newlist{@values}{description}{1}
\setlist[@values]{%
  topsep=\smallskipamount,labelwidth=\linewidth,labelsep=0pt,%
  font=\normalfont,parsep=\parskip,listparindent=\parindent,%
  before=\before@item{values}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@values
% \end{environment}^^A @values
% \end{environment}^^A values
% \begin{macro}{\tud@item@values}
% \begin{macro}{\forslashlist}
% Das Makro \cs{tud@item@values} ersetzt in der Umgebung \env{values} die 
% originale Definiton von \cs{item}. Die Sternversion kann dabei verwendet 
% werden, um die Einstellung für den Säumniswert hervorzuheben. Im ersten 
% optionalen Argument können die möglichen Werte einer Option oder eines 
% Parameters angegeben werden. Sind mehrere Werte gleichbedeutende Werte
% verwendbar, so sind diese durch \val{/} zu trennen. Dabei wird der als 
% erstes angegebene Wert für den Untereintrag in den Index verwendet. Das 
% zweite optionale Argument kann genutzt werden, falls beispielsweise für
% unterschiedliche Klassen sich der Säumniswert unterscheidet. Das letzte 
% optionale Argument in runden Klammern fügt zum Schluss einen ergänzenden 
% Eintrag hinzu.
%    \begin{macrocode}
\DeclareListParser*{\forslashlist}{/}%
\NewDocumentCommand\tud@item@values{sood()}{%
%    \end{macrocode}
% Alle Auszeichnungen kommen nur zum Tragen, wenn ein optionales Argument für 
% die Werte angegeben wurde.
%    \begin{macrocode}
  \IfValueTF{#2}{%
%    \end{macrocode}
% Die durch Schrägstrich getrennte Liste im optionalen Argument wird mit 
% \cs{forslashlist} durchlaufen. Der erste Eintrag wird für den Indexeintrag 
% benötigt und in \cs{@tempc} gesichert, alle weiteren Einträge werden in 
% \cs{@tempb} gespeichert und lediglich im Fließtext aufgelistet.
%    \begin{macrocode}
    \let\@tempc\@empty%
    \def\tud@reserved##1{%
      \if@tempswa%
        \appto\@tempb{/##1}%
      \else%
        \@tempswatrue%
        \let\@tempb\@empty%
        \def\@tempc{##1}%
      \fi%
    }%
    \@tempswafalse%
    \forslashlist{\tud@reserved}{#2}%
%    \end{macrocode}
% Jetzt beginnt die Formatierung der Ausgabe. Zuerst wird die zu beschreibende 
% Option in \cs{@tempa} expandiert. Danach wird der erste Wert angehangen, 
% wobei dieser für die Sternversion als Säumniswert mit \cs{emph} hervorgehoben 
% wird. Zuletzt wird dafür Sorge getragen, dass auf den anschließend erzeugten 
% Eintrag selbst kein Hyperlink erzeugt wird und dieser im passenden Index als 
% Deklaration erscheint.
%    \begin{macrocode}
    \edef\@tempa{\expandonce\tud@values}%
    \protected@eappto\@tempa{%
      =\IfBooleanTF{#1}{\noexpand\emph}{\@firstofone}{\@tempc}=%
    }%
    \appto\@tempa{'none'|declare|}%
%    \end{macrocode}
% Danach werden alle weiteren möglichen Werte angegeben, wobei auch diese im 
% Zweifelsfall mit \cs{emph} hervorzuheben sind.
%    \begin{macrocode}
    \edef\@tempb{%
      \IfBooleanTF{#1}{\noexpand\emph}{\@firstofone}{%
        \noexpand\PValue{\@tempb}%
      }%
    }%
%    \end{macrocode}
% Zuletzt erfolgt die Auszeichnung, ob es sich bei den gelisteten Werten um 
% Säumniswerte handelt, gefolgt vom optionael Suffix.
%    \begin{macrocode}
    \IfBooleanTF{#1}{%
      \appto\@tempb{\suffix{S\"aumniswert}}%
    }{%
      \IfValueT{#3}{\appto\@tempb{\suffix{S\"aumniswert f\"ur #3}}}%
    }%
    \IfValueT{#4}{\appto\@tempb{\suffix{#4}}}%
%    \end{macrocode}
% Die in \cs{tud@values} gespeicherte, zu beschreibende Option bzw. Makro etc. 
% und der erste im optionalen Argument angegebene Wert werden verwendet, um ein
% Label zu erstellen.
%    \begin{macrocode}
    \@getlabel*\@templabel{\@bundle:\tud@values}=\@tempc=%
%    \end{macrocode}
% Abschließend erfolgt wird die Ausgabe des generierten Eintrags mit dem 
% originalen Makro \cs{stditem}.
%    \begin{macrocode}
    \stditem[\tudhyperdef{\@templabel}\@tempa\@tempb]%
  }{%
    \stditem%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \forslashlist
% \end{macro}^^A \tud@item@values
% \begin{macro}{\itemtrue}
% \begin{macro}{\itemfalse}
% \begin{macro}{\tud@item@bool}
% Die folgenden beiden Befehle sind äquivalent zu \cs{tud@item@values} genutzt 
% werden. Diese enthalten allerdings im optionalen Argument zumindest die
% Standardwerte für positive bzw. negative boolesche Schalter. Diese werden 
% durch den Befehl \cs{item@bool} gesetzt.
%    \begin{macrocode}
\NewDocumentCommand\itemtrue{sood()}{\item@bool{#1}{true/on/yes}[#2][#3](#4)}
\NewDocumentCommand\itemfalse{sood()}{\item@bool{#1}{false/off/no}[#2][#3](#4)}
%    \end{macrocode}
% Der Befehl \cs{item@bool} setzt je nach angegebenen Argumenten über ein
% token-Register den auszuführenden \cs{item}-Befehl zusammen.
%    \begin{macrocode}
\NewDocumentCommand\item@bool{mmr[]r[]r()}{%
  \toks@{\item}%
  \IfBooleanT{#1}{\addto@hook\toks@{*}}%
%    \end{macrocode}
% Die optionalen Werte werden im Zweifel den booleschen Standardwerten 
% angehängt und als einziges optionales Argument an \cs{item} übergeben.
%    \begin{macrocode}
  \protected@edef\@tempa{#2\IfValueT{#3}{/#3}}%
  \eaddto@hook\toks@{\expandafter[\@tempa]}%
  \IfValueT{#4}{\addto@hook\toks@{[#4]}}%
  \IfValueT{#5}{\addto@hook\toks@{(#5)}}%
  \the\toks@%
}
%    \end{macrocode}
% \end{macro}^^A \itemfalse
% \end{macro}^^A \itemtrue
% \end{macro}^^A \tud@item@bool
% \begin{environment}{packages}
% \begin{macro}{\tud@item@packages}
% \changes{v2.02}{2014/10/08}{\cs{DeclarePackage} entfernt}^^A
% \changes{v2.02}{2014/10/09}{optionales Argument für CTAN-Link}^^A
% \changes{v2.04}{2015/03/12}{optionales Argument für weitere Pakete}^^A
% Ähnlich wie für die Auflistung von Werten eines Schlüssels wird auch mit der 
% Charakterisierung von Paketen verfahren. Diese werden in der Auflistung 
% speziell gekennzeichnet.
%    \begin{macrocode}
\newlist{packages}{description}{2}
\setlist[packages]{%
  topsep=\smallskipamount,labelwidth=\linewidth,labelsep=0pt,%
  font=\normalfont,parsep=\parskip,listparindent=\parindent,%
  before=\before@item{packages}%
}
%    \end{macrocode}
% Hiermit können ein oder mehrere Pakete erläutert werden. Des Weiteren werden 
% Textanker definiert, auf die im Zweifelsfall in der Dokumentation verlinkt 
% wird.
%    \begin{macrocode}
\NewDocumentCommand\tud@item@packages{od<>d()}{%
%    \end{macrocode}
% Die kommagetrennte Liste im optionalen Argument wird verwendet, um jedes
% einzelnen Paket aufzulisten und einen dazugehörigen Textanker zu erzeugen. 
% Das optionale Argument in Guillemets kann genutzt werden, um \emph{alle} 
% gelisteten Pakete auf den gleichen CTAN-Link zielen zu lassen. Dies ist 
% beispielsweise für mehrere Pakete aus dem gleichen Bundle sinnvoll.
%    \begin{macrocode}
  \def\@tempa##1{%
    \@tempb%
    \@getlabel*\@templabel{\@bundle:\Package{##1}}%
    \tudhyperdef{\@templabel}%
    \begingroup%
      \Package{##1}<#2>'url'|!|%
    \endgroup%
    \def\@tempb{, }%
  }%
  \stditem[{%
    \IfValueT{#1}{%
      \let\@tempb\relax%
      \forcsvlist{\@tempa}{#1}%
%    \end{macrocode}
% Wird im dritten optionalen Argument in runden Klammern ein Paket angegeben,
% so wird ebenfalls ein Textanker erzeugt, allerdings auf einen Hyperlink zu
% CTAN verzichtet.
%    \begin{macrocode}
      \IfValueT{#3}{%
        \@getlabel*\@templabel{\@bundle:\Package{#3}}%
        \quad(\tudhyperdef{\@templabel}\Package{#3}'none'|!|)%
      }%
    }%
  }]%
}
%    \end{macrocode}
% \end{macro}^^A \tud@item@packages
% \end{environment}^^A packages
% \begin{environment}{tabularm}
% \begin{macro}{\allcolumnpar}
% \begin{macro}{\@allcolumnpar}
% \begin{macro}{\tabularm@box}
% \begin{macro}{\tabularm@num}
% \begin{length}{\tabularm@wd}
% \begin{length}{\tempdim}
% \changes{v2.02}{2014/08/16}{neu}^^A
% Die Umgebung \env{tabularm} ist eine Erweiterung der \env{tabular}-Umgebung.
% In dieser wird die Breite der zu setzenden Tabelle mit Hilfe der Box 
% \cs{tabularm@box} in \cs{tabularm@wd} gespeichert. Anschließend kann mit dem
% Befehl \cs{allcolumnpar} eine Zeile über alle Spalten der Tabelle 
% ausgegeben werden. Dabei ist das zu übergebende Argument die Anzahl der zu 
% erzeugenden, linksbündigen Spalten.
%    \begin{macrocode}
\newlength\tempdim
\newsavebox\tabularm@box
\newlength\tabularm@wd
\newcommand*\tabularm@num{1}
\NewEnviron{tabularm}[1]{%
  \begin{lrbox}{\tabularm@box}%
    \let\allcolumnpar\@gobble%
    \begin{tabular}{*{#1}l}\BODY\end{tabular}%
  \end{lrbox}%
  \setlength\tabularm@wd{\wd\tabularm@box}%
  \def\tabularm@num{#1}%
  \let\allcolumnpar\@allcolumnpar%
  \begin{tabular}{*{#1}l}\BODY\end{tabular}%
}
\newcommand*\@allcolumnpar[1]{%
  \multicolumn{\tabularm@num}{@{}p{\tabularm@wd}@{}}{#1}%
}
%    \end{macrocode}
% \end{length}^^A \tempdim
% \end{length}^^A \tabularm@wd
% \end{macro}^^A \tabularm@box
% \end{macro}^^A \tabularm@num
% \end{macro}^^A \@allcolumnpar
% \end{macro}^^A \allcolumnpar
% \end{environment}^^A tabularm
% Mit Hilfe von \pkg{tabularx} können Tabellen bestimmter Breite und
% automatisch berechneten Spaltenbreiten gesetzt werden.
%    \begin{macrocode}
\RequirePackage{tabularx}[1999/01/07]
%    \end{macrocode}
% \begin{macro}{\TermTable}
% \begin{macro}{\@TermTable}
% \begin{macro}{\@@TermTable}
% Für sprachabhängige Bezeichner wird zusätzlich der Befehl \cs{TermTable} 
% definiert, dem eine kommaseparierte Liste übergeben werden kann. Anhand 
% dieser Liste werden die enthalten Begriffe für die Sprachen Deutsch und
% English in einer Tabelle ausgegeben. Die Sternversion dieses Befehls nutzt
% dafür die \env{tabularx}-Umgebung. Für diese kann ein zweites Argument
% angegeben werden, welches die gewünschte Breite der Tabelle angibt.
%    \begin{macrocode}
\NewDocumentCommand\TermTable{smg}{%
  \let\@templist\relax%
  \forcsvlist{\listadd\@templist}{#2}%
  \ifhmode\par\fi%
  \vskip\medskipamount%
  \@afterindentfalse\@afterheading%
  \IfBooleanTF{#1}{%
    \IfValueTF{#3}{\setlength\@tempdima{#3}}{\setlength\@tempdima{\linewidth}}%
    \setlength\@tempdimc{-.7\baselineskip}%
    \begin{tabularx}{\@tempdima}{lXX}\@TermTable\end{tabularx}%
  }{%
    \setlength\@tempdimc{\z@}%
    \begin{tabular}{lll}\@TermTable\end{tabular}%
  }%
  \par\addvspace{\medskipamount}%
}
\newcommand*\@TermTable{%
  \toprule%
  \textbf{Bezeichner} & \textbf{Deutsch} & \textbf{Englisch}\tabularnewline%
  \midrule%
  \forlistloop\@@TermTable{\@templist}%
  \bottomrule%
}
\newcommand*\@@TermTable[1]{%
  \Term{#1} & %
  \ifstr{\@nameuse{#1}}{}{\PName{leer}}{\@nameuse{#1}} & %
  \selectlanguage{english}\vspace*{\@tempdimc}%
  \ifstr{\@nameuse{#1}}{}{\PName{empty}}{\@nameuse{#1}}\tabularnewline%
}
%    \end{macrocode}
% \end{macro}^^A \@@TermTable
% \end{macro}^^A \@TermTable
% \end{macro}^^A \TermTable
% \begin{environment}{Example}
% \begin{environment}{Example*}
% Diese Umgebung wird für die exemplarische Erläuterung von bestimmten Aspekten 
% im Handbuch verwendet. Wenn dafür ein Quelltextauszug nötig ist, kann 
% innerhalb dieser die \env{Code}-Umgebung genutzt werden. Die Sternversion 
% unterdrückt dabei das Zurücksetzen des eigentlich entfernten vertikalen 
% Abstandes.
%    \begin{macrocode}
\newenvironment{Example}{\@nameuse{Example*}}{%
  \@nameuse{endExample*}%
  \addvspace{-\topsep}%
}
\newenvironment{Example*}{%
  \labeling{{\usekomafont{disposition}Beispiel:\ }}%
  \item[{\usekomafont{disposition}Beispiel:\ }]%
}{%
  \endlabeling%
}
%    \end{macrocode}
% \end{environment}^^A Example*
% \end{environment}^^A Example
%
% \iffalse
%</class>
% \fi
%
% \begin{macro}{\Attention}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{macro}{\Forum}
% \begin{macro}{\GitHubRepo}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{macro}{\notudscrartcl}
% \begin{macro}{\scrguide}
% \changes{v2.02}{2014/09/04}{neu}^^A
% \changes{v2.05}{2015/07/23}{Hyperlinktext über optionales Argument}^^A
% Für die Anwenderdokumentation werden weitere Auszeichnungsbefehle definiert.
%    \begin{macrocode}
\newcommand*\Attention[1]{\marginnote{\fbox{Achtung!}}\emph{\trim@spaces{#1}}}
\NewDocumentCommand\Forum{s}{%
  \IfBooleanTF{#1}{%
    \url{http://latex.wcms-file3.tu-dresden.de/phpBB3/}%
  }{%
    \hrfn{http://latex.wcms-file3.tu-dresden.de/phpBB3/}{TUD-\LaTeX-Forum}%
  }%
  \xspace%
}
%<*class>
\NewDocumentCommand\GitHubRepo{s}{%
  \def\@tempc{%
    https://github.com/tud-cd/tudscr/releases%
  }%
  \IfBooleanTF{#1}{%
    \href{\@tempc}{GitHub-Repository~\Distribution*{tudscr}}%
  }{%
    \hrfn{\@tempc}{GitHub-Repository~\Distribution*{tudscr}}%
  }%
  \xspace%
}
\newcommand*\notudscrartcl{%
  F\"ur die Klasse \Class{tudscrartcl} ist diese Option nicht verf\"ugbar.%
}
%</class>
\NewDocumentCommand\scrguide{sO{\KOMAScript-Handbuch}}{%
  \def\@tempc{%
    http://mirrors.ctan.org/macros/latex/contrib/koma-script/doc/scrguide.pdf%
  }%
  \IfBooleanTF{#1}{%
    \href{\@tempc}{#2}%
  }{%
    \hrfn{\@tempc}{#2}%
  }%
  \xspace%
}
%    \end{macrocode}
% \end{macro}^^A \scrguide
% \end{macro}^^A \notudscrartcl
% \end{macro}^^A \GitHubRepo
% \end{macro}^^A \Forum
% \end{macro}^^A \Attention
%
% \subsection{Einbinden von Quelltextauszügen}
%
% Sowohl im Handbuch als auch in den Tutorials werden Quelltextauszüge für das 
% bessere Verständnis des Anwenders angegeben. Um diese darzustellen wird das 
% Paket \pkg{listings} verwendet.
%    \begin{macrocode}
\RequirePackage{listings}[2014/03/04]
\lstdefinestyle{tudscr}{%
  basicstyle=\ttfamily\ifdef{\setstretch}{\setstretch{1}}{},%
  keywordstyle=,%
  columns=fullflexible,keepspaces,%
  aboveskip=\smallskipamount,%
  belowskip=\smallskipamount,%
  language=[LaTeX]TeX,%
  texcl,%
}
%    \end{macrocode}
%
% \iffalse
%<*class>
% \fi
%
% \subsubsection{Quelltextverarbeitung für die Klasse}
%
% \begin{environment}{Code}
% \begin{macro}{\tud@currentHref}
% Folgend werden Befehle und Umgebungen für die Darstellung von Quelltexten im 
% Handbuch definiert. Mit dieser Umgebung können kurze Quelltextbeispiele im
% Handbuch ausgegeben werden. Sicherlich sinnvoll ist, die \env{Code}-Umgebung
% innerhalb von \env{Example} oder \env{quoting} zu verwenden, um den
% Quelltext etwas abzuheben.
%    \begin{macrocode}
\lstnewenvironment{Code}[1][]{\lstset{style=tudscr,#1}}{}
%    \end{macrocode}
% Innerhalb der Umgebung \env{Code} wird \cs{@currentHref} unerwünschter Weise
% geändert. Um dies zu vermeiden, wird dieser Befehl gesichert und anschließend
% zurückgesetzt.
%    \begin{macrocode}
\newcommand*\tud@currentHref{}
\BeforeBeginEnvironment{Code}{\global\let\tud@currentHref\@currentHref}
\AfterEndEnvironment{Code}{\global\let\@currentHref\tud@currentHref}
%    \end{macrocode}
% \end{macro}^^A \tud@currentHref
% \end{environment}^^A Code
%
% \iffalse
%</class>
%<*package>
% \fi
%
% \subsubsection{Quelltextverarbeitung für das Paket}
%
% Für den Anwender werden im \TUDScript-Bundle einige Tutorials für die Nutzung 
% von \LaTeXe bereitgestellt. Innerhalb dieser werden Auszüge von Quelltexten 
% verwendet und erläutert. Zum einen soll die Möglichkeit geschaffen werden, 
% diese gesammelt am Ende eines Tutorials für ein Copy"~\&"~Paste"~Beispiel zu 
% verwenden. Andererseits soll auch das sofortige Ausführen des beschriebenen 
% Quelltextauszuges direkt im Tutorial möglich sein. Dafür werden im Folgenden 
% die Umgebungen \env{Preamble}, \env{Trunk} und \env{Hint} sowie daraus 
% abgeleitet Varianten definiert, womit sich die Angabe und Erläuterung der 
% Quelltexte im Tutorial logisch strukturieren lässt und dennoch die notwendige 
% Ordnung dieser für das Copy"~\&"~Paste"~Beispiel aufrechterhalen werden kann.
% Hierfür zeichnen die beiden Umgebungen \env{Preamble} und \env{Trunk} und
% deren Derivate verantwortlich. Die Umgebung \env{Hint} steht für zusätzliche 
% Erläuterungen bereit, welche jedoch nicht in das Copy"~\&"~Paste"~Beispiel 
% übernommen werden.
%
% Damit die Umgebungen nicht doppelt implementiert werden müssen, werden die
% Hilfsmakros \cs{tud@tut@pre} und \cs{tud@tut@post} definiert. Diese nutzen 
% die \env{filecontents}"=Umgebung, welche den Inhalt in die temporäre Datei 
% \file{\string\jobname-temp.tex} schreibt. Zusätzlich wird dieser Inhalt mit
% \cs{tud@tut@append} der Datei \file{\string\jobname-preamble-temp.tex} oder 
% \file{\string\jobname-trunk-temp.tex}~-- abhängig vom gegebenen Argument~--
% hinzugefügt. So werden die im Dokumentes gesetzten Quelltextauszüge für ein 
% Copy"~\&"~Paste"~Beispiel gesammelt und mit \cs{FinishTutorial} ausgegeben.
% \begin{environment}{Preamble}
% \changes{v2.02}{2014/11/02}{neu}^^A
% \begin{environment}{Preamble*}
% \changes{v2.02}{2014/11/03}{neu}^^A
% \begin{environment}{Preamble+}
% \changes{v2.02}{2014/11/03}{neu}^^A
% Die Umgebung \env{Preamble} dient für die Ausgabe von Quelltexten, welche in 
% einem \LaTeXe-Dokument in der Präambel verwendet werden müssen oder sollten. 
% Die in ihr gesetzten Inhalte werden für das Copy"~\&"~Paste-Beispiel vor den 
% Inhalten aus der Umgebung \env{Trunk} ausgegeben. Die Sternversion führt
% den Inhalt zusätzlich im Dokument aus. Die Pluszechen"=Version fügt dem
% Ausgabestream ihren Inhalt hinzu, ohne das dieser ausgegeben oder ausgeführt
% wird.
%    \begin{macrocode}
\newenvironment{Preamble}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{\tud@write@i}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Preamble*}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{\tud@write@i}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@input%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Preamble+}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{\tud@write@i}%
  \gdef\@tempa{%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Preamble+
% \end{environment}^^A Preamble*
% \end{environment}^^A Preamble
% \begin{environment}{Trunk}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{environment}{Trunk*}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{environment}{Trunk+}
% \changes{v2.02}{2014/11/03}{neu}^^A
% \begin{environment}{Trunk!}
% \changes{v2.02}{2014/10/07}{neu}^^A
% Die Umgebung \env{Trunk} dient zur Ausgabe von exemplarischen Quelltexten, 
% welche in einem \LaTeXe-Dokument innerhalb der \env{document}-Umgebung
% verwendet werden müssen oder sollten. Für das Copy"~\&"~Paste-Beispiel werden 
% die gegebenen Inhalte nach den Inhalten aus der Umgebung \env{Preamble} 
% ausgegeben. Die Sternversion der Umgebung führt ihren Inhalt zusätzlich im
% Dokument aus. Die Pluszeichen"=Version fügt dem Ausgabestream ihren Inhalt
% hinzu, ohne diesen auszugeben oder auszuführen. Die Ausrufezeichen"=Version
% fügt den Quelltext im Dokument ein und führt diesen zusätzlich in einer
% separaten Datei mit einem minimalen Dokumentkörper aus, um daraus eine
% PDF-Datei zu erzeugen, welche im Nachhinein mit \cs{IncludeStandalone} als
% Grafik eingebunden werden kann. Dies ist für Quelltextabschnitte gedacht,
% deren Ausgabe zu groß ist, um diese direkt anzuzeigen und dennoch dargestellt
% werden sollen.
%    \begin{macrocode}
\newenvironment{Trunk}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{\tud@write@ii}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Trunk*}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{\tud@write@ii}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@input%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Trunk+}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{\tud@write@ii}%
  \gdef\@tempa{%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Trunk!}[1]{%
  \gdef\@StandaloneFile{#1}%
  \tud@tut@pre%
}{%
  \tud@tut@post%
  \tud@tut@append{\tud@write@ii}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@pdf%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Trunk!
% \end{environment}^^A Trunk+
% \end{environment}^^A Trunk*
% \end{environment}^^A Trunk
% \begin{environment}{Hint}
% \changes{v2.02}{2014/09/16}{neu}^^A
% \begin{environment}{Hint*}
% \changes{v2.02}{2014/10/13}{neu}^^A
% \begin{environment}{Hint?}
% \changes{v2.02}{2014/12/09}{neu}^^A
% \begin{environment}{Hint!}
% \changes{v2.02}{2014/11/13}{neu}^^A
% Um Quelltextausschnitte zur weiterführenden Information anzugeben, wird die
% Umgebung \env{Hint} definiert. Der Inhalt wird ausgegben und~-- falls die
% Sternversion genutzt wurde~-- auch ausgeführt, allerdings nicht in das 
% Copy"~\&"~Paste"~Beispiel übernommen. Ansonsten entsprechen alle Umgebungen 
% in ihren Eigenschaften den äquivalenten \env{Trunk}-Umgebungen. Die Version 
% mit Fragezeichen ist für Quelltextauszüge gedacht, die ungeprüft \emph{vor}
% dessen Ausgabe ausgeführt werden sollen. 
%    \begin{macrocode}
\newenvironment{Hint}{\tud@tut@pre}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \tud@tut@lst%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Hint*}{\tud@tut@pre}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@input%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Hint?}{\tud@tut@pre}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \InputCode%
    \tud@tut@lst%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Hint!}[1]{%
  \gdef\@StandaloneFile{#1}%
  \tud@tut@pre%
}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@pdf%
    \global\let\@CodePreamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Hint!
% \end{environment}^^A Hint?
% \end{environment}^^A Hint*
% \end{environment}^^A Hint
% \begin{macro}{\@StandaloneFile}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Die Umgebungen \env{Trunk!} und \env{Hint!} erzeugen nach der Ausgabe des
% Quelltextes mit dem Makro \cs{tud@tut@pdf} eine PDF-Datei, welche mit
% \cs{IncludeStandalone} in das Tutorial eingebunden werden kann.
%    \begin{macrocode}
\newcommand*\@StandaloneFile{}
\let\@StandaloneFile\relax
%    \end{macrocode}
% \end{macro}^^A \@StandaloneFile
% \begin{macro}{\tud@tut@pre}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{macro}{\tud@tut@post}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Dies sind die Hilfsmakros, welche zu Beginn und Ende der Quelltextumgebungen 
% \env{Preamble}, \env{Trunk} und \env{Hint} für das Sichern der Inhalte in
% eine Hilfsdatei verantwortlich zeichnen.
%    \begin{macrocode}
\newcommand*\tud@tut@pre{%
  \ActivateWarningFilters[Tutorial]%
  \@nameuse{filecontents*}{\jobname-temp.tex}%
}
\newcommand*\tud@tut@post{%
  \@nameuse{endfilecontents*}%
  \DeactivateWarningFilters[Tutorial]%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@post
% \end{macro}^^A \tud@tut@pre
% \begin{macro}{\tud@tut@lst}
% \changes{v2.02}{2014/10/07}{neu}^^A
% Damit wird der Quelltext eingezogen ausgegeben.
%    \begin{macrocode}
\newcommand*\tud@tut@lst{%
  \begin{quoting}[rightmargin=0pt]%
  \lstinputlisting[style=tudscr]{\jobname-temp.tex}%
  \end{quoting}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@lst
% \begin{macro}{\tud@tut@input}
% \changes{v2.02}{2014/10/13}{neu}^^A
% \begin{macro}{\CodePreamble}
% \changes{v2.02}{2014/08/20}{neu}^^A
% \begin{macro}{\@CodePreamble}
% \changes{v2.02}{2014/10/22}{neu}^^A
% \begin{macro}{\CodeHook}
% \changes{v2.02}{2014/10/11}{neu}^^A
% \begin{macro}{\@CodeHook}
% \changes{v2.02}{2014/10/11}{neu}^^A
% Bereitstellung von Hilfsmakros für die formatierte Ausgabe von Quelltexten.
%    \begin{macrocode}
\newcommand\@CodePreamble{}
\let\@CodePreamble\relax
\newcommand\CodePreamble[1]{\long\gdef\@CodePreamble{#1}}
\newcommand*\@CodeHook{}
\let\@CodeHook\relax
\newcommand*\CodeHook[1]{\gdef\@CodeHook{#1}}%
%    \end{macrocode}
% Für die Ausgabe des Quelltextergebnisses erfolgt ein linker Einzug. Außerdem 
% werden unter anderem abhängig von der Verwendung eines erklärenden Textes die 
% eingefügten vertikalen Abstände angepasst.
%    \begin{macrocode}
\newcommand*\tud@tut@input{%
%    \end{macrocode}
% Nach dem Ausführen des ersten Argumentes von \cs{@tempa} wird geprüft, ob
% dieses überhaupt eine sichtbare Ausgabe erzeugt hat. Nur für diesen Fall wird
% nach dieser vertikaler Leerraum eingefügt. Der Anfang entspricht prinzipiell
% dem Standardbefehl \cs{settoheight}, jedoch wird im Inneren zusätzlich eine
% \cs{vbox} verwendet, um damit auch mathematische Umgebungen testen zu können. 
% Das Ganze findet innerhalb einer Gruppierung statt, um keine Änderungen zu
% erzeugen.
%    \begin{macrocode}
  \def\@tempa##1##2{%
    ##1%
    \begingroup%
      ##2%
      \setbox\@tempboxa\hbox{\vbox{##1}}%
      \@tempdima=\ht\@tempboxa%
      \setbox\@tempboxa\box\voidb@x%
      \ifdim\@tempdima>\z@\relax%
        \endgraf%
        \vspace{\medskipamount}%
        \noindent\ignorespaces%
      \fi%
    \endgroup%
  }%
%    \end{macrocode}
% Da aufgrund der Verwendung der \env{filecontents}"=Umgebung ein optionales
% Argument für alle Abwandlungen der Quelltextumgebungen nicht möglich ist,
% wird \cs{CodePreamble} bereitgestellt, womit der Ausgabe ein erläuternder
% Text vorangestellt werden kann.
%    \begin{macrocode}
  \@tempa{\@CodePreamble}{}%
  \setlength\@tempdimc{\leftskip}%
  \setlength\leftskip{\leftmargin}%
%    \end{macrocode}
% Durch die zweimalige Verwendung von \file{\string\jobname-temp.tex}~-- einmal 
% dirket und einmal innerhalb einer Box~-- können darin verwendete Befehle wie
% \cs{newcommand} zu Fehler führen. Mit dem Makro \cs{CodeHook} lassen sich 
% diese Konflikte durch eine lokale Redefinition ebensoclher Befehle auflösen
% (bspw. \cs{let}\cs{newcommand}\cs{renewcommand}).
%    \begin{macrocode}
  \ActivateWarningFilters[Tutorial]%
  \@tempa{\input{\jobname-temp.tex}}{\@CodeHook}%
  \DeactivateWarningFilters[Tutorial]%
  \global\let\@CodeHook\relax%
  \setlength\leftskip{\@tempdimc}%
  \noindent\ignorespaces%
}
%    \end{macrocode}
% \end{macro}^^A \@CodeHook
% \end{macro}^^A \CodeHook
% \end{macro}^^A \@CodePreamble
% \end{macro}^^A \CodePreamble
% \end{macro}^^A \tud@tut@input
% \begin{macro}{\InputCode}
% \changes{v2.02}{2014/10/21}{neu}^^A
% Mit \cs{InputCode} kann der Inhalt der letzen \env{Trunk}"=Umgebung 
% direkt ausgeführt werden, ohne diesen zuvor mit \cs{tud@tut@input} zu prüfen 
% und zu formatieren.
%    \begin{macrocode}
\newcommand*\InputCode{\input{\jobname-temp.tex}}
%    \end{macrocode}
% \end{macro}^^A \InputCode
% \begin{macro}{\tud@tut@pdf}
% \changes{v2.02}{2014/10/22}{neu}^^A
% Die Umgebung \env{Trunk!} verwendet nach der Ausgabe des Quelltextes diesen
% abermals, um daraus eine PDF-Datei zu erzeugen. Dafür wird mithilfe einer
% \env{filecontents}"=Umgebung eine temporäre \LaTeX-Datei erzeugt. Diese 
% bindet die mit \env{Trunk!} erzeugte Datei ein und wird anschließende via 
% \cs{write18} kompiliert. Dabei sollte man sich nicht von der doppelten
% Verwendung von \cs{jobname} verwirren lassen. Der Dateiname der temporär
% erzeugten \LaTeX-Datei ist abhängig vom gesetzten Tutorial. Beim Aufruf
% dieser wird über die Optionen von \app{pdflatex} der verwendete \cs{jobname}
% angepasst (siehe \cs{tud@tut@pdf}).
%    \begin{macrocode}
\ifnum\pdfshellescape=\@ne\relax%
\ActivateWarningFilters[Tutorial]%
\begin{filecontents*}{tutorial-temp.tex}
\RequirePackage[ngerman=ngerman-x-latest]{hyphsubst}
\documentclass[english,ngerman]{tudscrreprt}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{babel}
\usepackage{tudscrsupervisor}
\usepackage{isodate}
\usepackage{enumitem}
\setlist{noitemsep}
\begin{document}
\input{\jobname.tex}
\end{document}
\end{filecontents*}
\DeactivateWarningFilters[Tutorial]%
\fi
%    \end{macrocode}
% Der Quelltext aus der \env{Trunk!}"=Umgebung wird~-- wie bei allen anderen
% Derivaten der Umgebungen \env{Trunk}~-- in \file{\string\jobname-temp.tex}
% gesichert. Beim Aufruf von \app{pdflatex} wird durch die Verwendung der
% Option \opt{-jobname=\string\jobname-temp} die eigentliche Definition des 
% Makros \cs{jobname} in der aufgerufenen Datei \file{tutorial-temp.tex}
% überschrieben und der Inhalt von \file{\string\jobname-temp.tex} wie
% gewünscht eingebunden und kompiliert. Damit die so erstellte PDF-Datei mit 
% \cs{IncludeStandalone} im weiteren Verlauf in das Tutorial eingebunden werden
% kann, wird diese noch in \cs{\meta{Argument}-temp.pdf} umbenannt.
%    \begin{macrocode}
\newcommand*\tud@tut@pdf{%
  \ifnum\pdfshellescape=\@ne\relax%
    \immediate\write18{%
      pdflatex -jobname=\jobname-temp tutorial-temp.tex
      pdflatex -jobname=\jobname-temp tutorial-temp.tex
      pdflatex -jobname=\jobname-temp tutorial-temp.tex
    }%
    \ifwindows%
      \immediate\write18{rename \jobname-temp.pdf \@StandaloneFile-temp.pdf}%
    \else%
      \immediate\write18{mv \jobname-temp.pdf \@StandaloneFile-temp.pdf}%
    \fi%
  \fi%
  \global\let\@StandaloneFile\relax%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@pdf
% \begin{macro}{\IncludeStandalone}
% \changes{v2.02}{2014/09/10}{neu}^^A
% Der Befehl \cs{IncludeStandalone} bindet die durch \env{Trunk!} generierten
% PDF-Dateien ein. Das angehängte optionale Argument dient zur Angabe der
% einzubindenden Seiten der PDF-Datei, wobei diese automatisch auf die passende
% Breite skaliert werden.
%    \begin{macrocode}
\NewDocumentCommand\IncludeStandalone{omO{1}}{%
  \IfFileExists{#2-temp.pdf}{%
    \@tempcnta\z@%
    \@for\@tempa:=#3\do{\advance\@tempcnta\@ne}%
    \ifnum\@tempcnta>\z@\relax%
      \setlength\@tempdima{\textwidth}%
      \divide\@tempdima\@tempcnta%
      \advance\@tempcnta\m@ne%
      \multiply\@tempcnta 2%
      \addtolength\@tempdima{-\@tempcnta\tabcolsep}%
      \@for\@tempa:=#3\do{%
        \advance\@tempcnta\m@ne%
        \edef\@tempb{%
          keepaspectratio,page=\@tempa,width=\the\@tempdima,%
          \IfValueT{#1}{#1}%
        }
        \fbox{\expandafter\includegraphics\expandafter[\@tempb]{#2-temp.pdf}}%
        \ifnum\@tempcnta>\z@\relax\hfill\fi%
      }%
    \fi%
  }{%
    \tud@shellescape@wrn%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \IncludeStandalone
% \begin{macro}{\StartTutorial}
% \changes{v2.02}{2014/08/21}{neu}^^A
% \begin{macro}{\FinishTutorial}
% \changes{v2.02}{2014/08/21}{neu}^^A
% Mit \cs{StartTutorial} wird ein Hyperlink für den Querverweis aus dem 
% Handbuch definiert. Außerdem wird gleich der Titel und ein einleitender Satz 
% gesetzt.
% \ToDo{headingsvskip abhängig von Schriftgröße (ex)}[v2.05]
%    \begin{macrocode}
\newcommand\StartTutorial[1][%
  Bevor das eigentliche Tutorial beginnt, werden sowohl eine Dokumentklasse 
  als auch die f\"ur jedes \hologo{pdfLaTeX}-Dokument meiner Meinung nach 
  sinnvollen Pakete geladen.
]{%
  \Hy@raisedlink{\hyperdef{\jobname}{tutorials:\jobname}{}}%
  \faculty{}%
  \setlength\headingsvskip{-15mm}%
  \maketitle\noindent#1%
  \immediate\openout\tud@write@i=\jobname-preamble-temp.tex\relax
  \immediate\openout\tud@write@ii=\jobname-trunk-temp.tex\relax
  \immediate\write\tud@write@ii{^^J\string\begin{document}^^J}
}
%    \end{macrocode}
% Der Befehl \cs{FinishTutorial} schleißt den noch offenen Ausgabestream und
% gibt den vorgestellten Quelltext vollständig aus.
%    \begin{macrocode}
\newcommand\FinishTutorial[1][]{%
  \immediate\write\tud@write@ii{^^J\string\end{document}^^J}
  \immediate\closeout\tud@write@ii%
  \immediate\closeout\tud@write@i%
  \tud@tut@collect%
  \clearpage%
  \addsec{Copy\nobreakspace\&\nobreakspace{}Paste}%
  \pagestyle{empty}%
  Zum Ende des Dokumentes wird das vorgestellte Tutorial als \"ubersetzbarer 
  Quelltext ausgegeben, um dieses via Copy~\&~Paste verwenden und alle Punkte
  nachvollziehen zu k\"onnen. Bitte beachten Sie, dass~-- abh\"angig vom 
  genutzten PDF-Betrachter~-- beim Kopieren die dargestellten Einz\"uge und 
  Abs\"atze m\"oglicherweise verloren gehen k\"onnen. Dies kann insbesondere 
  aufgrund fehlender Leerzeilen zu einem unvorteilhaften Ausgabeergebnis 
  f\"uhren. Alternativ finden Sie den folgenden \hologo{LaTeX}-Quelltext auch 
  im Pfad \Path{texmf/source/latex/tudscr/doc/examples/} als Datei 
  \File{\jobname-example.tex}. \par #1
  \begin{quoting}[rightmargin=0pt]%
  \lstinputlisting[style=tudscr]{\jobname-example-temp.tex}%
  \end{quoting}%
}
%    \end{macrocode}
% \end{macro}^^A \FinishTutorial
% \end{macro}^^A \StartTutorial
% \begin{macro}{\tud@tut@readtostream}
% \changes{v2.02}{2014/12/16}{neu}^^A
% \begin{macro}{\tud@tut@line}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{macro}{\tud@tut@append}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{macro}{\tud@tut@collect}
% \changes{v2.02}{2014/12/16}{neu}^^A
% Bei den Tutorials soll zum Schluss ein komplett kompilierbares Beispiel für
% Copy~\&~Paste gegeben werden. Um dieses zusammenzubauen, werden alle im 
% Dokument innerhalb der Varianten der \env{Trunk}"=Umgebungen gegebenen
% Codefragmente zusammengesetzt. Um die Quelltexte einlesen und verarbeiten zu
% können, werden zwei Eingabe- sowie ein Ausgabestream benötigt, welche bereits 
% zuvor initilaisiert wurden.
%
% Mit \cs{tud@tut@readtostream} wird der Inhalt der Datei im ersten Argument 
% in den Ausgabestream des zweiten Argumentes geschrieben. Dies wird durch die
% Makros \cs{tud@tut@append} und \cs{tud@tut@collect} genutzt.
%    \begin{macrocode}
\newcommand*\tud@tut@line{}
\newcommand*\tud@tut@readtostream[2]{%
  \begingroup%
  \endlinechar=-1\relax%
  \openin\tud@read=#1%
%    \end{macrocode}
% Der Schalter \cs{if@tempswa} wird verwendet, um unnötige Leerzeilen in der
% Ausgabedatei zu entfernen. Wurde eine nicht leere Zeile gefunden, wird diese 
% auf jeden Fall geschrieben, indem \cs{@tempswatrue} gesetzt wird. Eine leere 
% Zeile wird~-- bis auf den Sonderfall, dass es sich um die letzte Zeile in der
% Datei handelt~-- zunächst nicht weiter beachtet. Im Zweifelsfall wird diese
% (erste) Leerzeile geschrieben. 
%    \begin{macrocode}
  \@tempswafalse%
  \loop\unless\ifeof\tud@read%
    \readline\tud@read to\tud@tut@line%
    \ifx\tud@tut@line\@empty%
      \ifeof\tud@read\@tempswafalse\fi%
    \else%
      \@tempswatrue%
    \fi%
%    \end{macrocode}
% Hier erfolgt das eigentliche Schreiben im selektierten Stream.
%    \begin{macrocode}
    \if@tempswa%
      \immediate\write#2{\unexpanded\expandafter{\tud@tut@line}}%
    \fi%
%    \end{macrocode}
% Im Nachgang wird überprüft, ob die aktuell geschriebene Zeile leer war. Ist 
% dies der Fall, so wird \cs{@tempswafalse} gesetzt, um eine etwaig folgende 
% Leerzeile nicht in die Ausgabedatei zu schrieben.
%    \begin{macrocode}
    \ifx\tud@tut@line\@empty\@tempswafalse\fi%
  \repeat%
  \closein\tud@read%
  \endgroup%
}
%    \end{macrocode}
% Der innerhalb der Umgebungen \env{Preamble} und \env{Trunk}~-- sowie deren 
% Derivaten~-- angegeben Inhalt wird beim Beenden dieser in die Hilfsdatei
% \cs{jobname-temp.tex} zwischengespeichert. Mit dem Befehl \cs{tud@tut@append}
% wird der Inhalt dieser Datei ausgelesen und den zusätzlichen Hilfsdateien
% \cs{jobname-preamble-temp.tex} beziehungsweise  \cs{jobname-trunk-temp.tex} 
% angehangen und damit gesichert, um Quelltextauszüge aus dem Tutorial für die
% Präambel sowie den Dokumentteil trennen beziehungsweise sortieren zu können.
%    \begin{macrocode}
\newcommand*\tud@tut@append[1]{\tud@tut@readtostream{\jobname-temp.tex}{#1}}
%    \end{macrocode}
% Das Makro \cs{tud@tut@collect} fügt alle Quelltexte des Tutorials, welche 
% nach Präambel und Dokumentteil sortiert wurden, in einer Datei zusammen. 
% Diese wird zum einen am Ende des Tutorials mit \cs{FinishTutorial} ausgeben, 
% zum anderen wird diese als Beispiel in den Ordner für Beispiele beim Erzeugen 
% eines Release kopiert.
%    \begin{macrocode}
\newcommand*\tud@tut@collect{%
  \immediate\openout\tud@write@ii\jobname-example-temp.tex\relax%
  \tud@tut@readtostream{\jobname-preamble-temp.tex}{\tud@write@ii}%
  \tud@tut@readtostream{\jobname-trunk-temp.tex}{\tud@write@ii}%
  \immediate\closeout\tud@write@ii
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@collect
% \end{macro}^^A \tud@tut@append
% \end{macro}^^A \tud@tut@line
% \end{macro}^^A \tud@tut@readtostream
%
% \iffalse
%</package>
% \fi
%
% \subsection{Kompilieren von externen Dateien und Querverweise auf diese}
%
% Das Paket \pkg{filemod} wird genutzt, um externer Dateien nur zu kompilieren,
% wenn dies aufgrund einer Änderung auch notwendig ist.
%    \begin{macrocode}
\RequirePackage{filemod}[2011/09/19]
%    \end{macrocode}
% Um die \cs{write18} sowohl für Windows als auch für unixoide Betriebssysteme 
% nutzen zu können, wird das Paket \pkg{ifplatform} geladen.
%    \begin{macrocode}
\RequirePackage{ifplatform}[2010/10/22]
%    \end{macrocode}
% \begin{macro}{\tud@shellescape@wrn}
% \changes{v2.02}{2014/10/14}{neu}^^A
% Dieses Makro wird verwendet, wenn eine gesuchte Datei nicht gefunden wurde, 
% weil das Dokument noch nicht mit der Option \opt{--shell-escape} kompiliert 
% wurde.
%    \begin{macrocode}
\newcommand*\tud@shellescape@wrn{%
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrtutorial}%
%</package>
  {%
    You have to recompile this document with\MessageBreak%
    activated shell escape option%
  }%
  \global\let\tud@shellescape@wrn\relax%
}
%    \end{macrocode}
% \end{macro}^^A \tud@shellescape@wrn
% \begin{macro}{\Tutorial}
% \changes{v2.02}{2014/08/22}{neu}^^A
% \changes{v2.02}{2014/10/22}{Reimplementierung}^^A
% \begin{macro}{\hypertut}
% \changes{v2.02}{2014/09/02}{neu}^^A
% Die gegebenenfalls notwendige Kompilierung und die Referenzierung eines 
% Tutorials aus dem Handbuch erfolgt mit \cs{Tutorial}. Außerdem erfolgt mit
% \cs{hypertut} ein verlinkter Eintrag in den Index.
%    \begin{macrocode}
%<*class>
\newrobustcmd*\hypertut[2]{%
  \hyperref{tutorials/#1.pdf}{\jobname}{tutorials:#1}{\File*{#1.pdf}#2}%
}
\NewDocumentCommand\Tutorial{smd||}{%
  \ifnum\pdfshellescape=\@ne\relax%
%    \end{macrocode}
% Um mit den verschachtelten Aufrufen von \app{pdflatex} umgehen zu können,
% wird das ganze Prozedere in ein Skript ausgelagert. Somit können die Aufrufe
% von \app{pdflatex} für die Tutorials im entsprechenden Ordner erfolgen.
%    \begin{macrocode}
    \filemodCmp{tutorials/#2.pdf}{tutorials/#2.tex}{}{%
      \immediate\openout\tud@write@i=tutorials.sh%
      \immediate\write\tud@write@i{%
        cd tutorials^^J%
        pdflatex -shell-escape #2^^J%
        pdflatex #2^^J%
        biber #2^^J%
        pdflatex -shell-escape #2^^J%
        makeglossaries #2^^J%
        pdflatex #2%
      }%
      \immediate\closeout\tud@write@i%
%    \end{macrocode}
% Hier erfolgt die Unterscheidung der Befehle für die unterschiedlichen OS.
%    \begin{macrocode}
      \ifwindows%
        \immediate\write18{rename tutorials.sh tutorials.bat}%
        \immediate\write18{tutorials.bat}%
        \immediate\write18{del tutorials.bat}%
      \else%
        \immediate\write18{bash tutorials.sh}%
        \immediate\write18{rm tutorials.sh}%
      \fi%
    }%
  \fi%
%    \end{macrocode}
% Hyperlink und Indexeintrag.
%    \begin{macrocode}
  \IfFileExists{tutorials/#2.pdf}{%
    \hypertut{#2}{}%
  }{%
    \File*{#2.pdf}%
    \tud@shellescape@wrn%
  }%
  \IfBooleanF{#1}{%
    \index[files]{\hypertut{#2}{\suffix{Tutorial}}\IfValueT{#3}{|#3}}%
  }%
}
%</class>
%    \end{macrocode}
% Der Befehl für die Querverweise innerhalb von Tutorials.
%    \begin{macrocode}
%<*package>
\newcommand*\Tutorial[1]{\href{#1.pdf}{\textsbn{#1.pdf}}}
%</package>
%    \end{macrocode}
% \end{macro}^^A \hypertut
% \end{macro}^^A \Tutorial
% \begin{macro}{\IncludeExample}
% \changes{v2.02}{2014/07/25}{Skalierung der eingefügten Seiten}^^A
% \changes{v2.02}{2014/10/14}{Reimplementierung}^^A
% Mit diesem Befehl wird eine \LaTeX-Datei ggf. übersetzt und anschließend als
% PDF"~Datei wieder eingebunden. Zuvor wird der dazugehörige Quelltext mittels
% \cs{lstinputlisting} im Dokument ausgegeben. Dieser Befehl wird lediglich für 
% die Klasse \cls{tudscrmanual} benötigt.
%    \begin{macrocode}
%<*class>
\newcommand*\IncludeExample[1]{%
  \lstinputlisting[style=tudscr]{examples/#1}%
%    \end{macrocode}
% Die Beispiele werden nur erneut kompiliert, wenn sich diese geändert haben 
% oder noch gar kein entsprechendes PDF"~Dokument existiert.
%    \begin{macrocode}
  \ifnum\pdfshellescape=\@ne\relax%
    \filemodCmp{examples/#1.pdf}{examples/#1.tex}{}{%
      \immediate\write18{%
        pdflatex -output-directory examples examples/#1.tex^^J%
        pdflatex -output-directory examples examples/#1.tex%
      }%
    }%
  \fi%
%    \end{macrocode}
% Ist die gesuchte Datei vorhanden, wird diese auch eingebunden. Andernfalls 
% wird eine Warnung mit dem Hinweis auf die notwendige Verwednung von 
% \val{pdflatex} mit der Option \opt{--shell-escape} erzeugt.
%    \begin{macrocode}
  \IfFileExists{examples/#1.pdf}{%
    \includepdf[%
      pages=-,noautoscale,frame,keepaspectratio,pagecommand={},%
      height=\textheight,width=\textwidth, offset=5mm 0mm%
    ]{examples/#1.pdf}%
  }{%
    \tud@shellescape@wrn%
  }%
}
%</class>
%    \end{macrocode}
% \end{macro}^^A \IncludeExample
%
% \subsection{ToDo-Liste}
%
% Für Klasse und Paket besteht die Möglichkeit, Änderungsnotizen zu nutzen. 
% Hierfür wird das Paket \pkg{todonotes} genutzt. Dieses kann jedoch nur zum
% Einsatz kommen, falls \pkg{auto-pst-pdf} nicht gerade aktiv ist, denn 
% \pkg{todonotes} lädt wiederum das Paket \pkg{tikz}, welches zu Problem bei
% der automatisierten Erstellung von \env{pstricks}"=Grafiken führt. Mit dem 
% Paket \pkg{ifpdf} kann erkannt werden, ob \pkg{auto-pst-pdf} im aktuellen
% Durchlauf zum Einsatz kommt, da in diesem Fall nicht \app{pdflatex} als
% Textsatzsystem verwendet wird.
%    \begin{macrocode}
\RequirePackage{ifpdf}[2011/01/30]
\ifpdf
  \PassOptionsToPackage{obeyFinal}{todonotes}
%    \end{macrocode}
% Für den Druck wird die farbige Ausgabe der ToDo-Notizen deaktiviert.
%    \begin{macrocode}
  \ifdef{\tudprintflag}{%
    \PassOptionsToPackage{color=white}{todonotes}%
  }{%
    \PassOptionsToPackage{colorinlistoftodos,color=HKS92!10}{todonotes}%
  }
  \RequirePackage{todonotes}[2012/07/25]
  \TUDoptions{ToDo=true}
%    \end{macrocode}
% Ist \pkg{auto-pst-pdf} aktiv, wird einfach die Option \opt{final} gesetzt, um
% eine Verwendung der Option \opt{ToDo} nach dem Laden der Klasse unschädlich
% zu machen.
%    \begin{macrocode}
\else
  \TUDoptions{final=true}
\fi
%    \end{macrocode}
%
% \iffalse
%</body>
%<*option>
% \fi
%
% \begin{option}{ToDo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% \changes{v2.05}{2015/10/27}{Nutzung von Positiv- und Negativ-Liste}^^A
% \begin{macro}{\if@tud@todo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% \begin{macro}{\tud@todo@type@pos}
% \changes{v2.05}{2015/10/27}{neu}^^A
% \begin{macro}{\tud@todo@type@neg}
% \changes{v2.05}{2015/10/27}{neu}^^A
% Diese Option ist verantwortlich für den Schalter \cs{if@tud@todo}. Über 
% diesen wird gesteuert, ob ToDo-Notizen ausgegeben werden sollen.
%    \begin{macrocode}
\newif\if@tud@todo
\newcommand*\tud@todo@type@pos{}
\let\tud@todo@type@pos\relax
\newcommand*\tud@todo@type@neg{}
\let\tud@todo@type@neg\relax
\TUD@key{ToDo}[true]{%
  \TUD@set@ifkey{ToDo}{@tud@todo}{#1}%
%    \end{macrocode}
% Wird der Option ein boolescher Wert übergeben, sind sowohl die Positiv- als 
% auch die Negativ-Liste hinfällig.
%    \begin{macrocode}
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \let\tud@todo@type@pos\relax%
    \let\tud@todo@type@neg\relax%
  \else%
%    \end{macrocode}
% Wird die Option nicht mit einem booleschen Wert verwendet, so kann über diese 
% gezielt der Typ einer (nicht) auszugebenden ToDo-Notiz angegeben werden. So 
% können bestimmte Typen von Notizen entweder ausschließlich ausgegeben oder 
% aber unterdrückt werden, wobei für letztere Variante das Suffix \val{not} 
% vor dem eigentlichen Typen verwendet werden muss.
%    \begin{macrocode}
    \def\@tempa not##1##2##3##4\@nil{%
      \ifstr{##1##2##3}{not}{%
        \if\relax##4\relax\else%
          \listeadd\tud@todo@type@neg{##4}%
        \fi%
      }{%
        \if\relax##1\relax\else%
          \listeadd\tud@todo@type@pos{##1##2##3##4}%
        \fi%
      }%
    }%
    \edef\@tempb{not\trim@spaces{#1}}%
    \expandafter\@tempa\@tempb\relax\@empty\@empty\@nil%
    \@tud@todotrue%
    \FamilyKeyStateProcessed%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \tud@todo@type@neg
% \end{macro}^^A \tud@todo@type@pos
% \end{macro}^^A \if@tud@todo
% \end{option}^^A ToDo
%
% \iffalse
%</option>
%<*body>
% \fi
%
% \begin{macro}{\ToDo}
% \changes{v2.02}{2014/07/10}{Verwendung von \pkg{todonotes}}^^A
% \changes{v2.03}{2015/01/25}{Ausgabe auf bestimmten Typ beschränkbar}^^A
% \changes{v2.05}{2015/11/02}{Farbkodierung durch optionale Versionsnummer}^^A
% \begin{macro}{\tud@todo@type@color}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\ListOfToDo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% Mit dem Befehl \cs{ToDo}\oarg{Option}\marg{ToDo-Notiz}\oarg{Versionsnummer}
% kann bei aktivierter Option \opt{ToDo} eine Notiz mit einer offenen Aufgabe
% erstellt werden. Das vorangestellte Argument kann Optionen beinhalten, welche
% durch \pkg{todonotes} unterstützt werden. Außerdem werden die fünf booleschen
% Schlüssel \val{doc}, \val{man}, \val{imp}, \val{urg} und \val{nxt} definiert,
% welche eine farbliche Kodierung erzeugen, um die Aufgaben tu kategorisieren.
%    \begin{macrocode}
\AfterPackage*{todonotes}{%
  \newcommand*\tud@todo@type@color[2]{%
    \define@boolkey{todonotes}{#1}[true]{%
      \ifdef{\tudprintflag}{}{%
        \ifbool{KV@todonotes@#1}{\setkeys{todonotes}{color=#2}}{}%
      }%
    }%
  }%
  \tud@todo@type@color{doc}{HKS41!30}%
  \tud@todo@type@color{rls}{HKS44!50}%
  \tud@todo@type@color{imp}{HKS57!50}%
  \tud@todo@type@color{urg}{HKS07!50}%
  \tud@todo@type@color{nxt}{HKS92!30}%
  \undef\tud@todo@type@color%
%    \end{macrocode}
% Nun folgt die Definition des eigentlichen Befehls. Dabei wird zu Beginn
% \cs{@currentHref} gesichert und am Ende wiederhergestellt.
%    \begin{macrocode}
  \NewDocumentCommand\ToDo{somo}{%
    \ifbool{@tud@todo}{%
      \global\let\tud@currentHref\@currentHref%
      \begingroup%
%    \end{macrocode}
% In \cs{@tempa} wird das optionale Argument für den \cs{todo}-Befehl aus dem 
% Paket \pkg{todonotes} erstellt.
%    \begin{macrocode}
        \let\@tempa\@empty%
%    \end{macrocode}
% Das angestellte optionale Argument erzeugt zusätzlich eine Notiz am Rand, in
% welcher vorzugsweise die angedachte Version eingetragen werden kann. Sollte 
% dieser angegeben sein, wird auf eine gültige Versionsnummer geprüft. Dabei 
% wird ein möglicherweise vorangestelltes \val{v} entfernt.
%    \begin{macrocode}
        \IfValueT{#4}{%
          \def\@tempa{\@ifnextchar v{\@tempb}{\@tempb v}}%
          \def\@tempb v##1\@nil{\def\@tempc{##1}}%
          \@tempa #4\@nil%
%    \end{macrocode}
% Exisitiert die angegebene Versionsnummer, so wird geprüft, ob die des 
% optionalen Argumentes bereits veraltet ist. Ist dies der Fall, wird die 
% ToDo-Notiz als dringlich (\val{urg}) gekennzeichnet.
%    \begin{macrocode}
          \ifcsdef{tud@v@\@tempc}{%
            \let\@templist\relax%
            \listeadd\@templist{\@tempc}%
            \expandafter\@tempa\vTUDScript\@nil%
            \listeadd\@templist{\@tempc}%
            \sortlist\@templist
            \def\do##1{%
              \ifstr{##1}{\@tempc}{\let\@tempa\@empty}{\def\@tempa{urg}}%
              \listbreak%
            }%
            \dolistloop{\@templist}%
%    \end{macrocode}
% Exisitiert die angegebene Versionsnummer nicht, so wird geprüft, ob es sich 
% überhaupt um eine Versionsnummer handelt. Ist dies der Fall, wird die 
% ToDo-Notiz als Aufgabe für eine spätere Version (\val{nxt}) gekennzeichnet.
%    \begin{macrocode}
          }{%
            \def\@tempa##1.##2##3##4\@nil{##1##2##3}%
            \edef\@tempc{\expandafter\@tempa\@tempc.000\@nil}%
            \ifxnumber{\@tempc}{\def\@tempa{nxt}}{\let\@tempa\@empty}%
          }%
        }%
%    \end{macrocode}
% Anschließend wird das eigentliche optionale Argument vorangestellt, wobei in
% diesem ggf. auch der Kategorisierungstyp enthalten ist.
%    \begin{macrocode}
        \IfValueT{#2}{\preto\@tempa{#2,}}%
%    \end{macrocode}
% Die Ausgabe erfolgt entweder für alle ToDo-Notizen oder nur für die per 
% Option festgelegten Typen. Dabei wird in einer Schleife geprüft, ob der in 
% der aktuellen Notiz angegebene Kategorisierungstyp entweder in der Positv- 
% oder aber in der Negativ-Liste enthalten ist. Soll der aktuelle Typ  
% ausgegeben werden, wird der Schalter \cs{@tempswa} gesetzt.
%    \begin{macrocode}
        \@tempswafalse%
        \ifx\tud@todo@type@pos\relax\@tempswatrue\fi%
        \toks@{\forcsvlist{\@tempb}}%
        \eaddto@hook\toks@{\expandafter{\@tempa}}%
        \let\@tempa\@empty%
        \def\@tempb##1{%
          \eappto\@tempa{##1,}%
          \ifinlist{##1}{\tud@todo@type@pos}{\@tempswatrue}{}%
          \ifinlist{##1}{\tud@todo@type@neg}{\@tempswafalse}{}%
        }%
        \the\toks@%
%    \end{macrocode}
% Vor der Ausgabe wird ein kleiner vertikaler Abstand eingefügt.
%    \begin{macrocode}
        \if@tempswa%
          \ifhmode\par\fi%
          \let\par\relax%
          \vskip\medskipamount%
          \noindent%
%    \end{macrocode}
% Dann erfolgt die Ausgabe der eigentlichen ToDo-Notiz im Textbereich. Die 
% Sternversion von \cs{ToDo} unterdrückt dabei die Aufnahme in die ToDo-Liste.
%    \begin{macrocode}
          \toks@\expandafter{\@tempa inline}%
          \IfBooleanT{#1}{\addto@hook\toks@{,nolist}}%
          \sbox\z@{%
            \expandafter\todo\expandafter[\the\toks@]{\trim@spaces{#3}\strut}%
          }\usebox\z@%
%    \end{macrocode}
% Es folgt die dazugehörige Randnotiz. Damit diese nicht verrutscht, wird
% \cs{marginnote} anstelle von \cs{marginpar} verwendet. Wurde das angestellte
% optionale Argument verwendet, wird dieses für die Randnotiz genutzt.
% Andernfalls erscheint im Rand die Anmerkung \emph{ToDo}.
%    \begin{macrocode}
          \renewcommand*\marginpar[2][]{%
            \marginnote[##1]{##2}[\dimexpr-\ht\z@+1.6ex+1.75pt\relax]%
          }%
          \toks@\expandafter{\@tempa noline,nolist}%
          \IfValueTF{#4}{%
            \def\@tempb{\trim@spaces{#4}\strut}%
          }{%
            \def\@tempb{ToDo\strut}%
          }%
          \settowidth\marginparwidth{\@tempb}%
          \addtolength\marginparwidth{\dimexpr1.6ex+1pt\relax}%
          \expandafter\todo\expandafter[\the\toks@]{\@tempb}%
          \aftergroup\par\aftergroup\noindent%
        \fi%
      \endgroup%
      \global\let\@currentHref\tud@currentHref%
    }{}%
    \ignorespaces%
  }%
%    \end{macrocode}
% Zum Schluss wird der Befehl \cs{ListOfToDo} definiert, der die Liste der noch 
% zu erledigenden Punkte ausgibt.
%    \begin{macrocode}
  \newcommand*\ListOfToDo{\if@tud@todo\clearpage\listoftodos\fi}%
}
%    \end{macrocode}
% Sollte das Paket \pkg{todonotes} nicht geladen werden, erfolgt ein Definition 
% der beiden notwendigen Befehle als Dummy.
%    \begin{macrocode}
\TUD@UnwindPackage{todonotes}{%
  \NewDocumentCommand\ToDo{somo}{}%
  \newcommand*\ListOfToDo{}%
}
%    \end{macrocode}
% \end{macro}^^A \ListOfToDo
% \end{macro}^^A \tud@todo@type@color
% \end{macro}^^A \ToDo
%
% \section{Verschiedenes für die Dokumentationsklassen und -pakete}
%
% Sowohl für die Klasse \cls{tudscrmanual} als auch \cls{tudscrdoc} werden ein 
% paar Befehle zur komfortablen verwendung im Fließtext definiert. Außerdem 
% erfolgen mittels einiger Pakete verschiedene Formateinstellungen.
%
% Für den Fließtext werden Pfeile u.\,ä. durch \pkg{textcomp} bereitgestellt.
%    \begin{macrocode}
\RequirePackage{textcomp}[2005/09/27]
%    \end{macrocode}
% Vergrößerung des Durchschusses.
%    \begin{macrocode}
\RequirePackage{setspace}[2011/12/19]
\setstretch{1.1}
%    \end{macrocode}
% Sprachabhängiges Setzen von Anführungszeichen. Das Laden des Paketes darf 
% erst nach \pkg{inputenc} erfolgen.
%    \begin{macrocode}
\AfterPackage*{inputenc}{\RequirePackage{csquotes}[2011/10/22]}
\TUD@UnwindPackage{csquotes}{%
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrtutorial}%
%</package>
    {Package `csquotes' not loaded}%
  \providecommand\enquote[1]{\glqg#1\grqq{}}%
}
%    \end{macrocode}
% Verbesserte Zitate.
%    \begin{macrocode}
\PassOptionsToPackage{vskip=\smallskipamount}{quoting}
\RequirePackage{quoting}[2014/01/28]
%    \end{macrocode}
% Automatisierte Datumsformatierung.
%    \begin{macrocode}
\RequirePackage{isodate}[2010/01/03]
%    \end{macrocode}
% Verschiedenste Symbole aus dem \LaTeX-Universum.
%    \begin{macrocode}
\RequirePackage{hologo}[2012/04/26]
%    \end{macrocode}
%
% \iffalse
%<*class>
% \fi
%
% Mit dem Paket \pkg{ragged2e} wird~-- falls benötigt~-- die Silbentrennung im 
% Flattersatz aktiviert. 
%    \begin{macrocode}
\RequirePackage{ragged2e}[2009/05/21]
%    \end{macrocode}
% Die Fußnoten werden nicht mit jedem Kapitel zurückgesetzt.
%    \begin{macrocode}
\RequirePackage{chngcntr}[2009/09/02]
\counterwithout{footnote}{chapter}
%    \end{macrocode}
% Das Paket wird für die Erstellung von Tabellen verwendet.
%    \begin{macrocode}
\RequirePackage{booktabs}[2005/04/14]
%    \end{macrocode}
% Erstellen von Grafiken.
%    \begin{macrocode}
\RequirePackage{tikz}[2013/12/13]
%    \end{macrocode}
% Einbinden von ganzseitigen PDF"~Dokumenten als Beispiel im Handbuch.
%    \begin{macrocode}
\RequirePackage{pdfpages}[2013/08/25]
%    \end{macrocode}
% Typographisch saubere Einheiten.
%    \begin{macrocode}
\RequirePackage{units}[1998/08/04]
%    \end{macrocode}
% Das Paket \pkg{ellipsis} sorgt für korrekte Auslassungpunkte.
%    \begin{macrocode}
\AtEndPreamble{%
  \RequirePackage{ellipsis}[2004/9/28]%
  \let\ellipsispunctuation\relax%
}
%    \end{macrocode}
%
% \iffalse
%</class>
%</body>
%</!doc>
%<*body|doc>
% \fi
%
% \begin{macro}{\CD}
% \begin{macro}{\CDs}
% \begin{macro}{\TUD}
% \begin{macro}{\TnUD}
% \begin{macro}{\TUDCD}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\TUDCDs}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\DDC}
% Diese Befehle stellen regelmäßig in der Quelltextdokumentatuion und im 
% Handbuch genutzte Textbausteine bereit. Dazu wird der Befehl \cs{xspace} aus 
% dem \pkg{xspace}-Paket genutzt.
%    \begin{macrocode}
%<doc>\AtBeginDocument{%
\newcommand*\CD{Corporate Design\xspace}
\newcommand*\CDs{Corporate Designs\xspace}
\newcommand*\TUD{Technische Universit\"at Dresden\xspace}
\newcommand*\TnUD{Technischen Universit\"at Dresden\xspace}
\newcommand*\TUDCD{\CD der \TnUD}
\newcommand*\TUDCDs{\CDs der \TnUD}
%<!doc>\AfterPackage*{babel}{%
%<doc>\@ifpackageloaded{babel}{%
  \@expandtwoargs\in@{,english,}{,\bbl@loaded,}%
  \ifin@%
    \renewcommand*\CD{\foreignlanguage{english}{Corporate Design}\xspace}%
    \renewcommand*\CDs{\foreignlanguage{english}{Corporate Designs}\xspace}%
  \fi%
%<doc>}{}
%<!doc>}
\newrobustcmd*\DDC{%
  \mbox{%
    D\kern.05em R\kern.05em E\kern.05em S\kern.05em %
    D\kern.05em E\kern.05em N\kern.1em-\kern.1em concept%
  }\xspace%
}
%<doc>}
%    \end{macrocode}
% \end{macro}^^A \DDC
% \end{macro}^^A \TUDCDs
% \end{macro}^^A \TUDCD
% \end{macro}^^A \TnUD
% \end{macro}^^A \TUD
% \end{macro}^^A \CDs
% \end{macro}^^A \CD
% \begin{macro}{\Univers}
% \begin{macro}{\DIN}
% Für die Nennung der Schriften spezielle Markos bereitgestellt.
%    \begin{macrocode}
\newcommand*\Univers{\textubn{Univers}\xspace}
\newcommand*\DIN{\textdbn{DIN~BOLD}\xspace}
%    \end{macrocode}
% \end{macro}^^A \DIN
% \end{macro}^^A \Univers
%
% \iffalse
%</body|doc>
%<*body>
% \fi
%
% \begin{macro}{\textsbn}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{macro}{\sbnfont}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{macro}{\textsbs}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{macro}{\sbsfont}
% \changes{v2.02}{2014/08/16}{neu}^^A
% Für die Anwenderdokumentation werden weitere Auszeichnungsbefehle definiert.
%    \begin{macrocode}
\newcommand*\textsbn{}
\newrobustcmd*\sbnfont{\sffamily\bfseries\upshape}
\DeclareTextFontCommand\textsbn{\sbnfont}
\newcommand*\textsbs{}
\newrobustcmd*\sbsfont{\sffamily\bfseries\slshape}
\DeclareTextFontCommand\textsbs{\sbsfont}
%    \end{macrocode}
% \end{macro}^^A \sbsfont
% \end{macro}^^A \textsbs
% \end{macro}^^A \sbnfont
% \end{macro}^^A \textsbn
%
% \iffalse
%</body>
% \fi
%
% \Finale
%
\endinput
